# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_openframeworks')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_openframeworks')
    _openframeworks = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_openframeworks', [dirname(__file__)])
        except ImportError:
            import _openframeworks
            return _openframeworks
        try:
            _mod = imp.load_module('_openframeworks', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _openframeworks = swig_import_helper()
    del swig_import_helper
else:
    import _openframeworks
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _openframeworks.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _openframeworks.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _openframeworks.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _openframeworks.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _openframeworks.SwigPyIterator_equal(self, x)

    def copy(self):
        return _openframeworks.SwigPyIterator_copy(self)

    def next(self):
        return _openframeworks.SwigPyIterator_next(self)

    def __next__(self):
        return _openframeworks.SwigPyIterator___next__(self)

    def previous(self):
        return _openframeworks.SwigPyIterator_previous(self)

    def advance(self, n):
        return _openframeworks.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _openframeworks.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _openframeworks.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _openframeworks.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _openframeworks.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _openframeworks.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _openframeworks.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _openframeworks.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


class IntVector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _openframeworks.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openframeworks.IntVector___nonzero__(self)

    def __bool__(self):
        return _openframeworks.IntVector___bool__(self)

    def __len__(self):
        return _openframeworks.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _openframeworks.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openframeworks.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openframeworks.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openframeworks.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openframeworks.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openframeworks.IntVector___setitem__(self, *args)

    def pop(self):
        return _openframeworks.IntVector_pop(self)

    def append(self, x):
        return _openframeworks.IntVector_append(self, x)

    def empty(self):
        return _openframeworks.IntVector_empty(self)

    def size(self):
        return _openframeworks.IntVector_size(self)

    def swap(self, v):
        return _openframeworks.IntVector_swap(self, v)

    def begin(self):
        return _openframeworks.IntVector_begin(self)

    def end(self):
        return _openframeworks.IntVector_end(self)

    def rbegin(self):
        return _openframeworks.IntVector_rbegin(self)

    def rend(self):
        return _openframeworks.IntVector_rend(self)

    def clear(self):
        return _openframeworks.IntVector_clear(self)

    def get_allocator(self):
        return _openframeworks.IntVector_get_allocator(self)

    def pop_back(self):
        return _openframeworks.IntVector_pop_back(self)

    def erase(self, *args):
        return _openframeworks.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _openframeworks.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _openframeworks.IntVector_push_back(self, x)

    def front(self):
        return _openframeworks.IntVector_front(self)

    def back(self):
        return _openframeworks.IntVector_back(self)

    def assign(self, n, x):
        return _openframeworks.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _openframeworks.IntVector_resize(self, *args)

    def insert(self, *args):
        return _openframeworks.IntVector_insert(self, *args)

    def reserve(self, n):
        return _openframeworks.IntVector_reserve(self, n)

    def capacity(self):
        return _openframeworks.IntVector_capacity(self)
    __swig_destroy__ = _openframeworks.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _openframeworks.IntVector_swigregister
IntVector_swigregister(IntVector)

class FloatVector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _openframeworks.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openframeworks.FloatVector___nonzero__(self)

    def __bool__(self):
        return _openframeworks.FloatVector___bool__(self)

    def __len__(self):
        return _openframeworks.FloatVector___len__(self)

    def __getslice__(self, i, j):
        return _openframeworks.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openframeworks.FloatVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openframeworks.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openframeworks.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openframeworks.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openframeworks.FloatVector___setitem__(self, *args)

    def pop(self):
        return _openframeworks.FloatVector_pop(self)

    def append(self, x):
        return _openframeworks.FloatVector_append(self, x)

    def empty(self):
        return _openframeworks.FloatVector_empty(self)

    def size(self):
        return _openframeworks.FloatVector_size(self)

    def swap(self, v):
        return _openframeworks.FloatVector_swap(self, v)

    def begin(self):
        return _openframeworks.FloatVector_begin(self)

    def end(self):
        return _openframeworks.FloatVector_end(self)

    def rbegin(self):
        return _openframeworks.FloatVector_rbegin(self)

    def rend(self):
        return _openframeworks.FloatVector_rend(self)

    def clear(self):
        return _openframeworks.FloatVector_clear(self)

    def get_allocator(self):
        return _openframeworks.FloatVector_get_allocator(self)

    def pop_back(self):
        return _openframeworks.FloatVector_pop_back(self)

    def erase(self, *args):
        return _openframeworks.FloatVector_erase(self, *args)

    def __init__(self, *args):
        this = _openframeworks.new_FloatVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _openframeworks.FloatVector_push_back(self, x)

    def front(self):
        return _openframeworks.FloatVector_front(self)

    def back(self):
        return _openframeworks.FloatVector_back(self)

    def assign(self, n, x):
        return _openframeworks.FloatVector_assign(self, n, x)

    def resize(self, *args):
        return _openframeworks.FloatVector_resize(self, *args)

    def insert(self, *args):
        return _openframeworks.FloatVector_insert(self, *args)

    def reserve(self, n):
        return _openframeworks.FloatVector_reserve(self, n)

    def capacity(self):
        return _openframeworks.FloatVector_capacity(self)
    __swig_destroy__ = _openframeworks.delete_FloatVector
    __del__ = lambda self: None
FloatVector_swigregister = _openframeworks.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class StringVector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _openframeworks.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openframeworks.StringVector___nonzero__(self)

    def __bool__(self):
        return _openframeworks.StringVector___bool__(self)

    def __len__(self):
        return _openframeworks.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _openframeworks.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openframeworks.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openframeworks.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openframeworks.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openframeworks.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openframeworks.StringVector___setitem__(self, *args)

    def pop(self):
        return _openframeworks.StringVector_pop(self)

    def append(self, x):
        return _openframeworks.StringVector_append(self, x)

    def empty(self):
        return _openframeworks.StringVector_empty(self)

    def size(self):
        return _openframeworks.StringVector_size(self)

    def swap(self, v):
        return _openframeworks.StringVector_swap(self, v)

    def begin(self):
        return _openframeworks.StringVector_begin(self)

    def end(self):
        return _openframeworks.StringVector_end(self)

    def rbegin(self):
        return _openframeworks.StringVector_rbegin(self)

    def rend(self):
        return _openframeworks.StringVector_rend(self)

    def clear(self):
        return _openframeworks.StringVector_clear(self)

    def get_allocator(self):
        return _openframeworks.StringVector_get_allocator(self)

    def pop_back(self):
        return _openframeworks.StringVector_pop_back(self)

    def erase(self, *args):
        return _openframeworks.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _openframeworks.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _openframeworks.StringVector_push_back(self, x)

    def front(self):
        return _openframeworks.StringVector_front(self)

    def back(self):
        return _openframeworks.StringVector_back(self)

    def assign(self, n, x):
        return _openframeworks.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _openframeworks.StringVector_resize(self, *args)

    def insert(self, *args):
        return _openframeworks.StringVector_insert(self, *args)

    def reserve(self, n):
        return _openframeworks.StringVector_reserve(self, n)

    def capacity(self):
        return _openframeworks.StringVector_capacity(self)
    __swig_destroy__ = _openframeworks.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _openframeworks.StringVector_swigregister
StringVector_swigregister(StringVector)

class UCharVector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _openframeworks.UCharVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openframeworks.UCharVector___nonzero__(self)

    def __bool__(self):
        return _openframeworks.UCharVector___bool__(self)

    def __len__(self):
        return _openframeworks.UCharVector___len__(self)

    def __getslice__(self, i, j):
        return _openframeworks.UCharVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openframeworks.UCharVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openframeworks.UCharVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openframeworks.UCharVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openframeworks.UCharVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openframeworks.UCharVector___setitem__(self, *args)

    def pop(self):
        return _openframeworks.UCharVector_pop(self)

    def append(self, x):
        return _openframeworks.UCharVector_append(self, x)

    def empty(self):
        return _openframeworks.UCharVector_empty(self)

    def size(self):
        return _openframeworks.UCharVector_size(self)

    def swap(self, v):
        return _openframeworks.UCharVector_swap(self, v)

    def begin(self):
        return _openframeworks.UCharVector_begin(self)

    def end(self):
        return _openframeworks.UCharVector_end(self)

    def rbegin(self):
        return _openframeworks.UCharVector_rbegin(self)

    def rend(self):
        return _openframeworks.UCharVector_rend(self)

    def clear(self):
        return _openframeworks.UCharVector_clear(self)

    def get_allocator(self):
        return _openframeworks.UCharVector_get_allocator(self)

    def pop_back(self):
        return _openframeworks.UCharVector_pop_back(self)

    def erase(self, *args):
        return _openframeworks.UCharVector_erase(self, *args)

    def __init__(self, *args):
        this = _openframeworks.new_UCharVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _openframeworks.UCharVector_push_back(self, x)

    def front(self):
        return _openframeworks.UCharVector_front(self)

    def back(self):
        return _openframeworks.UCharVector_back(self)

    def assign(self, n, x):
        return _openframeworks.UCharVector_assign(self, n, x)

    def resize(self, *args):
        return _openframeworks.UCharVector_resize(self, *args)

    def insert(self, *args):
        return _openframeworks.UCharVector_insert(self, *args)

    def reserve(self, n):
        return _openframeworks.UCharVector_reserve(self, n)

    def capacity(self):
        return _openframeworks.UCharVector_capacity(self)
    __swig_destroy__ = _openframeworks.delete_UCharVector
    __del__ = lambda self: None
UCharVector_swigregister = _openframeworks.UCharVector_swigregister
UCharVector_swigregister(UCharVector)

class VideoDeviceVector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _openframeworks.VideoDeviceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openframeworks.VideoDeviceVector___nonzero__(self)

    def __bool__(self):
        return _openframeworks.VideoDeviceVector___bool__(self)

    def __len__(self):
        return _openframeworks.VideoDeviceVector___len__(self)

    def __getslice__(self, i, j):
        return _openframeworks.VideoDeviceVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openframeworks.VideoDeviceVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openframeworks.VideoDeviceVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openframeworks.VideoDeviceVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openframeworks.VideoDeviceVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openframeworks.VideoDeviceVector___setitem__(self, *args)

    def pop(self):
        return _openframeworks.VideoDeviceVector_pop(self)

    def append(self, x):
        return _openframeworks.VideoDeviceVector_append(self, x)

    def empty(self):
        return _openframeworks.VideoDeviceVector_empty(self)

    def size(self):
        return _openframeworks.VideoDeviceVector_size(self)

    def swap(self, v):
        return _openframeworks.VideoDeviceVector_swap(self, v)

    def begin(self):
        return _openframeworks.VideoDeviceVector_begin(self)

    def end(self):
        return _openframeworks.VideoDeviceVector_end(self)

    def rbegin(self):
        return _openframeworks.VideoDeviceVector_rbegin(self)

    def rend(self):
        return _openframeworks.VideoDeviceVector_rend(self)

    def clear(self):
        return _openframeworks.VideoDeviceVector_clear(self)

    def get_allocator(self):
        return _openframeworks.VideoDeviceVector_get_allocator(self)

    def pop_back(self):
        return _openframeworks.VideoDeviceVector_pop_back(self)

    def erase(self, *args):
        return _openframeworks.VideoDeviceVector_erase(self, *args)

    def __init__(self, *args):
        this = _openframeworks.new_VideoDeviceVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _openframeworks.VideoDeviceVector_push_back(self, x)

    def front(self):
        return _openframeworks.VideoDeviceVector_front(self)

    def back(self):
        return _openframeworks.VideoDeviceVector_back(self)

    def assign(self, n, x):
        return _openframeworks.VideoDeviceVector_assign(self, n, x)

    def resize(self, *args):
        return _openframeworks.VideoDeviceVector_resize(self, *args)

    def insert(self, *args):
        return _openframeworks.VideoDeviceVector_insert(self, *args)

    def reserve(self, n):
        return _openframeworks.VideoDeviceVector_reserve(self, n)

    def capacity(self):
        return _openframeworks.VideoDeviceVector_capacity(self)
    __swig_destroy__ = _openframeworks.delete_VideoDeviceVector
    __del__ = lambda self: None
VideoDeviceVector_swigregister = _openframeworks.VideoDeviceVector_swigregister
VideoDeviceVector_swigregister(VideoDeviceVector)

class TextureVector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _openframeworks.TextureVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openframeworks.TextureVector___nonzero__(self)

    def __bool__(self):
        return _openframeworks.TextureVector___bool__(self)

    def __len__(self):
        return _openframeworks.TextureVector___len__(self)

    def __getslice__(self, i, j):
        return _openframeworks.TextureVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openframeworks.TextureVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openframeworks.TextureVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openframeworks.TextureVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openframeworks.TextureVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openframeworks.TextureVector___setitem__(self, *args)

    def pop(self):
        return _openframeworks.TextureVector_pop(self)

    def append(self, x):
        return _openframeworks.TextureVector_append(self, x)

    def empty(self):
        return _openframeworks.TextureVector_empty(self)

    def size(self):
        return _openframeworks.TextureVector_size(self)

    def swap(self, v):
        return _openframeworks.TextureVector_swap(self, v)

    def begin(self):
        return _openframeworks.TextureVector_begin(self)

    def end(self):
        return _openframeworks.TextureVector_end(self)

    def rbegin(self):
        return _openframeworks.TextureVector_rbegin(self)

    def rend(self):
        return _openframeworks.TextureVector_rend(self)

    def clear(self):
        return _openframeworks.TextureVector_clear(self)

    def get_allocator(self):
        return _openframeworks.TextureVector_get_allocator(self)

    def pop_back(self):
        return _openframeworks.TextureVector_pop_back(self)

    def erase(self, *args):
        return _openframeworks.TextureVector_erase(self, *args)

    def __init__(self, *args):
        this = _openframeworks.new_TextureVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _openframeworks.TextureVector_push_back(self, x)

    def front(self):
        return _openframeworks.TextureVector_front(self)

    def back(self):
        return _openframeworks.TextureVector_back(self)

    def assign(self, n, x):
        return _openframeworks.TextureVector_assign(self, n, x)

    def resize(self, *args):
        return _openframeworks.TextureVector_resize(self, *args)

    def insert(self, *args):
        return _openframeworks.TextureVector_insert(self, *args)

    def reserve(self, n):
        return _openframeworks.TextureVector_reserve(self, n)

    def capacity(self):
        return _openframeworks.TextureVector_capacity(self)
    __swig_destroy__ = _openframeworks.delete_TextureVector
    __del__ = lambda self: None
TextureVector_swigregister = _openframeworks.TextureVector_swigregister
TextureVector_swigregister(TextureVector)

OF_VERSION_MAJOR = _openframeworks.OF_VERSION_MAJOR
OF_VERSION_MINOR = _openframeworks.OF_VERSION_MINOR
OF_VERSION_PATCH = _openframeworks.OF_VERSION_PATCH
OF_VERSION_PRE_RELEASE = _openframeworks.OF_VERSION_PRE_RELEASE
OF_USE_LEGACY_VECTOR_MATH = _openframeworks.OF_USE_LEGACY_VECTOR_MATH
OF_USING_STD_FS = _openframeworks.OF_USING_STD_FS
OF_TARGET_OSX = _openframeworks.OF_TARGET_OSX
OF_TARGET_MINGW = _openframeworks.OF_TARGET_MINGW
OF_TARGET_WINVS = _openframeworks.OF_TARGET_WINVS
OF_TARGET_IOS = _openframeworks.OF_TARGET_IOS
OF_TARGET_ANDROID = _openframeworks.OF_TARGET_ANDROID
OF_TARGET_LINUX = _openframeworks.OF_TARGET_LINUX
OF_TARGET_LINUX64 = _openframeworks.OF_TARGET_LINUX64
OF_TARGET_LINUXARMV6L = _openframeworks.OF_TARGET_LINUXARMV6L
OF_TARGET_LINUXARMV7L = _openframeworks.OF_TARGET_LINUXARMV7L
OF_TARGET_EMSCRIPTEN = _openframeworks.OF_TARGET_EMSCRIPTEN
B14400 = _openframeworks.B14400
B28800 = _openframeworks.B28800
HAS_TLS = _openframeworks.HAS_TLS
PI = _openframeworks.PI
TWO_PI = _openframeworks.TWO_PI
M_TWO_PI = _openframeworks.M_TWO_PI
FOUR_PI = _openframeworks.FOUR_PI
HALF_PI = _openframeworks.HALF_PI
DEG_TO_RAD = _openframeworks.DEG_TO_RAD
RAD_TO_DEG = _openframeworks.RAD_TO_DEG

def ofResetElapsedTimeCounter():
    return _openframeworks.ofResetElapsedTimeCounter()
ofResetElapsedTimeCounter = _openframeworks.ofResetElapsedTimeCounter

def ofGetElapsedTimef():
    return _openframeworks.ofGetElapsedTimef()
ofGetElapsedTimef = _openframeworks.ofGetElapsedTimef

def ofGetElapsedTimeMillis():
    return _openframeworks.ofGetElapsedTimeMillis()
ofGetElapsedTimeMillis = _openframeworks.ofGetElapsedTimeMillis

def ofGetElapsedTimeMicros():
    return _openframeworks.ofGetElapsedTimeMicros()
ofGetElapsedTimeMicros = _openframeworks.ofGetElapsedTimeMicros

def ofGetFrameNum():
    return _openframeworks.ofGetFrameNum()
ofGetFrameNum = _openframeworks.ofGetFrameNum

def ofGetSeconds():
    return _openframeworks.ofGetSeconds()
ofGetSeconds = _openframeworks.ofGetSeconds

def ofGetMinutes():
    return _openframeworks.ofGetMinutes()
ofGetMinutes = _openframeworks.ofGetMinutes

def ofGetHours():
    return _openframeworks.ofGetHours()
ofGetHours = _openframeworks.ofGetHours

def ofGetUnixTime():
    return _openframeworks.ofGetUnixTime()
ofGetUnixTime = _openframeworks.ofGetUnixTime

def ofGetSystemTimeMillis():
    return _openframeworks.ofGetSystemTimeMillis()
ofGetSystemTimeMillis = _openframeworks.ofGetSystemTimeMillis

def ofGetSystemTimeMicros():
    return _openframeworks.ofGetSystemTimeMicros()
ofGetSystemTimeMicros = _openframeworks.ofGetSystemTimeMicros
class ofTime(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    seconds = _swig_property(_openframeworks.ofTime_seconds_get, _openframeworks.ofTime_seconds_set)
    nanoseconds = _swig_property(_openframeworks.ofTime_nanoseconds_get, _openframeworks.ofTime_nanoseconds_set)
    System = _openframeworks.ofTime_System
    FixedRate = _openframeworks.ofTime_FixedRate
    mode = _swig_property(_openframeworks.ofTime_mode_get, _openframeworks.ofTime_mode_set)

    def getAsMilliseconds(self):
        return _openframeworks.ofTime_getAsMilliseconds(self)

    def getAsMicroseconds(self):
        return _openframeworks.ofTime_getAsMicroseconds(self)

    def getAsNanoseconds(self):
        return _openframeworks.ofTime_getAsNanoseconds(self)

    def getAsSeconds(self):
        return _openframeworks.ofTime_getAsSeconds(self)

    def getAsTimespec(self):
        return _openframeworks.ofTime_getAsTimespec(self)

    def getAsTimePoint(self):
        return _openframeworks.ofTime_getAsTimePoint(self)

    def __sub__(self, arg2):
        return _openframeworks.ofTime___sub__(self, arg2)

    def __lt__(self, arg2):
        return _openframeworks.ofTime___lt__(self, arg2)

    def __gt__(self, arg2):
        return _openframeworks.ofTime___gt__(self, arg2)

    def __le__(self, arg2):
        return _openframeworks.ofTime___le__(self, arg2)

    def __ge__(self, arg2):
        return _openframeworks.ofTime___ge__(self, arg2)

    def __init__(self):
        this = _openframeworks.new_ofTime()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _openframeworks.delete_ofTime
    __del__ = lambda self: None
ofTime_swigregister = _openframeworks.ofTime_swigregister
ofTime_swigregister(ofTime)


def ofGetCurrentTime():
    return _openframeworks.ofGetCurrentTime()
ofGetCurrentTime = _openframeworks.ofGetCurrentTime

def ofSleepMillis(millis):
    return _openframeworks.ofSleepMillis(millis)
ofSleepMillis = _openframeworks.ofSleepMillis

def ofGetTimestampString(*args):
    return _openframeworks.ofGetTimestampString(*args)
ofGetTimestampString = _openframeworks.ofGetTimestampString

def ofGetYear():
    return _openframeworks.ofGetYear()
ofGetYear = _openframeworks.ofGetYear

def ofGetMonth():
    return _openframeworks.ofGetMonth()
ofGetMonth = _openframeworks.ofGetMonth

def ofGetDay():
    return _openframeworks.ofGetDay()
ofGetDay = _openframeworks.ofGetDay

def ofGetWeekday():
    return _openframeworks.ofGetWeekday()
ofGetWeekday = _openframeworks.ofGetWeekday

def ofEnableDataPath():
    return _openframeworks.ofEnableDataPath()
ofEnableDataPath = _openframeworks.ofEnableDataPath

def ofDisableDataPath():
    return _openframeworks.ofDisableDataPath()
ofDisableDataPath = _openframeworks.ofDisableDataPath

def ofToDataPath(path, absolute=False):
    return _openframeworks.ofToDataPath(path, absolute)
ofToDataPath = _openframeworks.ofToDataPath

def ofRestoreWorkingDirectoryToDefault():
    return _openframeworks.ofRestoreWorkingDirectoryToDefault()
ofRestoreWorkingDirectoryToDefault = _openframeworks.ofRestoreWorkingDirectoryToDefault

def ofSetDataPathRoot(root):
    return _openframeworks.ofSetDataPathRoot(root)
ofSetDataPathRoot = _openframeworks.ofSetDataPathRoot

def ofSplitString(source, delimiter, ignoreEmpty=False, trim=False):
    return _openframeworks.ofSplitString(source, delimiter, ignoreEmpty, trim)
ofSplitString = _openframeworks.ofSplitString

def ofJoinString(stringElements, delimiter):
    return _openframeworks.ofJoinString(stringElements, delimiter)
ofJoinString = _openframeworks.ofJoinString

def ofStringReplace(input, searchStr, replaceStr):
    return _openframeworks.ofStringReplace(input, searchStr, replaceStr)
ofStringReplace = _openframeworks.ofStringReplace

def ofIsStringInString(haystack, needle):
    return _openframeworks.ofIsStringInString(haystack, needle)
ofIsStringInString = _openframeworks.ofIsStringInString

def ofStringTimesInString(haystack, needle):
    return _openframeworks.ofStringTimesInString(haystack, needle)
ofStringTimesInString = _openframeworks.ofStringTimesInString

def ofToLower(*args):
    return _openframeworks.ofToLower(*args)
ofToLower = _openframeworks.ofToLower

def ofToUpper(*args):
    return _openframeworks.ofToUpper(*args)
ofToUpper = _openframeworks.ofToUpper

def ofTrimFront(*args):
    return _openframeworks.ofTrimFront(*args)
ofTrimFront = _openframeworks.ofTrimFront

def ofTrimBack(*args):
    return _openframeworks.ofTrimBack(*args)
ofTrimBack = _openframeworks.ofTrimBack

def ofTrim(*args):
    return _openframeworks.ofTrim(*args)
ofTrim = _openframeworks.ofTrim

def ofUTF8Append(str, utf8):
    return _openframeworks.ofUTF8Append(str, utf8)
ofUTF8Append = _openframeworks.ofUTF8Append

def ofUTF8Insert(str, pos, utf8):
    return _openframeworks.ofUTF8Insert(str, pos, utf8)
ofUTF8Insert = _openframeworks.ofUTF8Insert

def ofUTF8Erase(str, start, len):
    return _openframeworks.ofUTF8Erase(str, start, len)
ofUTF8Erase = _openframeworks.ofUTF8Erase

def ofUTF8Substring(str, start, len):
    return _openframeworks.ofUTF8Substring(str, start, len)
ofUTF8Substring = _openframeworks.ofUTF8Substring

def ofUTF8ToString(utf8):
    return _openframeworks.ofUTF8ToString(utf8)
ofUTF8ToString = _openframeworks.ofUTF8ToString

def ofUTF8Length(str):
    return _openframeworks.ofUTF8Length(str)
ofUTF8Length = _openframeworks.ofUTF8Length

def ofToInt(intString):
    return _openframeworks.ofToInt(intString)
ofToInt = _openframeworks.ofToInt

def ofToInt64(intString):
    return _openframeworks.ofToInt64(intString)
ofToInt64 = _openframeworks.ofToInt64

def ofToFloat(floatString):
    return _openframeworks.ofToFloat(floatString)
ofToFloat = _openframeworks.ofToFloat

def ofToDouble(doubleString):
    return _openframeworks.ofToDouble(doubleString)
ofToDouble = _openframeworks.ofToDouble

def ofToBool(boolString):
    return _openframeworks.ofToBool(boolString)
ofToBool = _openframeworks.ofToBool

def ofToHex(value):
    return _openframeworks.ofToHex(value)
ofToHex = _openframeworks.ofToHex

def ofHexToInt(intHexString):
    return _openframeworks.ofHexToInt(intHexString)
ofHexToInt = _openframeworks.ofHexToInt

def ofHexToChar(charHexString):
    return _openframeworks.ofHexToChar(charHexString)
ofHexToChar = _openframeworks.ofHexToChar

def ofHexToFloat(floatHexString):
    return _openframeworks.ofHexToFloat(floatHexString)
ofHexToFloat = _openframeworks.ofHexToFloat

def ofHexToString(stringHexString):
    return _openframeworks.ofHexToString(stringHexString)
ofHexToString = _openframeworks.ofHexToString

def ofToChar(charString):
    return _openframeworks.ofToChar(charString)
ofToChar = _openframeworks.ofToChar

def ofToBinary(value):
    return _openframeworks.ofToBinary(value)
ofToBinary = _openframeworks.ofToBinary

def ofBinaryToInt(value):
    return _openframeworks.ofBinaryToInt(value)
ofBinaryToInt = _openframeworks.ofBinaryToInt

def ofBinaryToChar(value):
    return _openframeworks.ofBinaryToChar(value)
ofBinaryToChar = _openframeworks.ofBinaryToChar

def ofBinaryToFloat(value):
    return _openframeworks.ofBinaryToFloat(value)
ofBinaryToFloat = _openframeworks.ofBinaryToFloat

def ofBinaryToString(value):
    return _openframeworks.ofBinaryToString(value)
ofBinaryToString = _openframeworks.ofBinaryToString

def ofGetVersionInfo():
    return _openframeworks.ofGetVersionInfo()
ofGetVersionInfo = _openframeworks.ofGetVersionInfo

def ofGetVersionMajor():
    return _openframeworks.ofGetVersionMajor()
ofGetVersionMajor = _openframeworks.ofGetVersionMajor

def ofGetVersionMinor():
    return _openframeworks.ofGetVersionMinor()
ofGetVersionMinor = _openframeworks.ofGetVersionMinor

def ofGetVersionPatch():
    return _openframeworks.ofGetVersionPatch()
ofGetVersionPatch = _openframeworks.ofGetVersionPatch

def ofGetVersionPreRelease():
    return _openframeworks.ofGetVersionPreRelease()
ofGetVersionPreRelease = _openframeworks.ofGetVersionPreRelease

def ofSaveScreen(filename):
    return _openframeworks.ofSaveScreen(filename)
ofSaveScreen = _openframeworks.ofSaveScreen

def ofSaveFrame(bUseViewport=False):
    return _openframeworks.ofSaveFrame(bUseViewport)
ofSaveFrame = _openframeworks.ofSaveFrame

def ofSaveViewport(filename):
    return _openframeworks.ofSaveViewport(filename)
ofSaveViewport = _openframeworks.ofSaveViewport

def ofLaunchBrowser(url, uriEncodeQuery=False):
    return _openframeworks.ofLaunchBrowser(url, uriEncodeQuery)
ofLaunchBrowser = _openframeworks.ofLaunchBrowser

def ofSystem(command):
    return _openframeworks.ofSystem(command)
ofSystem = _openframeworks.ofSystem

def ofGetTargetPlatform():
    return _openframeworks.ofGetTargetPlatform()
ofGetTargetPlatform = _openframeworks.ofGetTargetPlatform

def ofGetEnv(var):
    return _openframeworks.ofGetEnv(var)
ofGetEnv = _openframeworks.ofGetEnv
OF_FBOMODE_NODEFAULTS = _openframeworks.OF_FBOMODE_NODEFAULTS
OF_FBOMODE_PERSPECTIVE = _openframeworks.OF_FBOMODE_PERSPECTIVE
OF_FBOMODE_MATRIXFLIP = _openframeworks.OF_FBOMODE_MATRIXFLIP
class ofFbo(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openframeworks.new_ofFbo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _openframeworks.delete_ofFbo
    __del__ = lambda self: None

    def allocate(self, *args):
        return _openframeworks.ofFbo_allocate(self, *args)

    def isAllocated(self):
        return _openframeworks.ofFbo_isAllocated(self)

    def clear(self):
        return _openframeworks.ofFbo_clear(self)

    def draw(self, *args):
        return _openframeworks.ofFbo_draw(self, *args)

    def setAnchorPercent(self, xPct, yPct):
        return _openframeworks.ofFbo_setAnchorPercent(self, xPct, yPct)

    def setAnchorPoint(self, x, y):
        return _openframeworks.ofFbo_setAnchorPoint(self, x, y)

    def resetAnchor(self):
        return _openframeworks.ofFbo_resetAnchor(self)

    def setDefaultTextureIndex(self, defaultTexture):
        return _openframeworks.ofFbo_setDefaultTextureIndex(self, defaultTexture)

    def getDefaultTextureIndex(self):
        return _openframeworks.ofFbo_getDefaultTextureIndex(self)

    def getTexture(self, *args):
        return _openframeworks.ofFbo_getTexture(self, *args)

    def getDepthTexture(self, *args):
        return _openframeworks.ofFbo_getDepthTexture(self, *args)

    def begin(self, *args):
        return _openframeworks.ofFbo_begin(self, *args)

    def end(self):
        return _openframeworks.ofFbo_end(self)

    def readToPixels(self, *args):
        return _openframeworks.ofFbo_readToPixels(self, *args)

    def getWidth(self):
        return _openframeworks.ofFbo_getWidth(self)

    def getHeight(self):
        return _openframeworks.ofFbo_getHeight(self)

    def bind(self):
        return _openframeworks.ofFbo_bind(self)

    def unbind(self):
        return _openframeworks.ofFbo_unbind(self)

    def flagDirty(self):
        return _openframeworks.ofFbo_flagDirty(self)

    def updateTexture(self, attachmentPoint):
        return _openframeworks.ofFbo_updateTexture(self, attachmentPoint)

    def checkStatus(self):
        return _openframeworks.ofFbo_checkStatus(self)

    def createAndAttachTexture(self, internalFormat, attachmentPoint):
        return _openframeworks.ofFbo_createAndAttachTexture(self, internalFormat, attachmentPoint)

    def attachTexture(self, texture, internalFormat, attachmentPoint):
        return _openframeworks.ofFbo_attachTexture(self, texture, internalFormat, attachmentPoint)

    def createAndAttachRenderbuffer(self, internalFormat, attachmentPoint):
        return _openframeworks.ofFbo_createAndAttachRenderbuffer(self, internalFormat, attachmentPoint)

    def createAndAttachDepthStencilTexture(self, *args):
        return _openframeworks.ofFbo_createAndAttachDepthStencilTexture(self, *args)

    def getNumTextures(self):
        return _openframeworks.ofFbo_getNumTextures(self)

    def setActiveDrawBuffer(self, i):
        return _openframeworks.ofFbo_setActiveDrawBuffer(self, i)

    def setActiveDrawBuffers(self, i):
        return _openframeworks.ofFbo_setActiveDrawBuffers(self, i)

    def activateAllDrawBuffers(self):
        return _openframeworks.ofFbo_activateAllDrawBuffers(self)

    def getId(self):
        return _openframeworks.ofFbo_getId(self)

    def getIdDrawBuffer(self):
        return _openframeworks.ofFbo_getIdDrawBuffer(self)
    checkGLSupport = staticmethod(_openframeworks.ofFbo_checkGLSupport)
    maxColorAttachments = staticmethod(_openframeworks.ofFbo_maxColorAttachments)
    maxDrawBuffers = staticmethod(_openframeworks.ofFbo_maxDrawBuffers)
    maxSamples = staticmethod(_openframeworks.ofFbo_maxSamples)

    def getDepthBuffer(self):
        return _openframeworks.ofFbo_getDepthBuffer(self)

    def getStencilBuffer(self):
        return _openframeworks.ofFbo_getStencilBuffer(self)
ofFbo_swigregister = _openframeworks.ofFbo_swigregister
ofFbo_swigregister(ofFbo)

def ofFbo_checkGLSupport():
    return _openframeworks.ofFbo_checkGLSupport()
ofFbo_checkGLSupport = _openframeworks.ofFbo_checkGLSupport

def ofFbo_maxColorAttachments():
    return _openframeworks.ofFbo_maxColorAttachments()
ofFbo_maxColorAttachments = _openframeworks.ofFbo_maxColorAttachments

def ofFbo_maxDrawBuffers():
    return _openframeworks.ofFbo_maxDrawBuffers()
ofFbo_maxDrawBuffers = _openframeworks.ofFbo_maxDrawBuffers

def ofFbo_maxSamples():
    return _openframeworks.ofFbo_maxSamples()
ofFbo_maxSamples = _openframeworks.ofFbo_maxSamples


def ofGetUsingArbTex():
    return _openframeworks.ofGetUsingArbTex()
ofGetUsingArbTex = _openframeworks.ofGetUsingArbTex

def ofEnableArbTex():
    return _openframeworks.ofEnableArbTex()
ofEnableArbTex = _openframeworks.ofEnableArbTex

def ofDisableArbTex():
    return _openframeworks.ofDisableArbTex()
ofDisableArbTex = _openframeworks.ofDisableArbTex

def ofGetUsingNormalizedTexCoords():
    return _openframeworks.ofGetUsingNormalizedTexCoords()
ofGetUsingNormalizedTexCoords = _openframeworks.ofGetUsingNormalizedTexCoords

def ofEnableNormalizedTexCoords():
    return _openframeworks.ofEnableNormalizedTexCoords()
ofEnableNormalizedTexCoords = _openframeworks.ofEnableNormalizedTexCoords

def ofDisableNormalizedTexCoords():
    return _openframeworks.ofDisableNormalizedTexCoords()
ofDisableNormalizedTexCoords = _openframeworks.ofDisableNormalizedTexCoords
OF_COMPRESS_NONE = _openframeworks.OF_COMPRESS_NONE
OF_COMPRESS_SRGB = _openframeworks.OF_COMPRESS_SRGB
OF_COMPRESS_ARB = _openframeworks.OF_COMPRESS_ARB
class ofTextureData(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        this = _openframeworks.new_ofTextureData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    textureID = _swig_property(_openframeworks.ofTextureData_textureID_get, _openframeworks.ofTextureData_textureID_set)
    textureTarget = _swig_property(_openframeworks.ofTextureData_textureTarget_get, _openframeworks.ofTextureData_textureTarget_set)
    glInternalFormat = _swig_property(_openframeworks.ofTextureData_glInternalFormat_get, _openframeworks.ofTextureData_glInternalFormat_set)
    tex_t = _swig_property(_openframeworks.ofTextureData_tex_t_get, _openframeworks.ofTextureData_tex_t_set)
    tex_u = _swig_property(_openframeworks.ofTextureData_tex_u_get, _openframeworks.ofTextureData_tex_u_set)
    tex_w = _swig_property(_openframeworks.ofTextureData_tex_w_get, _openframeworks.ofTextureData_tex_w_set)
    tex_h = _swig_property(_openframeworks.ofTextureData_tex_h_get, _openframeworks.ofTextureData_tex_h_set)
    width = _swig_property(_openframeworks.ofTextureData_width_get, _openframeworks.ofTextureData_width_set)
    height = _swig_property(_openframeworks.ofTextureData_height_get, _openframeworks.ofTextureData_height_set)
    bFlipTexture = _swig_property(_openframeworks.ofTextureData_bFlipTexture_get, _openframeworks.ofTextureData_bFlipTexture_set)
    compressionType = _swig_property(_openframeworks.ofTextureData_compressionType_get, _openframeworks.ofTextureData_compressionType_set)
    bAllocated = _swig_property(_openframeworks.ofTextureData_bAllocated_get, _openframeworks.ofTextureData_bAllocated_set)
    minFilter = _swig_property(_openframeworks.ofTextureData_minFilter_get, _openframeworks.ofTextureData_minFilter_set)
    magFilter = _swig_property(_openframeworks.ofTextureData_magFilter_get, _openframeworks.ofTextureData_magFilter_set)
    wrapModeHorizontal = _swig_property(_openframeworks.ofTextureData_wrapModeHorizontal_get, _openframeworks.ofTextureData_wrapModeHorizontal_set)
    wrapModeVertical = _swig_property(_openframeworks.ofTextureData_wrapModeVertical_get, _openframeworks.ofTextureData_wrapModeVertical_set)
    bufferId = _swig_property(_openframeworks.ofTextureData_bufferId_get, _openframeworks.ofTextureData_bufferId_set)
    __swig_destroy__ = _openframeworks.delete_ofTextureData
    __del__ = lambda self: None
ofTextureData_swigregister = _openframeworks.ofTextureData_swigregister
ofTextureData_swigregister(ofTextureData)


def ofEnableTextureEdgeHack():
    return _openframeworks.ofEnableTextureEdgeHack()
ofEnableTextureEdgeHack = _openframeworks.ofEnableTextureEdgeHack

def ofDisableTextureEdgeHack():
    return _openframeworks.ofDisableTextureEdgeHack()
ofDisableTextureEdgeHack = _openframeworks.ofDisableTextureEdgeHack

def ofIsTextureEdgeHackEnabled():
    return _openframeworks.ofIsTextureEdgeHackEnabled()
ofIsTextureEdgeHackEnabled = _openframeworks.ofIsTextureEdgeHackEnabled
class ofTexture(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openframeworks.new_ofTexture(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def allocate(self, *args):
        return _openframeworks.ofTexture_allocate(self, *args)

    def isAllocated(self):
        return _openframeworks.ofTexture_isAllocated(self)
    __swig_destroy__ = _openframeworks.delete_ofTexture
    __del__ = lambda self: None

    def clear(self):
        return _openframeworks.ofTexture_clear(self)

    def setUseExternalTextureID(self, externTexID):
        return _openframeworks.ofTexture_setUseExternalTextureID(self, externTexID)

    def loadData(self, *args):
        return _openframeworks.ofTexture_loadData(self, *args)

    def loadScreenData(self, x, y, w, h):
        return _openframeworks.ofTexture_loadScreenData(self, x, y, w, h)

    def draw(self, *args):
        return _openframeworks.ofTexture_draw(self, *args)

    def drawSubsection(self, *args):
        return _openframeworks.ofTexture_drawSubsection(self, *args)

    def getQuad(self, p1, p2, p3, p4):
        return _openframeworks.ofTexture_getQuad(self, p1, p2, p3, p4)

    def getMeshForSubsection(self, x, y, z, w, h, sx, sy, sw, sh, vflipped, rectMode):
        return _openframeworks.ofTexture_getMeshForSubsection(self, x, y, z, w, h, sx, sy, sw, sh, vflipped, rectMode)

    def bind(self, textureLocation=0):
        return _openframeworks.ofTexture_bind(self, textureLocation)

    def unbind(self, textureLocation=0):
        return _openframeworks.ofTexture_unbind(self, textureLocation)

    def getAlphaMask(self):
        return _openframeworks.ofTexture_getAlphaMask(self)

    def getHeight(self):
        return _openframeworks.ofTexture_getHeight(self)

    def getWidth(self):
        return _openframeworks.ofTexture_getWidth(self)

    def setAnchorPercent(self, xPct, yPct):
        return _openframeworks.ofTexture_setAnchorPercent(self, xPct, yPct)

    def setAnchorPoint(self, x, y):
        return _openframeworks.ofTexture_setAnchorPoint(self, x, y)

    def resetAnchor(self):
        return _openframeworks.ofTexture_resetAnchor(self)

    def getCoordFromPoint(self, xPos, yPos):
        return _openframeworks.ofTexture_getCoordFromPoint(self, xPos, yPos)

    def getCoordFromPercent(self, xPts, yPts):
        return _openframeworks.ofTexture_getCoordFromPercent(self, xPts, yPts)

    def setAlphaMask(self, mask):
        return _openframeworks.ofTexture_setAlphaMask(self, mask)

    def disableAlphaMask(self):
        return _openframeworks.ofTexture_disableAlphaMask(self)

    def setTextureWrap(self, wrapModeHorizontal, wrapModeVertical):
        return _openframeworks.ofTexture_setTextureWrap(self, wrapModeHorizontal, wrapModeVertical)

    def setTextureMinMagFilter(self, minFilter, magFilter):
        return _openframeworks.ofTexture_setTextureMinMagFilter(self, minFilter, magFilter)

    def setTextureMatrix(self, m):
        return _openframeworks.ofTexture_setTextureMatrix(self, m)

    def getTextureMatrix(self):
        return _openframeworks.ofTexture_getTextureMatrix(self)

    def isUsingTextureMatrix(self):
        return _openframeworks.ofTexture_isUsingTextureMatrix(self)

    def disableTextureMatrix(self):
        return _openframeworks.ofTexture_disableTextureMatrix(self)

    def setCompression(self, compression):
        return _openframeworks.ofTexture_setCompression(self, compression)

    def setRGToRGBASwizzles(self, rToRGBSwizzles):
        return _openframeworks.ofTexture_setRGToRGBASwizzles(self, rToRGBSwizzles)

    def setSwizzle(self, srcSwizzle, dstChannel):
        return _openframeworks.ofTexture_setSwizzle(self, srcSwizzle, dstChannel)

    def readToPixels(self, *args):
        return _openframeworks.ofTexture_readToPixels(self, *args)

    def getTextureData(self, *args):
        return _openframeworks.ofTexture_getTextureData(self, *args)

    def enableMipmap(self):
        return _openframeworks.ofTexture_enableMipmap(self)

    def disableMipmap(self):
        return _openframeworks.ofTexture_disableMipmap(self)

    def generateMipmap(self):
        return _openframeworks.ofTexture_generateMipmap(self)

    def hasMipmap(self):
        return _openframeworks.ofTexture_hasMipmap(self)
    texData = _swig_property(_openframeworks.ofTexture_texData_get, _openframeworks.ofTexture_texData_set)
ofTexture_swigregister = _openframeworks.ofTexture_swigregister
ofTexture_swigregister(ofTexture)

OF_IMAGE_QUALITY_BEST = _openframeworks.OF_IMAGE_QUALITY_BEST
OF_IMAGE_QUALITY_HIGH = _openframeworks.OF_IMAGE_QUALITY_HIGH
OF_IMAGE_QUALITY_MEDIUM = _openframeworks.OF_IMAGE_QUALITY_MEDIUM
OF_IMAGE_QUALITY_LOW = _openframeworks.OF_IMAGE_QUALITY_LOW
OF_IMAGE_QUALITY_WORST = _openframeworks.OF_IMAGE_QUALITY_WORST
OF_IMAGE_FORMAT_BMP = _openframeworks.OF_IMAGE_FORMAT_BMP
OF_IMAGE_FORMAT_ICO = _openframeworks.OF_IMAGE_FORMAT_ICO
OF_IMAGE_FORMAT_JPEG = _openframeworks.OF_IMAGE_FORMAT_JPEG
OF_IMAGE_FORMAT_JNG = _openframeworks.OF_IMAGE_FORMAT_JNG
OF_IMAGE_FORMAT_KOALA = _openframeworks.OF_IMAGE_FORMAT_KOALA
OF_IMAGE_FORMAT_LBM = _openframeworks.OF_IMAGE_FORMAT_LBM
OF_IMAGE_FORMAT_IFF = _openframeworks.OF_IMAGE_FORMAT_IFF
OF_IMAGE_FORMAT_MNG = _openframeworks.OF_IMAGE_FORMAT_MNG
OF_IMAGE_FORMAT_PBM = _openframeworks.OF_IMAGE_FORMAT_PBM
OF_IMAGE_FORMAT_PBMRAW = _openframeworks.OF_IMAGE_FORMAT_PBMRAW
OF_IMAGE_FORMAT_PCD = _openframeworks.OF_IMAGE_FORMAT_PCD
OF_IMAGE_FORMAT_PCX = _openframeworks.OF_IMAGE_FORMAT_PCX
OF_IMAGE_FORMAT_PGM = _openframeworks.OF_IMAGE_FORMAT_PGM
OF_IMAGE_FORMAT_PGMRAW = _openframeworks.OF_IMAGE_FORMAT_PGMRAW
OF_IMAGE_FORMAT_PNG = _openframeworks.OF_IMAGE_FORMAT_PNG
OF_IMAGE_FORMAT_PPM = _openframeworks.OF_IMAGE_FORMAT_PPM
OF_IMAGE_FORMAT_PPMRAW = _openframeworks.OF_IMAGE_FORMAT_PPMRAW
OF_IMAGE_FORMAT_RAS = _openframeworks.OF_IMAGE_FORMAT_RAS
OF_IMAGE_FORMAT_TARGA = _openframeworks.OF_IMAGE_FORMAT_TARGA
OF_IMAGE_FORMAT_TIFF = _openframeworks.OF_IMAGE_FORMAT_TIFF
OF_IMAGE_FORMAT_WBMP = _openframeworks.OF_IMAGE_FORMAT_WBMP
OF_IMAGE_FORMAT_PSD = _openframeworks.OF_IMAGE_FORMAT_PSD
OF_IMAGE_FORMAT_CUT = _openframeworks.OF_IMAGE_FORMAT_CUT
OF_IMAGE_FORMAT_XBM = _openframeworks.OF_IMAGE_FORMAT_XBM
OF_IMAGE_FORMAT_XPM = _openframeworks.OF_IMAGE_FORMAT_XPM
OF_IMAGE_FORMAT_DDS = _openframeworks.OF_IMAGE_FORMAT_DDS
OF_IMAGE_FORMAT_GIF = _openframeworks.OF_IMAGE_FORMAT_GIF
OF_IMAGE_FORMAT_HDR = _openframeworks.OF_IMAGE_FORMAT_HDR
OF_IMAGE_FORMAT_FAXG3 = _openframeworks.OF_IMAGE_FORMAT_FAXG3
OF_IMAGE_FORMAT_SGI = _openframeworks.OF_IMAGE_FORMAT_SGI
OF_IMAGE_FORMAT_EXR = _openframeworks.OF_IMAGE_FORMAT_EXR
OF_IMAGE_FORMAT_J2K = _openframeworks.OF_IMAGE_FORMAT_J2K
OF_IMAGE_FORMAT_JP2 = _openframeworks.OF_IMAGE_FORMAT_JP2
OF_IMAGE_FORMAT_PFM = _openframeworks.OF_IMAGE_FORMAT_PFM
OF_IMAGE_FORMAT_PICT = _openframeworks.OF_IMAGE_FORMAT_PICT
OF_IMAGE_FORMAT_RAW = _openframeworks.OF_IMAGE_FORMAT_RAW

def ofImageFormatExtension(format):
    return _openframeworks.ofImageFormatExtension(format)
ofImageFormatExtension = _openframeworks.ofImageFormatExtension
class ofImageLoadSettings(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    accurate = _swig_property(_openframeworks.ofImageLoadSettings_accurate_get, _openframeworks.ofImageLoadSettings_accurate_set)
    exifRotate = _swig_property(_openframeworks.ofImageLoadSettings_exifRotate_get, _openframeworks.ofImageLoadSettings_exifRotate_set)
    grayscale = _swig_property(_openframeworks.ofImageLoadSettings_grayscale_get, _openframeworks.ofImageLoadSettings_grayscale_set)
    separateCMYK = _swig_property(_openframeworks.ofImageLoadSettings_separateCMYK_get, _openframeworks.ofImageLoadSettings_separateCMYK_set)

    def __init__(self):
        this = _openframeworks.new_ofImageLoadSettings()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _openframeworks.delete_ofImageLoadSettings
    __del__ = lambda self: None
ofImageLoadSettings_swigregister = _openframeworks.ofImageLoadSettings_swigregister
ofImageLoadSettings_swigregister(ofImageLoadSettings)

class ofImage(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openframeworks.new_ofImage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def allocate(self, w, h, type):
        return _openframeworks.ofImage_allocate(self, w, h, type)

    def isAllocated(self):
        return _openframeworks.ofImage_isAllocated(self)

    def clear(self):
        return _openframeworks.ofImage_clear(self)

    def load(self, *args):
        return _openframeworks.ofImage_load(self, *args)
    __swig_destroy__ = _openframeworks.delete_ofImage
    __del__ = lambda self: None

    def draw(self, *args):
        return _openframeworks.ofImage_draw(self, *args)

    def drawSubsection(self, *args):
        return _openframeworks.ofImage_drawSubsection(self, *args)

    def update(self):
        return _openframeworks.ofImage_update(self)

    def setUseTexture(self, bUse):
        return _openframeworks.ofImage_setUseTexture(self, bUse)

    def isUsingTexture(self):
        return _openframeworks.ofImage_isUsingTexture(self)

    def getTexture(self, *args):
        return _openframeworks.ofImage_getTexture(self, *args)

    def bind(self, textureLocation=0):
        return _openframeworks.ofImage_bind(self, textureLocation)

    def unbind(self, textureLocation=0):
        return _openframeworks.ofImage_unbind(self, textureLocation)

    def setCompression(self, compression):
        return _openframeworks.ofImage_setCompression(self, compression)

    def getPixels(self, *args):
        return _openframeworks.ofImage_getPixels(self, *args)

    def getColor(self, *args):
        return _openframeworks.ofImage_getColor(self, *args)

    def getHeight(self):
        return _openframeworks.ofImage_getHeight(self)

    def getWidth(self):
        return _openframeworks.ofImage_getWidth(self)

    def setColor(self, *args):
        return _openframeworks.ofImage_setColor(self, *args)

    def setFromPixels(self, *args):
        return _openframeworks.ofImage_setFromPixels(self, *args)

    def grabScreen(self, x, y, w, h):
        return _openframeworks.ofImage_grabScreen(self, x, y, w, h)

    def setImageType(self, type):
        return _openframeworks.ofImage_setImageType(self, type)

    def getImageType(self):
        return _openframeworks.ofImage_getImageType(self)

    def resize(self, newWidth, newHeight):
        return _openframeworks.ofImage_resize(self, newWidth, newHeight)

    def crop(self, x, y, w, h):
        return _openframeworks.ofImage_crop(self, x, y, w, h)

    def cropFrom(self, otherImage, x, y, w, h):
        return _openframeworks.ofImage_cropFrom(self, otherImage, x, y, w, h)

    def rotate90(self, rotation):
        return _openframeworks.ofImage_rotate90(self, rotation)

    def mirror(self, vertical, horizontal):
        return _openframeworks.ofImage_mirror(self, vertical, horizontal)

    def setAnchorPercent(self, xPct, yPct):
        return _openframeworks.ofImage_setAnchorPercent(self, xPct, yPct)

    def setAnchorPoint(self, x, y):
        return _openframeworks.ofImage_setAnchorPoint(self, x, y)

    def resetAnchor(self):
        return _openframeworks.ofImage_resetAnchor(self)

    def save(self, *args):
        return _openframeworks.ofImage_save(self, *args)
ofImage_swigregister = _openframeworks.ofImage_swigregister
ofImage_swigregister(ofImage)

class ofFloatImage(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openframeworks.new_ofFloatImage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def allocate(self, w, h, type):
        return _openframeworks.ofFloatImage_allocate(self, w, h, type)

    def isAllocated(self):
        return _openframeworks.ofFloatImage_isAllocated(self)

    def clear(self):
        return _openframeworks.ofFloatImage_clear(self)

    def load(self, *args):
        return _openframeworks.ofFloatImage_load(self, *args)
    __swig_destroy__ = _openframeworks.delete_ofFloatImage
    __del__ = lambda self: None

    def draw(self, *args):
        return _openframeworks.ofFloatImage_draw(self, *args)

    def drawSubsection(self, *args):
        return _openframeworks.ofFloatImage_drawSubsection(self, *args)

    def update(self):
        return _openframeworks.ofFloatImage_update(self)

    def setUseTexture(self, bUse):
        return _openframeworks.ofFloatImage_setUseTexture(self, bUse)

    def isUsingTexture(self):
        return _openframeworks.ofFloatImage_isUsingTexture(self)

    def getTexture(self, *args):
        return _openframeworks.ofFloatImage_getTexture(self, *args)

    def bind(self, textureLocation=0):
        return _openframeworks.ofFloatImage_bind(self, textureLocation)

    def unbind(self, textureLocation=0):
        return _openframeworks.ofFloatImage_unbind(self, textureLocation)

    def setCompression(self, compression):
        return _openframeworks.ofFloatImage_setCompression(self, compression)

    def getPixels(self, *args):
        return _openframeworks.ofFloatImage_getPixels(self, *args)

    def getColor(self, *args):
        return _openframeworks.ofFloatImage_getColor(self, *args)

    def getHeight(self):
        return _openframeworks.ofFloatImage_getHeight(self)

    def getWidth(self):
        return _openframeworks.ofFloatImage_getWidth(self)

    def setColor(self, *args):
        return _openframeworks.ofFloatImage_setColor(self, *args)

    def setFromPixels(self, *args):
        return _openframeworks.ofFloatImage_setFromPixels(self, *args)

    def grabScreen(self, x, y, w, h):
        return _openframeworks.ofFloatImage_grabScreen(self, x, y, w, h)

    def setImageType(self, type):
        return _openframeworks.ofFloatImage_setImageType(self, type)

    def getImageType(self):
        return _openframeworks.ofFloatImage_getImageType(self)

    def resize(self, newWidth, newHeight):
        return _openframeworks.ofFloatImage_resize(self, newWidth, newHeight)

    def crop(self, x, y, w, h):
        return _openframeworks.ofFloatImage_crop(self, x, y, w, h)

    def cropFrom(self, otherImage, x, y, w, h):
        return _openframeworks.ofFloatImage_cropFrom(self, otherImage, x, y, w, h)

    def rotate90(self, rotation):
        return _openframeworks.ofFloatImage_rotate90(self, rotation)

    def mirror(self, vertical, horizontal):
        return _openframeworks.ofFloatImage_mirror(self, vertical, horizontal)

    def setAnchorPercent(self, xPct, yPct):
        return _openframeworks.ofFloatImage_setAnchorPercent(self, xPct, yPct)

    def setAnchorPoint(self, x, y):
        return _openframeworks.ofFloatImage_setAnchorPoint(self, x, y)

    def resetAnchor(self):
        return _openframeworks.ofFloatImage_resetAnchor(self)

    def save(self, *args):
        return _openframeworks.ofFloatImage_save(self, *args)
ofFloatImage_swigregister = _openframeworks.ofFloatImage_swigregister
ofFloatImage_swigregister(ofFloatImage)

class ofShortImage(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openframeworks.new_ofShortImage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def allocate(self, w, h, type):
        return _openframeworks.ofShortImage_allocate(self, w, h, type)

    def isAllocated(self):
        return _openframeworks.ofShortImage_isAllocated(self)

    def clear(self):
        return _openframeworks.ofShortImage_clear(self)

    def load(self, *args):
        return _openframeworks.ofShortImage_load(self, *args)
    __swig_destroy__ = _openframeworks.delete_ofShortImage
    __del__ = lambda self: None

    def draw(self, *args):
        return _openframeworks.ofShortImage_draw(self, *args)

    def drawSubsection(self, *args):
        return _openframeworks.ofShortImage_drawSubsection(self, *args)

    def update(self):
        return _openframeworks.ofShortImage_update(self)

    def setUseTexture(self, bUse):
        return _openframeworks.ofShortImage_setUseTexture(self, bUse)

    def isUsingTexture(self):
        return _openframeworks.ofShortImage_isUsingTexture(self)

    def getTexture(self, *args):
        return _openframeworks.ofShortImage_getTexture(self, *args)

    def bind(self, textureLocation=0):
        return _openframeworks.ofShortImage_bind(self, textureLocation)

    def unbind(self, textureLocation=0):
        return _openframeworks.ofShortImage_unbind(self, textureLocation)

    def setCompression(self, compression):
        return _openframeworks.ofShortImage_setCompression(self, compression)

    def getPixels(self, *args):
        return _openframeworks.ofShortImage_getPixels(self, *args)

    def getColor(self, *args):
        return _openframeworks.ofShortImage_getColor(self, *args)

    def getHeight(self):
        return _openframeworks.ofShortImage_getHeight(self)

    def getWidth(self):
        return _openframeworks.ofShortImage_getWidth(self)

    def setColor(self, *args):
        return _openframeworks.ofShortImage_setColor(self, *args)

    def setFromPixels(self, *args):
        return _openframeworks.ofShortImage_setFromPixels(self, *args)

    def grabScreen(self, x, y, w, h):
        return _openframeworks.ofShortImage_grabScreen(self, x, y, w, h)

    def setImageType(self, type):
        return _openframeworks.ofShortImage_setImageType(self, type)

    def getImageType(self):
        return _openframeworks.ofShortImage_getImageType(self)

    def resize(self, newWidth, newHeight):
        return _openframeworks.ofShortImage_resize(self, newWidth, newHeight)

    def crop(self, x, y, w, h):
        return _openframeworks.ofShortImage_crop(self, x, y, w, h)

    def cropFrom(self, otherImage, x, y, w, h):
        return _openframeworks.ofShortImage_cropFrom(self, otherImage, x, y, w, h)

    def rotate90(self, rotation):
        return _openframeworks.ofShortImage_rotate90(self, rotation)

    def mirror(self, vertical, horizontal):
        return _openframeworks.ofShortImage_mirror(self, vertical, horizontal)

    def setAnchorPercent(self, xPct, yPct):
        return _openframeworks.ofShortImage_setAnchorPercent(self, xPct, yPct)

    def setAnchorPoint(self, x, y):
        return _openframeworks.ofShortImage_setAnchorPoint(self, x, y)

    def resetAnchor(self):
        return _openframeworks.ofShortImage_resetAnchor(self)

    def save(self, *args):
        return _openframeworks.ofShortImage_save(self, *args)
ofShortImage_swigregister = _openframeworks.ofShortImage_swigregister
ofShortImage_swigregister(ofShortImage)

class ofStyle(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        this = _openframeworks.new_ofStyle()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _openframeworks.delete_ofStyle
    __del__ = lambda self: None
    color = _swig_property(_openframeworks.ofStyle_color_get, _openframeworks.ofStyle_color_set)
    bgColor = _swig_property(_openframeworks.ofStyle_bgColor_get, _openframeworks.ofStyle_bgColor_set)
    polyMode = _swig_property(_openframeworks.ofStyle_polyMode_get, _openframeworks.ofStyle_polyMode_set)
    rectMode = _swig_property(_openframeworks.ofStyle_rectMode_get, _openframeworks.ofStyle_rectMode_set)
    bFill = _swig_property(_openframeworks.ofStyle_bFill_get, _openframeworks.ofStyle_bFill_set)
    drawBitmapMode = _swig_property(_openframeworks.ofStyle_drawBitmapMode_get, _openframeworks.ofStyle_drawBitmapMode_set)
    blendingMode = _swig_property(_openframeworks.ofStyle_blendingMode_get, _openframeworks.ofStyle_blendingMode_set)
    smoothing = _swig_property(_openframeworks.ofStyle_smoothing_get, _openframeworks.ofStyle_smoothing_set)
    circleResolution = _swig_property(_openframeworks.ofStyle_circleResolution_get, _openframeworks.ofStyle_circleResolution_set)
    sphereResolution = _swig_property(_openframeworks.ofStyle_sphereResolution_get, _openframeworks.ofStyle_sphereResolution_set)
    curveResolution = _swig_property(_openframeworks.ofStyle_curveResolution_get, _openframeworks.ofStyle_curveResolution_set)
    lineWidth = _swig_property(_openframeworks.ofStyle_lineWidth_get, _openframeworks.ofStyle_lineWidth_set)
ofStyle_swigregister = _openframeworks.ofStyle_swigregister
ofStyle_swigregister(ofStyle)

class ofSoundDevice(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    UNSPECIFIED = _openframeworks.ofSoundDevice_UNSPECIFIED
    DEFAULT = _openframeworks.ofSoundDevice_DEFAULT
    ALSA = _openframeworks.ofSoundDevice_ALSA
    PULSE = _openframeworks.ofSoundDevice_PULSE
    OSS = _openframeworks.ofSoundDevice_OSS
    JACK = _openframeworks.ofSoundDevice_JACK
    OSX_CORE = _openframeworks.ofSoundDevice_OSX_CORE
    MS_WASAPI = _openframeworks.ofSoundDevice_MS_WASAPI
    MS_ASIO = _openframeworks.ofSoundDevice_MS_ASIO
    MS_DS = _openframeworks.ofSoundDevice_MS_DS
    NUM_APIS = _openframeworks.ofSoundDevice_NUM_APIS
    api = _swig_property(_openframeworks.ofSoundDevice_api_get, _openframeworks.ofSoundDevice_api_set)
    name = _swig_property(_openframeworks.ofSoundDevice_name_get, _openframeworks.ofSoundDevice_name_set)
    deviceID = _swig_property(_openframeworks.ofSoundDevice_deviceID_get, _openframeworks.ofSoundDevice_deviceID_set)
    inputChannels = _swig_property(_openframeworks.ofSoundDevice_inputChannels_get, _openframeworks.ofSoundDevice_inputChannels_set)
    outputChannels = _swig_property(_openframeworks.ofSoundDevice_outputChannels_get, _openframeworks.ofSoundDevice_outputChannels_set)
    isDefaultInput = _swig_property(_openframeworks.ofSoundDevice_isDefaultInput_get, _openframeworks.ofSoundDevice_isDefaultInput_set)
    isDefaultOutput = _swig_property(_openframeworks.ofSoundDevice_isDefaultOutput_get, _openframeworks.ofSoundDevice_isDefaultOutput_set)
    sampleRates = _swig_property(_openframeworks.ofSoundDevice_sampleRates_get, _openframeworks.ofSoundDevice_sampleRates_set)

    def __init__(self):
        this = _openframeworks.new_ofSoundDevice()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _openframeworks.delete_ofSoundDevice
    __del__ = lambda self: None
ofSoundDevice_swigregister = _openframeworks.ofSoundDevice_swigregister
ofSoundDevice_swigregister(ofSoundDevice)

class ofSoundStreamSettings(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_ofSoundStreamSettings
    __del__ = lambda self: None
    sampleRate = _swig_property(_openframeworks.ofSoundStreamSettings_sampleRate_get, _openframeworks.ofSoundStreamSettings_sampleRate_set)
    bufferSize = _swig_property(_openframeworks.ofSoundStreamSettings_bufferSize_get, _openframeworks.ofSoundStreamSettings_bufferSize_set)
    numBuffers = _swig_property(_openframeworks.ofSoundStreamSettings_numBuffers_get, _openframeworks.ofSoundStreamSettings_numBuffers_set)
    numInputChannels = _swig_property(_openframeworks.ofSoundStreamSettings_numInputChannels_get, _openframeworks.ofSoundStreamSettings_numInputChannels_set)
    numOutputChannels = _swig_property(_openframeworks.ofSoundStreamSettings_numOutputChannels_get, _openframeworks.ofSoundStreamSettings_numOutputChannels_set)

    def setInDevice(self, device):
        return _openframeworks.ofSoundStreamSettings_setInDevice(self, device)

    def setOutDevice(self, device):
        return _openframeworks.ofSoundStreamSettings_setOutDevice(self, device)

    def setApi(self, api):
        return _openframeworks.ofSoundStreamSettings_setApi(self, api)

    def getInDevice(self):
        return _openframeworks.ofSoundStreamSettings_getInDevice(self)

    def getOutDevice(self):
        return _openframeworks.ofSoundStreamSettings_getOutDevice(self)

    def getApi(self):
        return _openframeworks.ofSoundStreamSettings_getApi(self)
    inCallback = _swig_property(_openframeworks.ofSoundStreamSettings_inCallback_get, _openframeworks.ofSoundStreamSettings_inCallback_set)
    outCallback = _swig_property(_openframeworks.ofSoundStreamSettings_outCallback_get, _openframeworks.ofSoundStreamSettings_outCallback_set)

    def __init__(self):
        this = _openframeworks.new_ofSoundStreamSettings()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
ofSoundStreamSettings_swigregister = _openframeworks.ofSoundStreamSettings_swigregister
ofSoundStreamSettings_swigregister(ofSoundStreamSettings)

class ofBaseSoundStream(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_ofBaseSoundStream
    __del__ = lambda self: None

    def setup(self, settings):
        return _openframeworks.ofBaseSoundStream_setup(self, settings)

    def setInput(self, soundInput):
        return _openframeworks.ofBaseSoundStream_setInput(self, soundInput)

    def setOutput(self, soundOutput):
        return _openframeworks.ofBaseSoundStream_setOutput(self, soundOutput)

    def getDeviceList(self, api):
        return _openframeworks.ofBaseSoundStream_getDeviceList(self, api)

    def printDeviceList(self):
        return _openframeworks.ofBaseSoundStream_printDeviceList(self)

    def start(self):
        return _openframeworks.ofBaseSoundStream_start(self)

    def stop(self):
        return _openframeworks.ofBaseSoundStream_stop(self)

    def close(self):
        return _openframeworks.ofBaseSoundStream_close(self)

    def getTickCount(self):
        return _openframeworks.ofBaseSoundStream_getTickCount(self)

    def getNumInputChannels(self):
        return _openframeworks.ofBaseSoundStream_getNumInputChannels(self)

    def getNumOutputChannels(self):
        return _openframeworks.ofBaseSoundStream_getNumOutputChannels(self)

    def getSampleRate(self):
        return _openframeworks.ofBaseSoundStream_getSampleRate(self)

    def getBufferSize(self):
        return _openframeworks.ofBaseSoundStream_getBufferSize(self)

    def getInDevice(self):
        return _openframeworks.ofBaseSoundStream_getInDevice(self)

    def getOutDevice(self):
        return _openframeworks.ofBaseSoundStream_getOutDevice(self)
ofBaseSoundStream_swigregister = _openframeworks.ofBaseSoundStream_swigregister
ofBaseSoundStream_swigregister(ofBaseSoundStream)


def toString(api):
    return _openframeworks.toString(api)
toString = _openframeworks.toString
class ofBaseSoundPlayer(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_ofBaseSoundPlayer
    __del__ = lambda self: None

    def load(self, fileName, stream=False):
        return _openframeworks.ofBaseSoundPlayer_load(self, fileName, stream)

    def unload(self):
        return _openframeworks.ofBaseSoundPlayer_unload(self)

    def play(self):
        return _openframeworks.ofBaseSoundPlayer_play(self)

    def stop(self):
        return _openframeworks.ofBaseSoundPlayer_stop(self)

    def setVolume(self, vol):
        return _openframeworks.ofBaseSoundPlayer_setVolume(self, vol)

    def setPan(self, vol):
        return _openframeworks.ofBaseSoundPlayer_setPan(self, vol)

    def setSpeed(self, spd):
        return _openframeworks.ofBaseSoundPlayer_setSpeed(self, spd)

    def setPaused(self, bP):
        return _openframeworks.ofBaseSoundPlayer_setPaused(self, bP)

    def setLoop(self, bLp):
        return _openframeworks.ofBaseSoundPlayer_setLoop(self, bLp)

    def setMultiPlay(self, bMp):
        return _openframeworks.ofBaseSoundPlayer_setMultiPlay(self, bMp)

    def setPosition(self, pct):
        return _openframeworks.ofBaseSoundPlayer_setPosition(self, pct)

    def setPositionMS(self, ms):
        return _openframeworks.ofBaseSoundPlayer_setPositionMS(self, ms)

    def getPosition(self):
        return _openframeworks.ofBaseSoundPlayer_getPosition(self)

    def getPositionMS(self):
        return _openframeworks.ofBaseSoundPlayer_getPositionMS(self)

    def isPlaying(self):
        return _openframeworks.ofBaseSoundPlayer_isPlaying(self)

    def getSpeed(self):
        return _openframeworks.ofBaseSoundPlayer_getSpeed(self)

    def getPan(self):
        return _openframeworks.ofBaseSoundPlayer_getPan(self)

    def isLoaded(self):
        return _openframeworks.ofBaseSoundPlayer_isLoaded(self)

    def getVolume(self):
        return _openframeworks.ofBaseSoundPlayer_getVolume(self)
ofBaseSoundPlayer_swigregister = _openframeworks.ofBaseSoundPlayer_swigregister
ofBaseSoundPlayer_swigregister(ofBaseSoundPlayer)

OF_LOOP_NONE = _openframeworks.OF_LOOP_NONE
OF_LOOP_PALINDROME = _openframeworks.OF_LOOP_PALINDROME
OF_LOOP_NORMAL = _openframeworks.OF_LOOP_NORMAL
class ofVideoFormat(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    pixelFormat = _swig_property(_openframeworks.ofVideoFormat_pixelFormat_get, _openframeworks.ofVideoFormat_pixelFormat_set)
    width = _swig_property(_openframeworks.ofVideoFormat_width_get, _openframeworks.ofVideoFormat_width_set)
    height = _swig_property(_openframeworks.ofVideoFormat_height_get, _openframeworks.ofVideoFormat_height_set)
    framerates = _swig_property(_openframeworks.ofVideoFormat_framerates_get, _openframeworks.ofVideoFormat_framerates_set)
    __swig_destroy__ = _openframeworks.delete_ofVideoFormat
    __del__ = lambda self: None
ofVideoFormat_swigregister = _openframeworks.ofVideoFormat_swigregister
ofVideoFormat_swigregister(ofVideoFormat)

class ofVideoDevice(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    id = _swig_property(_openframeworks.ofVideoDevice_id_get, _openframeworks.ofVideoDevice_id_set)
    deviceName = _swig_property(_openframeworks.ofVideoDevice_deviceName_get, _openframeworks.ofVideoDevice_deviceName_set)
    hardwareName = _swig_property(_openframeworks.ofVideoDevice_hardwareName_get, _openframeworks.ofVideoDevice_hardwareName_set)
    serialID = _swig_property(_openframeworks.ofVideoDevice_serialID_get, _openframeworks.ofVideoDevice_serialID_set)
    formats = _swig_property(_openframeworks.ofVideoDevice_formats_get, _openframeworks.ofVideoDevice_formats_set)
    bAvailable = _swig_property(_openframeworks.ofVideoDevice_bAvailable_get, _openframeworks.ofVideoDevice_bAvailable_set)
    __swig_destroy__ = _openframeworks.delete_ofVideoDevice
    __del__ = lambda self: None
ofVideoDevice_swigregister = _openframeworks.ofVideoDevice_swigregister
ofVideoDevice_swigregister(ofVideoDevice)

class ofNode(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_ofNode
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _openframeworks.new_ofNode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setParent(self, parent, bMaintainGlobalTransform=False):
        return _openframeworks.ofNode_setParent(self, parent, bMaintainGlobalTransform)

    def clearParent(self, bMaintainGlobalTransform=False):
        return _openframeworks.ofNode_clearParent(self, bMaintainGlobalTransform)

    def getParent(self):
        return _openframeworks.ofNode_getParent(self)

    def getPosition(self):
        return _openframeworks.ofNode_getPosition(self)

    def getX(self):
        return _openframeworks.ofNode_getX(self)

    def getY(self):
        return _openframeworks.ofNode_getY(self)

    def getZ(self):
        return _openframeworks.ofNode_getZ(self)

    def getXAxis(self):
        return _openframeworks.ofNode_getXAxis(self)

    def getYAxis(self):
        return _openframeworks.ofNode_getYAxis(self)

    def getZAxis(self):
        return _openframeworks.ofNode_getZAxis(self)

    def getSideDir(self):
        return _openframeworks.ofNode_getSideDir(self)

    def getLookAtDir(self):
        return _openframeworks.ofNode_getLookAtDir(self)

    def getUpDir(self):
        return _openframeworks.ofNode_getUpDir(self)

    def getPitchDeg(self):
        return _openframeworks.ofNode_getPitchDeg(self)

    def getHeadingDeg(self):
        return _openframeworks.ofNode_getHeadingDeg(self)

    def getRollDeg(self):
        return _openframeworks.ofNode_getRollDeg(self)

    def getPitchRad(self):
        return _openframeworks.ofNode_getPitchRad(self)

    def getHeadingRad(self):
        return _openframeworks.ofNode_getHeadingRad(self)

    def getRollRad(self):
        return _openframeworks.ofNode_getRollRad(self)

    def getOrientationQuat(self):
        return _openframeworks.ofNode_getOrientationQuat(self)

    def getOrientationEulerDeg(self):
        return _openframeworks.ofNode_getOrientationEulerDeg(self)

    def getOrientationEulerRad(self):
        return _openframeworks.ofNode_getOrientationEulerRad(self)

    def getScale(self):
        return _openframeworks.ofNode_getScale(self)

    def getLocalTransformMatrix(self):
        return _openframeworks.ofNode_getLocalTransformMatrix(self)

    def getGlobalTransformMatrix(self):
        return _openframeworks.ofNode_getGlobalTransformMatrix(self)

    def getGlobalPosition(self):
        return _openframeworks.ofNode_getGlobalPosition(self)

    def getGlobalOrientation(self):
        return _openframeworks.ofNode_getGlobalOrientation(self)

    def getGlobalScale(self):
        return _openframeworks.ofNode_getGlobalScale(self)

    def setPosition(self, *args):
        return _openframeworks.ofNode_setPosition(self, *args)

    def setGlobalPosition(self, *args):
        return _openframeworks.ofNode_setGlobalPosition(self, *args)

    def setOrientation(self, *args):
        return _openframeworks.ofNode_setOrientation(self, *args)

    def setGlobalOrientation(self, q):
        return _openframeworks.ofNode_setGlobalOrientation(self, q)

    def setScale(self, *args):
        return _openframeworks.ofNode_setScale(self, *args)

    def move(self, *args):
        return _openframeworks.ofNode_move(self, *args)

    def truck(self, amount):
        return _openframeworks.ofNode_truck(self, amount)

    def boom(self, amount):
        return _openframeworks.ofNode_boom(self, amount)

    def dolly(self, amount):
        return _openframeworks.ofNode_dolly(self, amount)

    def tiltDeg(self, degrees):
        return _openframeworks.ofNode_tiltDeg(self, degrees)

    def tiltRad(self, radians):
        return _openframeworks.ofNode_tiltRad(self, radians)

    def panDeg(self, degrees):
        return _openframeworks.ofNode_panDeg(self, degrees)

    def panRad(self, radians):
        return _openframeworks.ofNode_panRad(self, radians)

    def rollDeg(self, degrees):
        return _openframeworks.ofNode_rollDeg(self, degrees)

    def rollRad(self, radians):
        return _openframeworks.ofNode_rollRad(self, radians)

    def rotateDeg(self, *args):
        return _openframeworks.ofNode_rotateDeg(self, *args)

    def rotateRad(self, *args):
        return _openframeworks.ofNode_rotateRad(self, *args)

    def rotateAround(self, q, point):
        return _openframeworks.ofNode_rotateAround(self, q, point)

    def rotateAroundDeg(self, degrees, axis, point):
        return _openframeworks.ofNode_rotateAroundDeg(self, degrees, axis, point)

    def rotateAroundRad(self, radians, axis, point):
        return _openframeworks.ofNode_rotateAroundRad(self, radians, axis, point)

    def lookAt(self, *args):
        return _openframeworks.ofNode_lookAt(self, *args)

    def orbitDeg(self, *args):
        return _openframeworks.ofNode_orbitDeg(self, *args)

    def orbitRad(self, *args):
        return _openframeworks.ofNode_orbitRad(self, *args)

    def transformGL(self, renderer=None):
        return _openframeworks.ofNode_transformGL(self, renderer)

    def restoreTransformGL(self, renderer=None):
        return _openframeworks.ofNode_restoreTransformGL(self, renderer)

    def resetTransform(self):
        return _openframeworks.ofNode_resetTransform(self)

    def customDraw(self, *args):
        return _openframeworks.ofNode_customDraw(self, *args)

    def draw(self):
        return _openframeworks.ofNode_draw(self)
ofNode_swigregister = _openframeworks.ofNode_swigregister
ofNode_swigregister(ofNode)


def ofDrawAxis(size):
    return _openframeworks.ofDrawAxis(size)
ofDrawAxis = _openframeworks.ofDrawAxis

def ofDrawGrid(stepSize=1.25, numberOfSteps=8, labels=False, x=True, y=True, z=True):
    return _openframeworks.ofDrawGrid(stepSize, numberOfSteps, labels, x, y, z)
ofDrawGrid = _openframeworks.ofDrawGrid

def ofDrawGridPlane(stepSize=1.25, numberOfSteps=8, labels=False):
    return _openframeworks.ofDrawGridPlane(stepSize, numberOfSteps, labels)
ofDrawGridPlane = _openframeworks.ofDrawGridPlane

def ofDrawArrow(start, end, headSize=0.05):
    return _openframeworks.ofDrawArrow(start, end, headSize)
ofDrawArrow = _openframeworks.ofDrawArrow

def ofDrawRotationAxes(radius, stripWidth=10, circleRes=60):
    return _openframeworks.ofDrawRotationAxes(radius, stripWidth, circleRes)
ofDrawRotationAxes = _openframeworks.ofDrawRotationAxes
class ofCamera(ofNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        this = _openframeworks.new_ofCamera()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _openframeworks.delete_ofCamera
    __del__ = lambda self: None

    def setFov(self, f):
        return _openframeworks.ofCamera_setFov(self, f)

    def setNearClip(self, f):
        return _openframeworks.ofCamera_setNearClip(self, f)

    def setFarClip(self, f):
        return _openframeworks.ofCamera_setFarClip(self, f)

    def setLensOffset(self, lensOffset):
        return _openframeworks.ofCamera_setLensOffset(self, lensOffset)

    def setAspectRatio(self, aspectRatio):
        return _openframeworks.ofCamera_setAspectRatio(self, aspectRatio)

    def setForceAspectRatio(self, forceAspectRatio):
        return _openframeworks.ofCamera_setForceAspectRatio(self, forceAspectRatio)

    def getFov(self):
        return _openframeworks.ofCamera_getFov(self)

    def getNearClip(self):
        return _openframeworks.ofCamera_getNearClip(self)

    def getFarClip(self):
        return _openframeworks.ofCamera_getFarClip(self)

    def getLensOffset(self):
        return _openframeworks.ofCamera_getLensOffset(self)

    def getForceAspectRatio(self):
        return _openframeworks.ofCamera_getForceAspectRatio(self)

    def getAspectRatio(self):
        return _openframeworks.ofCamera_getAspectRatio(self)

    def setupPerspective(self, *args):
        return _openframeworks.ofCamera_setupPerspective(self, *args)

    def setupOffAxisViewPortal(self, topLeft, bottomLeft, bottomRight):
        return _openframeworks.ofCamera_setupOffAxisViewPortal(self, topLeft, bottomLeft, bottomRight)

    def setVFlip(self, vflip):
        return _openframeworks.ofCamera_setVFlip(self, vflip)

    def isVFlipped(self):
        return _openframeworks.ofCamera_isVFlipped(self)

    def enableOrtho(self):
        return _openframeworks.ofCamera_enableOrtho(self)

    def disableOrtho(self):
        return _openframeworks.ofCamera_disableOrtho(self)

    def getOrtho(self):
        return _openframeworks.ofCamera_getOrtho(self)

    def getImagePlaneDistance(self, *args):
        return _openframeworks.ofCamera_getImagePlaneDistance(self, *args)

    def begin(self, *args):
        return _openframeworks.ofCamera_begin(self, *args)

    def end(self):
        return _openframeworks.ofCamera_end(self)

    def getProjectionMatrix(self, *args):
        return _openframeworks.ofCamera_getProjectionMatrix(self, *args)

    def getModelViewMatrix(self):
        return _openframeworks.ofCamera_getModelViewMatrix(self)

    def getModelViewProjectionMatrix(self, *args):
        return _openframeworks.ofCamera_getModelViewProjectionMatrix(self, *args)

    def worldToScreen(self, *args):
        return _openframeworks.ofCamera_worldToScreen(self, *args)

    def screenToWorld(self, *args):
        return _openframeworks.ofCamera_screenToWorld(self, *args)

    def worldToCamera(self, *args):
        return _openframeworks.ofCamera_worldToCamera(self, *args)

    def cameraToWorld(self, *args):
        return _openframeworks.ofCamera_cameraToWorld(self, *args)

    def setRenderer(self, renderer):
        return _openframeworks.ofCamera_setRenderer(self, renderer)

    def drawFrustum(self, *args):
        return _openframeworks.ofCamera_drawFrustum(self, *args)
ofCamera_swigregister = _openframeworks.ofCamera_swigregister
ofCamera_swigregister(ofCamera)

class ofEasyCam(ofCamera):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        this = _openframeworks.new_ofEasyCam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def begin(self, *args):
        return _openframeworks.ofEasyCam_begin(self, *args)

    def reset(self):
        return _openframeworks.ofEasyCam_reset(self)

    def setTarget(self, *args):
        return _openframeworks.ofEasyCam_setTarget(self, *args)

    def getTarget(self):
        return _openframeworks.ofEasyCam_getTarget(self)

    def setDistance(self, distance):
        return _openframeworks.ofEasyCam_setDistance(self, distance)

    def getDistance(self):
        return _openframeworks.ofEasyCam_getDistance(self)

    def setDrag(self, drag):
        return _openframeworks.ofEasyCam_setDrag(self, drag)

    def getDrag(self):
        return _openframeworks.ofEasyCam_getDrag(self)

    def setAutoDistance(self, bAutoDistance):
        return _openframeworks.ofEasyCam_setAutoDistance(self, bAutoDistance)

    def setEvents(self, events):
        return _openframeworks.ofEasyCam_setEvents(self, events)

    def setRotationSensitivity(self, *args):
        return _openframeworks.ofEasyCam_setRotationSensitivity(self, *args)

    def setTranslationSensitivity(self, *args):
        return _openframeworks.ofEasyCam_setTranslationSensitivity(self, *args)

    def setTranslationKey(self, key):
        return _openframeworks.ofEasyCam_setTranslationKey(self, key)

    def getTranslationKey(self):
        return _openframeworks.ofEasyCam_getTranslationKey(self)

    def enableMouseInput(self):
        return _openframeworks.ofEasyCam_enableMouseInput(self)

    def disableMouseInput(self):
        return _openframeworks.ofEasyCam_disableMouseInput(self)

    def getMouseInputEnabled(self):
        return _openframeworks.ofEasyCam_getMouseInputEnabled(self)

    def enableMouseMiddleButton(self):
        return _openframeworks.ofEasyCam_enableMouseMiddleButton(self)

    def disableMouseMiddleButton(self):
        return _openframeworks.ofEasyCam_disableMouseMiddleButton(self)

    def getMouseMiddleButtonEnabled(self):
        return _openframeworks.ofEasyCam_getMouseMiddleButtonEnabled(self)

    def setRelativeYAxis(self, relative=True):
        return _openframeworks.ofEasyCam_setRelativeYAxis(self, relative)

    def getRelativeYAxis(self):
        return _openframeworks.ofEasyCam_getRelativeYAxis(self)

    def setUpAxis(self, up):
        return _openframeworks.ofEasyCam_setUpAxis(self, up)

    def getUpAxis(self):
        return _openframeworks.ofEasyCam_getUpAxis(self)

    def enableInertia(self):
        return _openframeworks.ofEasyCam_enableInertia(self)

    def disableInertia(self):
        return _openframeworks.ofEasyCam_disableInertia(self)

    def getInertiaEnabled(self):
        return _openframeworks.ofEasyCam_getInertiaEnabled(self)

    def setControlArea(self, controlArea):
        return _openframeworks.ofEasyCam_setControlArea(self, controlArea)

    def clearControlArea(self):
        return _openframeworks.ofEasyCam_clearControlArea(self)

    def getControlArea(self):
        return _openframeworks.ofEasyCam_getControlArea(self)
    TRANSFORM_NONE = _openframeworks.ofEasyCam_TRANSFORM_NONE
    TRANSFORM_ROTATE = _openframeworks.ofEasyCam_TRANSFORM_ROTATE
    TRANSFORM_TRANSLATE_XY = _openframeworks.ofEasyCam_TRANSFORM_TRANSLATE_XY
    TRANSFORM_TRANSLATE_Z = _openframeworks.ofEasyCam_TRANSFORM_TRANSLATE_Z
    TRANSFORM_SCALE = _openframeworks.ofEasyCam_TRANSFORM_SCALE

    def addInteraction(self, type, mouseButton, key=-1):
        return _openframeworks.ofEasyCam_addInteraction(self, type, mouseButton, key)

    def removeInteraction(self, type, mouseButton, key=-1):
        return _openframeworks.ofEasyCam_removeInteraction(self, type, mouseButton, key)

    def hasInteraction(self, type, mouseButton, key=-1):
        return _openframeworks.ofEasyCam_hasInteraction(self, type, mouseButton, key)

    def removeAllInteractions(self):
        return _openframeworks.ofEasyCam_removeAllInteractions(self)
    __swig_destroy__ = _openframeworks.delete_ofEasyCam
    __del__ = lambda self: None
ofEasyCam_swigregister = _openframeworks.ofEasyCam_swigregister
ofEasyCam_swigregister(ofEasyCam)

OF_MESH_POINTS = _openframeworks.OF_MESH_POINTS
OF_MESH_WIREFRAME = _openframeworks.OF_MESH_WIREFRAME
OF_MESH_FILL = _openframeworks.OF_MESH_FILL
OF_PRIMITIVE_TRIANGLES = _openframeworks.OF_PRIMITIVE_TRIANGLES
OF_PRIMITIVE_TRIANGLE_STRIP = _openframeworks.OF_PRIMITIVE_TRIANGLE_STRIP
OF_PRIMITIVE_TRIANGLE_FAN = _openframeworks.OF_PRIMITIVE_TRIANGLE_FAN
OF_PRIMITIVE_LINES = _openframeworks.OF_PRIMITIVE_LINES
OF_PRIMITIVE_LINE_STRIP = _openframeworks.OF_PRIMITIVE_LINE_STRIP
OF_PRIMITIVE_LINE_LOOP = _openframeworks.OF_PRIMITIVE_LINE_LOOP
OF_PRIMITIVE_POINTS = _openframeworks.OF_PRIMITIVE_POINTS
OF_OUTLINE = _openframeworks.OF_OUTLINE
OF_FILLED = _openframeworks.OF_FILLED
OF_MAX_STYLE_HISTORY = _openframeworks.OF_MAX_STYLE_HISTORY
OF_MAX_VIEWPORT_HISTORY = _openframeworks.OF_MAX_VIEWPORT_HISTORY
OF_MAX_CIRCLE_PTS = _openframeworks.OF_MAX_CIRCLE_PTS
OF_BLENDMODE_DISABLED = _openframeworks.OF_BLENDMODE_DISABLED
OF_BLENDMODE_ALPHA = _openframeworks.OF_BLENDMODE_ALPHA
OF_BLENDMODE_ADD = _openframeworks.OF_BLENDMODE_ADD
OF_BLENDMODE_SUBTRACT = _openframeworks.OF_BLENDMODE_SUBTRACT
OF_BLENDMODE_MULTIPLY = _openframeworks.OF_BLENDMODE_MULTIPLY
OF_BLENDMODE_SCREEN = _openframeworks.OF_BLENDMODE_SCREEN
OF_GRADIENT_LINEAR = _openframeworks.OF_GRADIENT_LINEAR
OF_GRADIENT_CIRCULAR = _openframeworks.OF_GRADIENT_CIRCULAR
OF_GRADIENT_BAR = _openframeworks.OF_GRADIENT_BAR
OF_POLY_WINDING_ODD = _openframeworks.OF_POLY_WINDING_ODD
OF_POLY_WINDING_NONZERO = _openframeworks.OF_POLY_WINDING_NONZERO
OF_POLY_WINDING_POSITIVE = _openframeworks.OF_POLY_WINDING_POSITIVE
OF_POLY_WINDING_NEGATIVE = _openframeworks.OF_POLY_WINDING_NEGATIVE
OF_POLY_WINDING_ABS_GEQ_TWO = _openframeworks.OF_POLY_WINDING_ABS_GEQ_TWO
OF_LEFT_HANDED = _openframeworks.OF_LEFT_HANDED
OF_RIGHT_HANDED = _openframeworks.OF_RIGHT_HANDED
OF_MATRIX_MODELVIEW = _openframeworks.OF_MATRIX_MODELVIEW
OF_MATRIX_PROJECTION = _openframeworks.OF_MATRIX_PROJECTION
OF_MATRIX_TEXTURE = _openframeworks.OF_MATRIX_TEXTURE
OF_BITMAPMODE_SIMPLE = _openframeworks.OF_BITMAPMODE_SIMPLE
OF_BITMAPMODE_SCREEN = _openframeworks.OF_BITMAPMODE_SCREEN
OF_BITMAPMODE_VIEWPORT = _openframeworks.OF_BITMAPMODE_VIEWPORT
OF_BITMAPMODE_MODEL = _openframeworks.OF_BITMAPMODE_MODEL
OF_BITMAPMODE_MODEL_BILLBOARD = _openframeworks.OF_BITMAPMODE_MODEL_BILLBOARD
OF_RECTMODE_CORNER = _openframeworks.OF_RECTMODE_CORNER
OF_RECTMODE_CENTER = _openframeworks.OF_RECTMODE_CENTER
OF_IMAGE_GRAYSCALE = _openframeworks.OF_IMAGE_GRAYSCALE
OF_IMAGE_COLOR = _openframeworks.OF_IMAGE_COLOR
OF_IMAGE_COLOR_ALPHA = _openframeworks.OF_IMAGE_COLOR_ALPHA
OF_IMAGE_UNDEFINED = _openframeworks.OF_IMAGE_UNDEFINED
OF_INTERPOLATE_NEAREST_NEIGHBOR = _openframeworks.OF_INTERPOLATE_NEAREST_NEIGHBOR
OF_INTERPOLATE_BILINEAR = _openframeworks.OF_INTERPOLATE_BILINEAR
OF_INTERPOLATE_BICUBIC = _openframeworks.OF_INTERPOLATE_BICUBIC
OF_PIXELS_GRAY = _openframeworks.OF_PIXELS_GRAY
OF_PIXELS_GRAY_ALPHA = _openframeworks.OF_PIXELS_GRAY_ALPHA
OF_PIXELS_RGB = _openframeworks.OF_PIXELS_RGB
OF_PIXELS_BGR = _openframeworks.OF_PIXELS_BGR
OF_PIXELS_RGBA = _openframeworks.OF_PIXELS_RGBA
OF_PIXELS_BGRA = _openframeworks.OF_PIXELS_BGRA
OF_PIXELS_RGB565 = _openframeworks.OF_PIXELS_RGB565
OF_PIXELS_NV12 = _openframeworks.OF_PIXELS_NV12
OF_PIXELS_NV21 = _openframeworks.OF_PIXELS_NV21
OF_PIXELS_YV12 = _openframeworks.OF_PIXELS_YV12
OF_PIXELS_I420 = _openframeworks.OF_PIXELS_I420
OF_PIXELS_YUY2 = _openframeworks.OF_PIXELS_YUY2
OF_PIXELS_UYVY = _openframeworks.OF_PIXELS_UYVY
OF_PIXELS_Y = _openframeworks.OF_PIXELS_Y
OF_PIXELS_U = _openframeworks.OF_PIXELS_U
OF_PIXELS_V = _openframeworks.OF_PIXELS_V
OF_PIXELS_UV = _openframeworks.OF_PIXELS_UV
OF_PIXELS_VU = _openframeworks.OF_PIXELS_VU
OF_PIXELS_NUM_FORMATS = _openframeworks.OF_PIXELS_NUM_FORMATS
OF_PIXELS_UNKNOWN = _openframeworks.OF_PIXELS_UNKNOWN
OF_PIXELS_NATIVE = _openframeworks.OF_PIXELS_NATIVE

class ofMesh(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openframeworks.new_ofMesh(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _openframeworks.delete_ofMesh
    __del__ = lambda self: None

    def setFromTriangles(self, tris, bUseFaceNormal=False):
        return _openframeworks.ofMesh_setFromTriangles(self, tris, bUseFaceNormal)

    def setMode(self, mode):
        return _openframeworks.ofMesh_setMode(self, mode)

    def getMode(self):
        return _openframeworks.ofMesh_getMode(self)
    plane = staticmethod(_openframeworks.ofMesh_plane)
    sphere = staticmethod(_openframeworks.ofMesh_sphere)
    icosahedron = staticmethod(_openframeworks.ofMesh_icosahedron)
    icosphere = staticmethod(_openframeworks.ofMesh_icosphere)
    cylinder = staticmethod(_openframeworks.ofMesh_cylinder)
    cone = staticmethod(_openframeworks.ofMesh_cone)
    box = staticmethod(_openframeworks.ofMesh_box)
    axis = staticmethod(_openframeworks.ofMesh_axis)

    def addVertex(self, v):
        return _openframeworks.ofMesh_addVertex(self, v)

    def addVertices(self, *args):
        return _openframeworks.ofMesh_addVertices(self, *args)

    def removeVertex(self, index):
        return _openframeworks.ofMesh_removeVertex(self, index)

    def setVertex(self, index, v):
        return _openframeworks.ofMesh_setVertex(self, index, v)

    def clearVertices(self):
        return _openframeworks.ofMesh_clearVertices(self)

    def clear(self):
        return _openframeworks.ofMesh_clear(self)

    def getNumVertices(self):
        return _openframeworks.ofMesh_getNumVertices(self)

    def getVerticesPointer(self, *args):
        return _openframeworks.ofMesh_getVerticesPointer(self, *args)

    def getVertex(self, i):
        return _openframeworks.ofMesh_getVertex(self, i)

    def getVertices(self, *args):
        return _openframeworks.ofMesh_getVertices(self, *args)

    def hasVertices(self):
        return _openframeworks.ofMesh_hasVertices(self)

    def append(self, mesh):
        return _openframeworks.ofMesh_append(self, mesh)

    def mergeDuplicateVertices(self):
        return _openframeworks.ofMesh_mergeDuplicateVertices(self)

    def getCentroid(self):
        return _openframeworks.ofMesh_getCentroid(self)

    def getNormal(self, i):
        return _openframeworks.ofMesh_getNormal(self, i)

    def addNormal(self, n):
        return _openframeworks.ofMesh_addNormal(self, n)

    def addNormals(self, *args):
        return _openframeworks.ofMesh_addNormals(self, *args)

    def removeNormal(self, index):
        return _openframeworks.ofMesh_removeNormal(self, index)

    def setNormal(self, index, n):
        return _openframeworks.ofMesh_setNormal(self, index, n)

    def clearNormals(self):
        return _openframeworks.ofMesh_clearNormals(self)

    def getNumNormals(self):
        return _openframeworks.ofMesh_getNumNormals(self)

    def getNormalsPointer(self, *args):
        return _openframeworks.ofMesh_getNormalsPointer(self, *args)

    def getNormals(self, *args):
        return _openframeworks.ofMesh_getNormals(self, *args)

    def hasNormals(self):
        return _openframeworks.ofMesh_hasNormals(self)

    def enableNormals(self):
        return _openframeworks.ofMesh_enableNormals(self)

    def disableNormals(self):
        return _openframeworks.ofMesh_disableNormals(self)

    def usingNormals(self):
        return _openframeworks.ofMesh_usingNormals(self)

    def smoothNormals(self, angle):
        return _openframeworks.ofMesh_smoothNormals(self, angle)

    def flatNormals(self):
        return _openframeworks.ofMesh_flatNormals(self)

    def getFace(self, faceId):
        return _openframeworks.ofMesh_getFace(self, faceId)

    def getFaceNormals(self, perVetex=False):
        return _openframeworks.ofMesh_getFaceNormals(self, perVetex)

    def getUniqueFaces(self):
        return _openframeworks.ofMesh_getUniqueFaces(self)

    def getColor(self, i):
        return _openframeworks.ofMesh_getColor(self, i)

    def addColor(self, c):
        return _openframeworks.ofMesh_addColor(self, c)

    def addColors(self, *args):
        return _openframeworks.ofMesh_addColors(self, *args)

    def removeColor(self, index):
        return _openframeworks.ofMesh_removeColor(self, index)

    def setColor(self, index, c):
        return _openframeworks.ofMesh_setColor(self, index, c)

    def clearColors(self):
        return _openframeworks.ofMesh_clearColors(self)

    def getNumColors(self):
        return _openframeworks.ofMesh_getNumColors(self)

    def getColorsPointer(self, *args):
        return _openframeworks.ofMesh_getColorsPointer(self, *args)

    def getColors(self, *args):
        return _openframeworks.ofMesh_getColors(self, *args)

    def hasColors(self):
        return _openframeworks.ofMesh_hasColors(self)

    def enableColors(self):
        return _openframeworks.ofMesh_enableColors(self)

    def disableColors(self):
        return _openframeworks.ofMesh_disableColors(self)

    def usingColors(self):
        return _openframeworks.ofMesh_usingColors(self)

    def getTexCoord(self, i):
        return _openframeworks.ofMesh_getTexCoord(self, i)

    def addTexCoord(self, t):
        return _openframeworks.ofMesh_addTexCoord(self, t)

    def addTexCoords(self, *args):
        return _openframeworks.ofMesh_addTexCoords(self, *args)

    def removeTexCoord(self, index):
        return _openframeworks.ofMesh_removeTexCoord(self, index)

    def setTexCoord(self, index, t):
        return _openframeworks.ofMesh_setTexCoord(self, index, t)

    def clearTexCoords(self):
        return _openframeworks.ofMesh_clearTexCoords(self)

    def getNumTexCoords(self):
        return _openframeworks.ofMesh_getNumTexCoords(self)

    def getTexCoordsPointer(self, *args):
        return _openframeworks.ofMesh_getTexCoordsPointer(self, *args)

    def getTexCoords(self, *args):
        return _openframeworks.ofMesh_getTexCoords(self, *args)

    def hasTexCoords(self):
        return _openframeworks.ofMesh_hasTexCoords(self)

    def enableTextures(self):
        return _openframeworks.ofMesh_enableTextures(self)

    def disableTextures(self):
        return _openframeworks.ofMesh_disableTextures(self)

    def usingTextures(self):
        return _openframeworks.ofMesh_usingTextures(self)

    def setupIndicesAuto(self):
        return _openframeworks.ofMesh_setupIndicesAuto(self)

    def getIndex(self, i):
        return _openframeworks.ofMesh_getIndex(self, i)

    def addIndex(self, i):
        return _openframeworks.ofMesh_addIndex(self, i)

    def addIndices(self, *args):
        return _openframeworks.ofMesh_addIndices(self, *args)

    def removeIndex(self, index):
        return _openframeworks.ofMesh_removeIndex(self, index)

    def setIndex(self, index, val):
        return _openframeworks.ofMesh_setIndex(self, index, val)

    def clearIndices(self):
        return _openframeworks.ofMesh_clearIndices(self)

    def getNumIndices(self):
        return _openframeworks.ofMesh_getNumIndices(self)

    def getIndexPointer(self, *args):
        return _openframeworks.ofMesh_getIndexPointer(self, *args)

    def getIndices(self, *args):
        return _openframeworks.ofMesh_getIndices(self, *args)

    def hasIndices(self):
        return _openframeworks.ofMesh_hasIndices(self)

    def addTriangle(self, index1, index2, index3):
        return _openframeworks.ofMesh_addTriangle(self, index1, index2, index3)

    def enableIndices(self):
        return _openframeworks.ofMesh_enableIndices(self)

    def disableIndices(self):
        return _openframeworks.ofMesh_disableIndices(self)

    def usingIndices(self):
        return _openframeworks.ofMesh_usingIndices(self)

    def setColorForIndices(self, startIndex, endIndex, color):
        return _openframeworks.ofMesh_setColorForIndices(self, startIndex, endIndex, color)

    def getMeshForIndices(self, *args):
        return _openframeworks.ofMesh_getMeshForIndices(self, *args)

    def drawVertices(self):
        return _openframeworks.ofMesh_drawVertices(self)

    def drawWireframe(self):
        return _openframeworks.ofMesh_drawWireframe(self)

    def drawFaces(self):
        return _openframeworks.ofMesh_drawFaces(self)

    def draw(self, *args):
        return _openframeworks.ofMesh_draw(self, *args)

    def load(self, path):
        return _openframeworks.ofMesh_load(self, path)

    def save(self, path, useBinary=False):
        return _openframeworks.ofMesh_save(self, path, useBinary)
ofMesh_swigregister = _openframeworks.ofMesh_swigregister
ofMesh_swigregister(ofMesh)

def ofMesh_plane(width, height, columns=2, rows=2, mode=OF_PRIMITIVE_TRIANGLE_STRIP):
    return _openframeworks.ofMesh_plane(width, height, columns, rows, mode)
ofMesh_plane = _openframeworks.ofMesh_plane

def ofMesh_sphere(radius, res=12, mode=OF_PRIMITIVE_TRIANGLE_STRIP):
    return _openframeworks.ofMesh_sphere(radius, res, mode)
ofMesh_sphere = _openframeworks.ofMesh_sphere

def ofMesh_icosahedron(radius):
    return _openframeworks.ofMesh_icosahedron(radius)
ofMesh_icosahedron = _openframeworks.ofMesh_icosahedron

def ofMesh_icosphere(radius, iterations=2):
    return _openframeworks.ofMesh_icosphere(radius, iterations)
ofMesh_icosphere = _openframeworks.ofMesh_icosphere

def ofMesh_cylinder(radius, height, radiusSegments=12, heightSegments=6, numCapSegments=2, bCapped=True, mode=OF_PRIMITIVE_TRIANGLE_STRIP):
    return _openframeworks.ofMesh_cylinder(radius, height, radiusSegments, heightSegments, numCapSegments, bCapped, mode)
ofMesh_cylinder = _openframeworks.ofMesh_cylinder

def ofMesh_cone(radius, height, radiusSegments=12, heightSegments=6, capSegments=2, mode=OF_PRIMITIVE_TRIANGLE_STRIP):
    return _openframeworks.ofMesh_cone(radius, height, radiusSegments, heightSegments, capSegments, mode)
ofMesh_cone = _openframeworks.ofMesh_cone

def ofMesh_box(width, height, depth, resX=2, resY=2, resZ=2):
    return _openframeworks.ofMesh_box(width, height, depth, resX, resY, resZ)
ofMesh_box = _openframeworks.ofMesh_box

def ofMesh_axis(size=1.0):
    return _openframeworks.ofMesh_axis(size)
ofMesh_axis = _openframeworks.ofMesh_axis

class of3dPrimitive(ofNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_of3dPrimitive
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _openframeworks.new_of3dPrimitive(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def mapTexCoords(self, u1, v1, u2, v2):
        return _openframeworks.of3dPrimitive_mapTexCoords(self, u1, v1, u2, v2)

    def mapTexCoordsFromTexture(self, inTexture):
        return _openframeworks.of3dPrimitive_mapTexCoordsFromTexture(self, inTexture)

    def getMeshPtr(self, *args):
        return _openframeworks.of3dPrimitive_getMeshPtr(self, *args)

    def getMesh(self, *args):
        return _openframeworks.of3dPrimitive_getMesh(self, *args)

    def getTexCoordsPtr(self, *args):
        return _openframeworks.of3dPrimitive_getTexCoordsPtr(self, *args)

    def getTexCoords(self, *args):
        return _openframeworks.of3dPrimitive_getTexCoords(self, *args)

    def hasScaling(self):
        return _openframeworks.of3dPrimitive_hasScaling(self)

    def hasNormalsEnabled(self):
        return _openframeworks.of3dPrimitive_hasNormalsEnabled(self)

    def enableNormals(self):
        return _openframeworks.of3dPrimitive_enableNormals(self)

    def enableTextures(self):
        return _openframeworks.of3dPrimitive_enableTextures(self)

    def enableColors(self):
        return _openframeworks.of3dPrimitive_enableColors(self)

    def disableNormals(self):
        return _openframeworks.of3dPrimitive_disableNormals(self)

    def disableTextures(self):
        return _openframeworks.of3dPrimitive_disableTextures(self)

    def disableColors(self):
        return _openframeworks.of3dPrimitive_disableColors(self)

    def drawVertices(self):
        return _openframeworks.of3dPrimitive_drawVertices(self)

    def drawWireframe(self):
        return _openframeworks.of3dPrimitive_drawWireframe(self)

    def drawFaces(self):
        return _openframeworks.of3dPrimitive_drawFaces(self)

    def drawNormals(self, length, bFaceNormals=False):
        return _openframeworks.of3dPrimitive_drawNormals(self, length, bFaceNormals)

    def drawAxes(self, a_size):
        return _openframeworks.of3dPrimitive_drawAxes(self, a_size)

    def setUseVbo(self, useVbo):
        return _openframeworks.of3dPrimitive_setUseVbo(self, useVbo)

    def isUsingVbo(self):
        return _openframeworks.of3dPrimitive_isUsingVbo(self)
of3dPrimitive_swigregister = _openframeworks.of3dPrimitive_swigregister
of3dPrimitive_swigregister(of3dPrimitive)

class ofPlanePrimitive(of3dPrimitive):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openframeworks.new_ofPlanePrimitive(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _openframeworks.delete_ofPlanePrimitive
    __del__ = lambda self: None

    def set(self, *args):
        return _openframeworks.ofPlanePrimitive_set(self, *args)

    def resizeToTexture(self, inTexture, scale=1.):
        return _openframeworks.ofPlanePrimitive_resizeToTexture(self, inTexture, scale)

    def setWidth(self, width):
        return _openframeworks.ofPlanePrimitive_setWidth(self, width)

    def setHeight(self, height):
        return _openframeworks.ofPlanePrimitive_setHeight(self, height)

    def setColumns(self, columns):
        return _openframeworks.ofPlanePrimitive_setColumns(self, columns)

    def setRows(self, rows):
        return _openframeworks.ofPlanePrimitive_setRows(self, rows)

    def setResolution(self, columns, rows):
        return _openframeworks.ofPlanePrimitive_setResolution(self, columns, rows)

    def setMode(self, mode):
        return _openframeworks.ofPlanePrimitive_setMode(self, mode)

    def getNumColumns(self):
        return _openframeworks.ofPlanePrimitive_getNumColumns(self)

    def getNumRows(self):
        return _openframeworks.ofPlanePrimitive_getNumRows(self)

    def getResolution(self):
        return _openframeworks.ofPlanePrimitive_getResolution(self)

    def getWidth(self):
        return _openframeworks.ofPlanePrimitive_getWidth(self)

    def getHeight(self):
        return _openframeworks.ofPlanePrimitive_getHeight(self)
ofPlanePrimitive_swigregister = _openframeworks.ofPlanePrimitive_swigregister
ofPlanePrimitive_swigregister(ofPlanePrimitive)

class ofSpherePrimitive(of3dPrimitive):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openframeworks.new_ofSpherePrimitive(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _openframeworks.delete_ofSpherePrimitive
    __del__ = lambda self: None

    def set(self, radius, resolution, mode=OF_PRIMITIVE_TRIANGLE_STRIP):
        return _openframeworks.ofSpherePrimitive_set(self, radius, resolution, mode)

    def setResolution(self, res):
        return _openframeworks.ofSpherePrimitive_setResolution(self, res)

    def setRadius(self, radius):
        return _openframeworks.ofSpherePrimitive_setRadius(self, radius)

    def setMode(self, mode):
        return _openframeworks.ofSpherePrimitive_setMode(self, mode)

    def getRadius(self):
        return _openframeworks.ofSpherePrimitive_getRadius(self)

    def getResolution(self):
        return _openframeworks.ofSpherePrimitive_getResolution(self)
ofSpherePrimitive_swigregister = _openframeworks.ofSpherePrimitive_swigregister
ofSpherePrimitive_swigregister(ofSpherePrimitive)

class ofIcoSpherePrimitive(of3dPrimitive):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openframeworks.new_ofIcoSpherePrimitive(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _openframeworks.delete_ofIcoSpherePrimitive
    __del__ = lambda self: None

    def set(self, radius, res):
        return _openframeworks.ofIcoSpherePrimitive_set(self, radius, res)

    def setResolution(self, iterations):
        return _openframeworks.ofIcoSpherePrimitive_setResolution(self, iterations)

    def setRadius(self, radius):
        return _openframeworks.ofIcoSpherePrimitive_setRadius(self, radius)

    def setMode(self, mode):
        return _openframeworks.ofIcoSpherePrimitive_setMode(self, mode)

    def getRadius(self):
        return _openframeworks.ofIcoSpherePrimitive_getRadius(self)

    def getResolution(self):
        return _openframeworks.ofIcoSpherePrimitive_getResolution(self)
ofIcoSpherePrimitive_swigregister = _openframeworks.ofIcoSpherePrimitive_swigregister
ofIcoSpherePrimitive_swigregister(ofIcoSpherePrimitive)

class ofCylinderPrimitive(of3dPrimitive):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openframeworks.new_ofCylinderPrimitive(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _openframeworks.delete_ofCylinderPrimitive
    __del__ = lambda self: None

    def set(self, *args):
        return _openframeworks.ofCylinderPrimitive_set(self, *args)

    def setRadius(self, radius):
        return _openframeworks.ofCylinderPrimitive_setRadius(self, radius)

    def setHeight(self, height):
        return _openframeworks.ofCylinderPrimitive_setHeight(self, height)

    def setCapped(self, bCapped):
        return _openframeworks.ofCylinderPrimitive_setCapped(self, bCapped)

    def setResolutionRadius(self, radiusRes):
        return _openframeworks.ofCylinderPrimitive_setResolutionRadius(self, radiusRes)

    def setResolutionHeight(self, heightRes):
        return _openframeworks.ofCylinderPrimitive_setResolutionHeight(self, heightRes)

    def setResolutionCap(self, capRes):
        return _openframeworks.ofCylinderPrimitive_setResolutionCap(self, capRes)

    def setResolution(self, radiusSegments, heightSegments, capSegments=2):
        return _openframeworks.ofCylinderPrimitive_setResolution(self, radiusSegments, heightSegments, capSegments)

    def setMode(self, mode):
        return _openframeworks.ofCylinderPrimitive_setMode(self, mode)

    def setTopCapColor(self, color):
        return _openframeworks.ofCylinderPrimitive_setTopCapColor(self, color)

    def setCylinderColor(self, color):
        return _openframeworks.ofCylinderPrimitive_setCylinderColor(self, color)

    def setBottomCapColor(self, color):
        return _openframeworks.ofCylinderPrimitive_setBottomCapColor(self, color)

    def getTopCapIndices(self):
        return _openframeworks.ofCylinderPrimitive_getTopCapIndices(self)

    def getTopCapMesh(self):
        return _openframeworks.ofCylinderPrimitive_getTopCapMesh(self)

    def getCylinderIndices(self):
        return _openframeworks.ofCylinderPrimitive_getCylinderIndices(self)

    def getCylinderMesh(self):
        return _openframeworks.ofCylinderPrimitive_getCylinderMesh(self)

    def getBottomCapIndices(self):
        return _openframeworks.ofCylinderPrimitive_getBottomCapIndices(self)

    def getBottomCapMesh(self):
        return _openframeworks.ofCylinderPrimitive_getBottomCapMesh(self)

    def getResolutionRadius(self):
        return _openframeworks.ofCylinderPrimitive_getResolutionRadius(self)

    def getResolutionHeight(self):
        return _openframeworks.ofCylinderPrimitive_getResolutionHeight(self)

    def getResolutionCap(self):
        return _openframeworks.ofCylinderPrimitive_getResolutionCap(self)

    def getResolution(self):
        return _openframeworks.ofCylinderPrimitive_getResolution(self)

    def getHeight(self):
        return _openframeworks.ofCylinderPrimitive_getHeight(self)

    def getRadius(self):
        return _openframeworks.ofCylinderPrimitive_getRadius(self)

    def getCapped(self):
        return _openframeworks.ofCylinderPrimitive_getCapped(self)
ofCylinderPrimitive_swigregister = _openframeworks.ofCylinderPrimitive_swigregister
ofCylinderPrimitive_swigregister(ofCylinderPrimitive)

class ofConePrimitive(of3dPrimitive):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openframeworks.new_ofConePrimitive(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _openframeworks.delete_ofConePrimitive
    __del__ = lambda self: None

    def set(self, *args):
        return _openframeworks.ofConePrimitive_set(self, *args)

    def setResolutionRadius(self, radiusRes):
        return _openframeworks.ofConePrimitive_setResolutionRadius(self, radiusRes)

    def setResolutionHeight(self, heightRes):
        return _openframeworks.ofConePrimitive_setResolutionHeight(self, heightRes)

    def setResolutionCap(self, capRes):
        return _openframeworks.ofConePrimitive_setResolutionCap(self, capRes)

    def setResolution(self, radiusRes, heightRes, capRes):
        return _openframeworks.ofConePrimitive_setResolution(self, radiusRes, heightRes, capRes)

    def setMode(self, mode):
        return _openframeworks.ofConePrimitive_setMode(self, mode)

    def setRadius(self, radius):
        return _openframeworks.ofConePrimitive_setRadius(self, radius)

    def setHeight(self, height):
        return _openframeworks.ofConePrimitive_setHeight(self, height)

    def setTopColor(self, color):
        return _openframeworks.ofConePrimitive_setTopColor(self, color)

    def setCapColor(self, color):
        return _openframeworks.ofConePrimitive_setCapColor(self, color)

    def getConeIndices(self):
        return _openframeworks.ofConePrimitive_getConeIndices(self)

    def getConeMesh(self):
        return _openframeworks.ofConePrimitive_getConeMesh(self)

    def getCapIndices(self):
        return _openframeworks.ofConePrimitive_getCapIndices(self)

    def getCapMesh(self):
        return _openframeworks.ofConePrimitive_getCapMesh(self)

    def getResolutionRadius(self):
        return _openframeworks.ofConePrimitive_getResolutionRadius(self)

    def getResolutionHeight(self):
        return _openframeworks.ofConePrimitive_getResolutionHeight(self)

    def getResolutionCap(self):
        return _openframeworks.ofConePrimitive_getResolutionCap(self)

    def getResolution(self):
        return _openframeworks.ofConePrimitive_getResolution(self)

    def getRadius(self):
        return _openframeworks.ofConePrimitive_getRadius(self)

    def getHeight(self):
        return _openframeworks.ofConePrimitive_getHeight(self)
ofConePrimitive_swigregister = _openframeworks.ofConePrimitive_swigregister
ofConePrimitive_swigregister(ofConePrimitive)

class ofBoxPrimitive(of3dPrimitive):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    SIDE_FRONT = _openframeworks.ofBoxPrimitive_SIDE_FRONT
    SIDE_RIGHT = _openframeworks.ofBoxPrimitive_SIDE_RIGHT
    SIDE_LEFT = _openframeworks.ofBoxPrimitive_SIDE_LEFT
    SIDE_BACK = _openframeworks.ofBoxPrimitive_SIDE_BACK
    SIDE_TOP = _openframeworks.ofBoxPrimitive_SIDE_TOP
    SIDE_BOTTOM = _openframeworks.ofBoxPrimitive_SIDE_BOTTOM
    SIDES_TOTAL = _openframeworks.ofBoxPrimitive_SIDES_TOTAL

    def __init__(self, *args):
        this = _openframeworks.new_ofBoxPrimitive(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _openframeworks.delete_ofBoxPrimitive
    __del__ = lambda self: None

    def set(self, *args):
        return _openframeworks.ofBoxPrimitive_set(self, *args)

    def setWidth(self, a_width):
        return _openframeworks.ofBoxPrimitive_setWidth(self, a_width)

    def setHeight(self, a_height):
        return _openframeworks.ofBoxPrimitive_setHeight(self, a_height)

    def setDepth(self, a_depth):
        return _openframeworks.ofBoxPrimitive_setDepth(self, a_depth)

    def resizeToTexture(self, inTexture):
        return _openframeworks.ofBoxPrimitive_resizeToTexture(self, inTexture)

    def getSideIndices(self, sideIndex):
        return _openframeworks.ofBoxPrimitive_getSideIndices(self, sideIndex)

    def getSideMesh(self, sideIndex):
        return _openframeworks.ofBoxPrimitive_getSideMesh(self, sideIndex)

    def setResolutionWidth(self, widthRes):
        return _openframeworks.ofBoxPrimitive_setResolutionWidth(self, widthRes)

    def setResolutionHeight(self, heightRes):
        return _openframeworks.ofBoxPrimitive_setResolutionHeight(self, heightRes)

    def setResolutionDepth(self, depthRes):
        return _openframeworks.ofBoxPrimitive_setResolutionDepth(self, depthRes)

    def setResolution(self, *args):
        return _openframeworks.ofBoxPrimitive_setResolution(self, *args)

    def setMode(self, mode):
        return _openframeworks.ofBoxPrimitive_setMode(self, mode)

    def setSideColor(self, sideIndex, color):
        return _openframeworks.ofBoxPrimitive_setSideColor(self, sideIndex, color)

    def getResolutionWidth(self):
        return _openframeworks.ofBoxPrimitive_getResolutionWidth(self)

    def getResolutionHeight(self):
        return _openframeworks.ofBoxPrimitive_getResolutionHeight(self)

    def getResolutionDepth(self):
        return _openframeworks.ofBoxPrimitive_getResolutionDepth(self)

    def getResolution(self):
        return _openframeworks.ofBoxPrimitive_getResolution(self)

    def getWidth(self):
        return _openframeworks.ofBoxPrimitive_getWidth(self)

    def getHeight(self):
        return _openframeworks.ofBoxPrimitive_getHeight(self)

    def getDepth(self):
        return _openframeworks.ofBoxPrimitive_getDepth(self)

    def getSize(self):
        return _openframeworks.ofBoxPrimitive_getSize(self)
ofBoxPrimitive_swigregister = _openframeworks.ofBoxPrimitive_swigregister
ofBoxPrimitive_swigregister(ofBoxPrimitive)


def ofExit(status=0):
    return _openframeworks.ofExit(status)
ofExit = _openframeworks.ofExit

def ofGetFrameRate():
    return _openframeworks.ofGetFrameRate()
ofGetFrameRate = _openframeworks.ofGetFrameRate

def ofGetTargetFrameRate():
    return _openframeworks.ofGetTargetFrameRate()
ofGetTargetFrameRate = _openframeworks.ofGetTargetFrameRate

def ofSetFrameRate(targetRate):
    return _openframeworks.ofSetFrameRate(targetRate)
ofSetFrameRate = _openframeworks.ofSetFrameRate

def ofGetLastFrameTime():
    return _openframeworks.ofGetLastFrameTime()
ofGetLastFrameTime = _openframeworks.ofGetLastFrameTime

def ofSetTimeModeSystem():
    return _openframeworks.ofSetTimeModeSystem()
ofSetTimeModeSystem = _openframeworks.ofSetTimeModeSystem

def ofGetFixedStepForFps(fps):
    return _openframeworks.ofGetFixedStepForFps(fps)
ofGetFixedStepForFps = _openframeworks.ofGetFixedStepForFps

def ofSetTimeModeFixedRate(*args):
    return _openframeworks.ofSetTimeModeFixedRate(*args)
ofSetTimeModeFixedRate = _openframeworks.ofSetTimeModeFixedRate

def ofSetTimeModeFiltered(alpha=0.9):
    return _openframeworks.ofSetTimeModeFiltered(alpha)
ofSetTimeModeFiltered = _openframeworks.ofSetTimeModeFiltered

def ofSetOrientation(orientation, vFlip=True):
    return _openframeworks.ofSetOrientation(orientation, vFlip)
ofSetOrientation = _openframeworks.ofSetOrientation

def ofGetOrientation():
    return _openframeworks.ofGetOrientation()
ofGetOrientation = _openframeworks.ofGetOrientation

def ofHideCursor():
    return _openframeworks.ofHideCursor()
ofHideCursor = _openframeworks.ofHideCursor

def ofShowCursor():
    return _openframeworks.ofShowCursor()
ofShowCursor = _openframeworks.ofShowCursor

def ofGetWindowPositionX():
    return _openframeworks.ofGetWindowPositionX()
ofGetWindowPositionX = _openframeworks.ofGetWindowPositionX

def ofGetWindowPositionY():
    return _openframeworks.ofGetWindowPositionY()
ofGetWindowPositionY = _openframeworks.ofGetWindowPositionY

def ofGetScreenWidth():
    return _openframeworks.ofGetScreenWidth()
ofGetScreenWidth = _openframeworks.ofGetScreenWidth

def ofGetScreenHeight():
    return _openframeworks.ofGetScreenHeight()
ofGetScreenHeight = _openframeworks.ofGetScreenHeight

def ofGetWindowMode():
    return _openframeworks.ofGetWindowMode()
ofGetWindowMode = _openframeworks.ofGetWindowMode

def ofGetWidth():
    return _openframeworks.ofGetWidth()
ofGetWidth = _openframeworks.ofGetWidth

def ofGetHeight():
    return _openframeworks.ofGetHeight()
ofGetHeight = _openframeworks.ofGetHeight

def ofGetWindowWidth():
    return _openframeworks.ofGetWindowWidth()
ofGetWindowWidth = _openframeworks.ofGetWindowWidth

def ofGetWindowHeight():
    return _openframeworks.ofGetWindowHeight()
ofGetWindowHeight = _openframeworks.ofGetWindowHeight

def ofGetClipboardString():
    return _openframeworks.ofGetClipboardString()
ofGetClipboardString = _openframeworks.ofGetClipboardString

def ofSetClipboardString(str):
    return _openframeworks.ofSetClipboardString(str)
ofSetClipboardString = _openframeworks.ofSetClipboardString

def ofRandomWidth():
    return _openframeworks.ofRandomWidth()
ofRandomWidth = _openframeworks.ofRandomWidth

def ofRandomHeight():
    return _openframeworks.ofRandomHeight()
ofRandomHeight = _openframeworks.ofRandomHeight

def ofDoesHWOrientation():
    return _openframeworks.ofDoesHWOrientation()
ofDoesHWOrientation = _openframeworks.ofDoesHWOrientation

def ofGetWindowSize():
    return _openframeworks.ofGetWindowSize()
ofGetWindowSize = _openframeworks.ofGetWindowSize

def ofGetWindowRect():
    return _openframeworks.ofGetWindowRect()
ofGetWindowRect = _openframeworks.ofGetWindowRect

def ofSetWindowPosition(x, y):
    return _openframeworks.ofSetWindowPosition(x, y)
ofSetWindowPosition = _openframeworks.ofSetWindowPosition

def ofSetWindowShape(width, height):
    return _openframeworks.ofSetWindowShape(width, height)
ofSetWindowShape = _openframeworks.ofSetWindowShape

def ofSetWindowTitle(title):
    return _openframeworks.ofSetWindowTitle(title)
ofSetWindowTitle = _openframeworks.ofSetWindowTitle

def ofEnableSetupScreen():
    return _openframeworks.ofEnableSetupScreen()
ofEnableSetupScreen = _openframeworks.ofEnableSetupScreen

def ofDisableSetupScreen():
    return _openframeworks.ofDisableSetupScreen()
ofDisableSetupScreen = _openframeworks.ofDisableSetupScreen

def ofSetFullscreen(fullscreen):
    return _openframeworks.ofSetFullscreen(fullscreen)
ofSetFullscreen = _openframeworks.ofSetFullscreen

def ofToggleFullscreen():
    return _openframeworks.ofToggleFullscreen()
ofToggleFullscreen = _openframeworks.ofToggleFullscreen

def ofSetVerticalSync(bSync):
    return _openframeworks.ofSetVerticalSync(bSync)
ofSetVerticalSync = _openframeworks.ofSetVerticalSync

def ofEvents():
    return _openframeworks.ofEvents()
ofEvents = _openframeworks.ofEvents

def ofSetEscapeQuitsApp(bQuitOnEsc):
    return _openframeworks.ofSetEscapeQuitsApp(bQuitOnEsc)
ofSetEscapeQuitsApp = _openframeworks.ofSetEscapeQuitsApp
FIRMATA_MAJOR_VERSION = _openframeworks.FIRMATA_MAJOR_VERSION
FIRMATA_MINOR_VERSION = _openframeworks.FIRMATA_MINOR_VERSION
FIRMATA_BUGFIX_VERSION = _openframeworks.FIRMATA_BUGFIX_VERSION
FIRMATA_MAX_DATA_BYTES = _openframeworks.FIRMATA_MAX_DATA_BYTES
DIGITAL_MESSAGE = _openframeworks.DIGITAL_MESSAGE
ANALOG_MESSAGE = _openframeworks.ANALOG_MESSAGE
REPORT_ANALOG = _openframeworks.REPORT_ANALOG
REPORT_DIGITAL = _openframeworks.REPORT_DIGITAL
SET_PIN_MODE = _openframeworks.SET_PIN_MODE
SET_DIGITAL_PIN_VALUE = _openframeworks.SET_DIGITAL_PIN_VALUE
REPORT_VERSION = _openframeworks.REPORT_VERSION
SYSTEM_RESET = _openframeworks.SYSTEM_RESET
START_SYSEX = _openframeworks.START_SYSEX
END_SYSEX = _openframeworks.END_SYSEX
SERIAL_MESSAGE = _openframeworks.SERIAL_MESSAGE
ENCODER_DATA = _openframeworks.ENCODER_DATA
SERVO_CONFIG = _openframeworks.SERVO_CONFIG
STRING_DATA = _openframeworks.STRING_DATA
STEPPER_DATA = _openframeworks.STEPPER_DATA
ONEWIRE_DATA = _openframeworks.ONEWIRE_DATA
SHIFT_DATA = _openframeworks.SHIFT_DATA
I2C_REQUEST = _openframeworks.I2C_REQUEST
I2C_REPLY = _openframeworks.I2C_REPLY
I2C_CONFIG = _openframeworks.I2C_CONFIG
EXTENDED_ANALOG = _openframeworks.EXTENDED_ANALOG
PIN_STATE_QUERY = _openframeworks.PIN_STATE_QUERY
PIN_STATE_RESPONSE = _openframeworks.PIN_STATE_RESPONSE
CAPABILITY_QUERY = _openframeworks.CAPABILITY_QUERY
CAPABILITY_RESPONSE = _openframeworks.CAPABILITY_RESPONSE
ANALOG_MAPPING_QUERY = _openframeworks.ANALOG_MAPPING_QUERY
ANALOG_MAPPING_RESPONSE = _openframeworks.ANALOG_MAPPING_RESPONSE
REPORT_FIRMWARE = _openframeworks.REPORT_FIRMWARE
SAMPLING_INTERVAL = _openframeworks.SAMPLING_INTERVAL
SCHEDULER_DATA = _openframeworks.SCHEDULER_DATA
SYSEX_NON_REALTIME = _openframeworks.SYSEX_NON_REALTIME
SYSEX_REALTIME = _openframeworks.SYSEX_REALTIME
ARD_INPUT = _openframeworks.ARD_INPUT
ARD_OUTPUT = _openframeworks.ARD_OUTPUT
ARD_ANALOG = _openframeworks.ARD_ANALOG
ARD_PWM = _openframeworks.ARD_PWM
ARD_SERVO = _openframeworks.ARD_SERVO
ARD_SHIFT = _openframeworks.ARD_SHIFT
ARD_I2C = _openframeworks.ARD_I2C
ARD_ONEWIRE = _openframeworks.ARD_ONEWIRE
ARD_STEPPER = _openframeworks.ARD_STEPPER
ARD_ENCODER = _openframeworks.ARD_ENCODER
ARD_SERIAL = _openframeworks.ARD_SERIAL
ARD_INPUT_PULLUP = _openframeworks.ARD_INPUT_PULLUP
ARD_IGNORE = _openframeworks.ARD_IGNORE
TOTAL_PIN_MODES = _openframeworks.TOTAL_PIN_MODES
MAX_STEPPERS = _openframeworks.MAX_STEPPERS
STEPPER_CONFIG = _openframeworks.STEPPER_CONFIG
STEPPER_STEP = _openframeworks.STEPPER_STEP
ONEWIRE_SEARCH_REQUEST = _openframeworks.ONEWIRE_SEARCH_REQUEST
ONEWIRE_CONFIG_REQUEST = _openframeworks.ONEWIRE_CONFIG_REQUEST
ONEWIRE_SEARCH_REPLY = _openframeworks.ONEWIRE_SEARCH_REPLY
ONEWIRE_READ_REPLY = _openframeworks.ONEWIRE_READ_REPLY
ONEWIRE_SEARCH_ALARMS_REQUEST = _openframeworks.ONEWIRE_SEARCH_ALARMS_REQUEST
ONEWIRE_SEARCH_ALARMS_REPLY = _openframeworks.ONEWIRE_SEARCH_ALARMS_REPLY
ONEWIRE_RESET_REQUEST_BIT = _openframeworks.ONEWIRE_RESET_REQUEST_BIT
ONEWIRE_SKIP_REQUEST_BIT = _openframeworks.ONEWIRE_SKIP_REQUEST_BIT
ONEWIRE_SELECT_REQUEST_BIT = _openframeworks.ONEWIRE_SELECT_REQUEST_BIT
ONEWIRE_READ_REQUEST_BIT = _openframeworks.ONEWIRE_READ_REQUEST_BIT
ONEWIRE_DELAY_REQUEST_BIT = _openframeworks.ONEWIRE_DELAY_REQUEST_BIT
ONEWIRE_WRITE_REQUEST_BIT = _openframeworks.ONEWIRE_WRITE_REQUEST_BIT
ONEWIRE_WITHDATA_REQUEST_BITS = _openframeworks.ONEWIRE_WITHDATA_REQUEST_BITS
ONEWIRE_POWER = _openframeworks.ONEWIRE_POWER
I2C_STOP_TX = _openframeworks.I2C_STOP_TX
I2C_RESTART_TX = _openframeworks.I2C_RESTART_TX
I2C_MAX_QUERIES = _openframeworks.I2C_MAX_QUERIES
I2C_REGISTER_NOT_SPECIFIED = _openframeworks.I2C_REGISTER_NOT_SPECIFIED
MAX_ENCODERS = _openframeworks.MAX_ENCODERS
ENCODER_ATTACH = _openframeworks.ENCODER_ATTACH
ENCODER_REPORT_POSITION = _openframeworks.ENCODER_REPORT_POSITION
ENCODER_REPORT_POSITIONS = _openframeworks.ENCODER_REPORT_POSITIONS
ENCODER_RESET_POSITION = _openframeworks.ENCODER_RESET_POSITION
ENCODER_REPORT_AUTO = _openframeworks.ENCODER_REPORT_AUTO
ENCODER_DETACH = _openframeworks.ENCODER_DETACH
ENCODER_DIRECTION_MASK = _openframeworks.ENCODER_DIRECTION_MASK
ENCODER_CHANNEL_MASK = _openframeworks.ENCODER_CHANNEL_MASK
SERIAL_CONFIG = _openframeworks.SERIAL_CONFIG
SERIAL_WRITE = _openframeworks.SERIAL_WRITE
SERIAL_READ = _openframeworks.SERIAL_READ
SERIAL_REPLY = _openframeworks.SERIAL_REPLY
SERIAL_CLOSE = _openframeworks.SERIAL_CLOSE
SERIAL_FLUSH = _openframeworks.SERIAL_FLUSH
SERIAL_LISTEN = _openframeworks.SERIAL_LISTEN
ARD_TOTAL_PORTS = _openframeworks.ARD_TOTAL_PORTS
ARD_HIGH = _openframeworks.ARD_HIGH
ARD_LOW = _openframeworks.ARD_LOW
ARD_ON = _openframeworks.ARD_ON
ARD_OFF = _openframeworks.ARD_OFF
OF_ARDUINO_DELAY_LENGTH = _openframeworks.OF_ARDUINO_DELAY_LENGTH
class supportedPinTypes(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    inputSupported = _swig_property(_openframeworks.supportedPinTypes_inputSupported_get, _openframeworks.supportedPinTypes_inputSupported_set)
    outputSupported = _swig_property(_openframeworks.supportedPinTypes_outputSupported_get, _openframeworks.supportedPinTypes_outputSupported_set)
    analogSupported = _swig_property(_openframeworks.supportedPinTypes_analogSupported_get, _openframeworks.supportedPinTypes_analogSupported_set)
    pwmSupported = _swig_property(_openframeworks.supportedPinTypes_pwmSupported_get, _openframeworks.supportedPinTypes_pwmSupported_set)
    servoSupported = _swig_property(_openframeworks.supportedPinTypes_servoSupported_get, _openframeworks.supportedPinTypes_servoSupported_set)
    i2cSupported = _swig_property(_openframeworks.supportedPinTypes_i2cSupported_get, _openframeworks.supportedPinTypes_i2cSupported_set)
    serialSupported = _swig_property(_openframeworks.supportedPinTypes_serialSupported_get, _openframeworks.supportedPinTypes_serialSupported_set)
    onewireSupported = _swig_property(_openframeworks.supportedPinTypes_onewireSupported_get, _openframeworks.supportedPinTypes_onewireSupported_set)
    stepperSupported = _swig_property(_openframeworks.supportedPinTypes_stepperSupported_get, _openframeworks.supportedPinTypes_stepperSupported_set)
    encoderSupported = _swig_property(_openframeworks.supportedPinTypes_encoderSupported_get, _openframeworks.supportedPinTypes_encoderSupported_set)

    def __init__(self):
        this = _openframeworks.new_supportedPinTypes()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _openframeworks.delete_supportedPinTypes
    __del__ = lambda self: None
supportedPinTypes_swigregister = _openframeworks.supportedPinTypes_swigregister
supportedPinTypes_swigregister(supportedPinTypes)

MODE_INPUT = _openframeworks.MODE_INPUT
MODE_OUTPUT = _openframeworks.MODE_OUTPUT
MODE_INPUT_PULLUP = _openframeworks.MODE_INPUT_PULLUP
MODE_ANALOG = _openframeworks.MODE_ANALOG
MODE_PWM = _openframeworks.MODE_PWM
MODE_SERVO = _openframeworks.MODE_SERVO
MODE_I2C = _openframeworks.MODE_I2C
MODE_SERIAL = _openframeworks.MODE_SERIAL
MODE_ONEWIRE = _openframeworks.MODE_ONEWIRE
MODE_STEPPER = _openframeworks.MODE_STEPPER
MODE_ENCODER = _openframeworks.MODE_ENCODER
FIRMATA_STEPPER_DRIVER = _openframeworks.FIRMATA_STEPPER_DRIVER
FIRMATA_STEPPER_TWO_WIRE = _openframeworks.FIRMATA_STEPPER_TWO_WIRE
FIRMATA_STEPPER_FOUR_WIRE = _openframeworks.FIRMATA_STEPPER_FOUR_WIRE
FIRMATA_STEPPER_CCW = _openframeworks.FIRMATA_STEPPER_CCW
FIRMATA_STEPPER_CW = _openframeworks.FIRMATA_STEPPER_CW
FIRMATA_I2C_WRITE = _openframeworks.FIRMATA_I2C_WRITE
FIRMATA_I2C_READ = _openframeworks.FIRMATA_I2C_READ
FIRMATA_I2C_CONTINUOUS_READ = _openframeworks.FIRMATA_I2C_CONTINUOUS_READ
FIRMATA_I2C_STOP_READING = _openframeworks.FIRMATA_I2C_STOP_READING
class Firmata_I2C_Data(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    address = _swig_property(_openframeworks.Firmata_I2C_Data_address_get, _openframeworks.Firmata_I2C_Data_address_set)
    reg = _swig_property(_openframeworks.Firmata_I2C_Data_reg_get, _openframeworks.Firmata_I2C_Data_reg_set)
    data = _swig_property(_openframeworks.Firmata_I2C_Data_data_get, _openframeworks.Firmata_I2C_Data_data_set)

    def __init__(self):
        this = _openframeworks.new_Firmata_I2C_Data()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _openframeworks.delete_Firmata_I2C_Data
    __del__ = lambda self: None
Firmata_I2C_Data_swigregister = _openframeworks.Firmata_I2C_Data_swigregister
Firmata_I2C_Data_swigregister(Firmata_I2C_Data)

class Firmata_Encoder_Data(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ID = _swig_property(_openframeworks.Firmata_Encoder_Data_ID_get, _openframeworks.Firmata_Encoder_Data_ID_set)
    direction = _swig_property(_openframeworks.Firmata_Encoder_Data_direction_get, _openframeworks.Firmata_Encoder_Data_direction_set)
    position = _swig_property(_openframeworks.Firmata_Encoder_Data_position_get, _openframeworks.Firmata_Encoder_Data_position_set)

    def __init__(self):
        this = _openframeworks.new_Firmata_Encoder_Data()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _openframeworks.delete_Firmata_Encoder_Data
    __del__ = lambda self: None
Firmata_Encoder_Data_swigregister = _openframeworks.Firmata_Encoder_Data_swigregister
Firmata_Encoder_Data_swigregister(Firmata_Encoder_Data)

class Firmata_Stepper_Data(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    id = _swig_property(_openframeworks.Firmata_Stepper_Data_id_get, _openframeworks.Firmata_Stepper_Data_id_set)
    type = _swig_property(_openframeworks.Firmata_Stepper_Data_type_get, _openframeworks.Firmata_Stepper_Data_type_set)
    data = _swig_property(_openframeworks.Firmata_Stepper_Data_data_get, _openframeworks.Firmata_Stepper_Data_data_set)

    def __init__(self):
        this = _openframeworks.new_Firmata_Stepper_Data()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _openframeworks.delete_Firmata_Stepper_Data
    __del__ = lambda self: None
Firmata_Stepper_Data_swigregister = _openframeworks.Firmata_Stepper_Data_swigregister
Firmata_Stepper_Data_swigregister(Firmata_Stepper_Data)

FIRMATA_SERIAL_READ_CONTINUOUS = _openframeworks.FIRMATA_SERIAL_READ_CONTINUOUS
FIRMATA_SERIAL_STOP_READING = _openframeworks.FIRMATA_SERIAL_STOP_READING
HW_SERIAL0 = _openframeworks.HW_SERIAL0
HW_SERIAL1 = _openframeworks.HW_SERIAL1
HW_SERIAL2 = _openframeworks.HW_SERIAL2
HW_SERIAL3 = _openframeworks.HW_SERIAL3
SW_SERIAL0 = _openframeworks.SW_SERIAL0
SW_SERIAL1 = _openframeworks.SW_SERIAL1
SW_SERIAL2 = _openframeworks.SW_SERIAL2
SW_SERIAL3 = _openframeworks.SW_SERIAL3
class Firmata_Serial_Data(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    portID = _swig_property(_openframeworks.Firmata_Serial_Data_portID_get, _openframeworks.Firmata_Serial_Data_portID_set)
    data = _swig_property(_openframeworks.Firmata_Serial_Data_data_get, _openframeworks.Firmata_Serial_Data_data_set)

    def __init__(self):
        this = _openframeworks.new_Firmata_Serial_Data()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _openframeworks.delete_Firmata_Serial_Data
    __del__ = lambda self: None
Firmata_Serial_Data_swigregister = _openframeworks.Firmata_Serial_Data_swigregister
Firmata_Serial_Data_swigregister(Firmata_Serial_Data)

class ofArduino(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        this = _openframeworks.new_ofArduino()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _openframeworks.delete_ofArduino
    __del__ = lambda self: None

    def connect(self, device, baud=57600):
        return _openframeworks.ofArduino_connect(self, device, baud)

    def isInitialized(self):
        return _openframeworks.ofArduino_isInitialized(self)

    def isArduinoReady(self):
        return _openframeworks.ofArduino_isArduinoReady(self)

    def disconnect(self):
        return _openframeworks.ofArduino_disconnect(self)

    def update(self):
        return _openframeworks.ofArduino_update(self)

    def sendDigitalPinMode(self, pin, mode):
        return _openframeworks.ofArduino_sendDigitalPinMode(self, pin, mode)

    def sendAnalogPinReporting(self, pin, mode):
        return _openframeworks.ofArduino_sendAnalogPinReporting(self, pin, mode)

    def setUseDelay(self, bDelay):
        return _openframeworks.ofArduino_setUseDelay(self, bDelay)

    def setDigitalHistoryLength(self, length):
        return _openframeworks.ofArduino_setDigitalHistoryLength(self, length)

    def setAnalogHistoryLength(self, length):
        return _openframeworks.ofArduino_setAnalogHistoryLength(self, length)

    def setStringHistoryLength(self, length):
        return _openframeworks.ofArduino_setStringHistoryLength(self, length)

    def setSysExHistoryLength(self, nSysEx):
        return _openframeworks.ofArduino_setSysExHistoryLength(self, nSysEx)

    def sendDigital(self, pin, value, force=False):
        return _openframeworks.ofArduino_sendDigital(self, pin, value, force)

    def sendPwm(self, pin, value, force=False):
        return _openframeworks.ofArduino_sendPwm(self, pin, value, force)

    def sendSysEx(self, command, data):
        return _openframeworks.ofArduino_sendSysEx(self, command, data)

    def isAttached(self):
        return _openframeworks.ofArduino_isAttached(self)

    def sendString(self, str):
        return _openframeworks.ofArduino_sendString(self, str)

    def sendProtocolVersionRequest(self):
        return _openframeworks.ofArduino_sendProtocolVersionRequest(self)

    def sendFirmwareVersionRequest(self):
        return _openframeworks.ofArduino_sendFirmwareVersionRequest(self)

    def sendPinCofigurationRequest(self):
        return _openframeworks.ofArduino_sendPinCofigurationRequest(self)

    def sendPinCapabilityRequest(self):
        return _openframeworks.ofArduino_sendPinCapabilityRequest(self)

    def sendAnalogMappingRequest(self):
        return _openframeworks.ofArduino_sendAnalogMappingRequest(self)

    def sendPinStateQuery(self, pin):
        return _openframeworks.ofArduino_sendPinStateQuery(self, pin)

    def sendReset(self):
        return _openframeworks.ofArduino_sendReset(self)

    def sendSysExBegin(self):
        return _openframeworks.ofArduino_sendSysExBegin(self)

    def sendSysExEnd(self):
        return _openframeworks.ofArduino_sendSysExEnd(self)

    def sendByte(self, byte):
        return _openframeworks.ofArduino_sendByte(self, byte)

    def sendValueAsTwo7bitBytes(self, value):
        return _openframeworks.ofArduino_sendValueAsTwo7bitBytes(self, value)

    def getPwm(self, pin):
        return _openframeworks.ofArduino_getPwm(self, pin)

    def getDigital(self, pin):
        return _openframeworks.ofArduino_getDigital(self, pin)

    def getAnalog(self, pin):
        return _openframeworks.ofArduino_getAnalog(self, pin)

    def getSysEx(self):
        return _openframeworks.ofArduino_getSysEx(self)

    def getString(self):
        return _openframeworks.ofArduino_getString(self)

    def getMajorFirmwareVersion(self):
        return _openframeworks.ofArduino_getMajorFirmwareVersion(self)

    def getMinorFirmwareVersion(self):
        return _openframeworks.ofArduino_getMinorFirmwareVersion(self)

    def getFirmwareName(self):
        return _openframeworks.ofArduino_getFirmwareName(self)

    def getDigitalPinMode(self, pin):
        return _openframeworks.ofArduino_getDigitalPinMode(self, pin)

    def getAnalogPinReporting(self, pin):
        return _openframeworks.ofArduino_getAnalogPinReporting(self, pin)

    def getValueFromTwo7bitBytes(self, lsb, msb):
        return _openframeworks.ofArduino_getValueFromTwo7bitBytes(self, lsb, msb)

    def getInvertedValueFromTwo7bitBytes(self, lsb, msb):
        return _openframeworks.ofArduino_getInvertedValueFromTwo7bitBytes(self, lsb, msb)
    EDigitalPinChanged = _swig_property(_openframeworks.ofArduino_EDigitalPinChanged_get, _openframeworks.ofArduino_EDigitalPinChanged_set)
    EAnalogPinChanged = _swig_property(_openframeworks.ofArduino_EAnalogPinChanged_get, _openframeworks.ofArduino_EAnalogPinChanged_set)
    ESysExReceived = _swig_property(_openframeworks.ofArduino_ESysExReceived_get, _openframeworks.ofArduino_ESysExReceived_set)
    EFirmwareVersionReceived = _swig_property(_openframeworks.ofArduino_EFirmwareVersionReceived_get, _openframeworks.ofArduino_EFirmwareVersionReceived_set)
    EInitialized = _swig_property(_openframeworks.ofArduino_EInitialized_get, _openframeworks.ofArduino_EInitialized_set)
    EStringReceived = _swig_property(_openframeworks.ofArduino_EStringReceived_get, _openframeworks.ofArduino_EStringReceived_set)
    EStepperDataReceived = _swig_property(_openframeworks.ofArduino_EStepperDataReceived_get, _openframeworks.ofArduino_EStepperDataReceived_set)
    EI2CDataRecieved = _swig_property(_openframeworks.ofArduino_EI2CDataRecieved_get, _openframeworks.ofArduino_EI2CDataRecieved_set)
    EEncoderDataReceived = _swig_property(_openframeworks.ofArduino_EEncoderDataReceived_get, _openframeworks.ofArduino_EEncoderDataReceived_set)
    ESerialDataReceived = _swig_property(_openframeworks.ofArduino_ESerialDataReceived_get, _openframeworks.ofArduino_ESerialDataReceived_set)
    EPinStateResponseReceived = _swig_property(_openframeworks.ofArduino_EPinStateResponseReceived_get, _openframeworks.ofArduino_EPinStateResponseReceived_set)

    def sendServo(self, pin, value, force=False):
        return _openframeworks.ofArduino_sendServo(self, pin, value, force)

    def sendServoAttach(self, pin, minPulse=544, maxPulse=2400):
        return _openframeworks.ofArduino_sendServoAttach(self, pin, minPulse, maxPulse)

    def getServo(self, pin):
        return _openframeworks.ofArduino_getServo(self, pin)

    def sendStepper2Wire(self, dirPin, stepPin, stepsPerRev=200):
        return _openframeworks.ofArduino_sendStepper2Wire(self, dirPin, stepPin, stepsPerRev)

    def sendStepper4Wire(self, pin1, pin2, pin3, pin4, stepsPerRev=200):
        return _openframeworks.ofArduino_sendStepper4Wire(self, pin1, pin2, pin3, pin4, stepsPerRev)

    def sendStepperMove(self, stepperID, direction, steps, speed=0, acceleration=0, deceleration=0):
        return _openframeworks.ofArduino_sendStepperMove(self, stepperID, direction, steps, speed, acceleration, deceleration)

    def sendI2CConfig(self, delay):
        return _openframeworks.ofArduino_sendI2CConfig(self, delay)

    def isI2CConfigured(self):
        return _openframeworks.ofArduino_isI2CConfigured(self)

    def sendI2CWriteRequest(self, slaveAddress, bytes, numOfBytes, reg=-1):
        return _openframeworks.ofArduino_sendI2CWriteRequest(self, slaveAddress, bytes, numOfBytes, reg)

    def sendI2CReadRequest(self, address, numBytes, reg=-1):
        return _openframeworks.ofArduino_sendI2CReadRequest(self, address, numBytes, reg)

    def sendI2ContinuousReadRequest(self, address, numBytes, reg=-1):
        return _openframeworks.ofArduino_sendI2ContinuousReadRequest(self, address, numBytes, reg)

    def sendOneWireConfig(self, pin, enableParasiticPower):
        return _openframeworks.ofArduino_sendOneWireConfig(self, pin, enableParasiticPower)

    def sendOneWireAlarmsSearch(self, pin):
        return _openframeworks.ofArduino_sendOneWireAlarmsSearch(self, pin)

    def sendOneWireSearch(self, *args):
        return _openframeworks.ofArduino_sendOneWireSearch(self, *args)

    def sendOneWireRead(self, pin, devices, numBytesToRead):
        return _openframeworks.ofArduino_sendOneWireRead(self, pin, devices, numBytesToRead)

    def sendOneWireReset(self, pin):
        return _openframeworks.ofArduino_sendOneWireReset(self, pin)

    def sendOneWireWrite(self, pin, devices, data):
        return _openframeworks.ofArduino_sendOneWireWrite(self, pin, devices, data)

    def sendOneWireDelay(self, pin, delay):
        return _openframeworks.ofArduino_sendOneWireDelay(self, pin, delay)

    def sendOneWireWriteAndRead(self, pin, devices, data, numBytesToRead):
        return _openframeworks.ofArduino_sendOneWireWriteAndRead(self, pin, devices, data, numBytesToRead)

    def sendOneWireRequest(self, pin, subcommand, devices, numBytesToRead, correlationId, delay, dataToWrite):
        return _openframeworks.ofArduino_sendOneWireRequest(self, pin, subcommand, devices, numBytesToRead, correlationId, delay, dataToWrite)

    def attachEncoder(self, pinA, pinB):
        return _openframeworks.ofArduino_attachEncoder(self, pinA, pinB)

    def getEncoderPosition(self, encoderNum):
        return _openframeworks.ofArduino_getEncoderPosition(self, encoderNum)

    def getAllEncoderPositions(self):
        return _openframeworks.ofArduino_getAllEncoderPositions(self)

    def resetEncoderPosition(self, encoderNum):
        return _openframeworks.ofArduino_resetEncoderPosition(self, encoderNum)

    def enableEncoderReporting(self):
        return _openframeworks.ofArduino_enableEncoderReporting(self)

    def disableEncoderReporting(self):
        return _openframeworks.ofArduino_disableEncoderReporting(self)

    def detachEncoder(self, encoderNum):
        return _openframeworks.ofArduino_detachEncoder(self, encoderNum)

    def sendSerialConfig(self, portID, baud, rxPin, txPin):
        return _openframeworks.ofArduino_sendSerialConfig(self, portID, baud, rxPin, txPin)

    def serialWrite(self, port, bytes, numOfBytes):
        return _openframeworks.ofArduino_serialWrite(self, port, bytes, numOfBytes)

    def serialRead(self, port, maxBytesToRead):
        return _openframeworks.ofArduino_serialRead(self, port, maxBytesToRead)

    def serialStop(self, portID):
        return _openframeworks.ofArduino_serialStop(self, portID)

    def serialClose(self, portID):
        return _openframeworks.ofArduino_serialClose(self, portID)

    def serialFlush(self, portID):
        return _openframeworks.ofArduino_serialFlush(self, portID)

    def serialListen(self, portID):
        return _openframeworks.ofArduino_serialListen(self, portID)

    def getPinCapabilities(self):
        return _openframeworks.ofArduino_getPinCapabilities(self)

    def getTotalPins(self):
        return _openframeworks.ofArduino_getTotalPins(self)

    def getNumAnalogPins(self):
        return _openframeworks.ofArduino_getNumAnalogPins(self)
ofArduino_swigregister = _openframeworks.ofArduino_swigregister
ofArduino_swigregister(ofArduino)

OF_SERIAL_NO_DATA = _openframeworks.OF_SERIAL_NO_DATA
OF_SERIAL_ERROR = _openframeworks.OF_SERIAL_ERROR
class ofSerialDeviceInfo(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openframeworks.new_ofSerialDeviceInfo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getDevicePath(self):
        return _openframeworks.ofSerialDeviceInfo_getDevicePath(self)

    def getDeviceName(self):
        return _openframeworks.ofSerialDeviceInfo_getDeviceName(self)

    def getDeviceID(self):
        return _openframeworks.ofSerialDeviceInfo_getDeviceID(self)
    __swig_destroy__ = _openframeworks.delete_ofSerialDeviceInfo
    __del__ = lambda self: None
ofSerialDeviceInfo_swigregister = _openframeworks.ofSerialDeviceInfo_swigregister
ofSerialDeviceInfo_swigregister(ofSerialDeviceInfo)

class ofSerial(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        this = _openframeworks.new_ofSerial()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _openframeworks.delete_ofSerial
    __del__ = lambda self: None

    def listDevices(self):
        return _openframeworks.ofSerial_listDevices(self)

    def getDeviceList(self):
        return _openframeworks.ofSerial_getDeviceList(self)

    def setup(self, *args):
        return _openframeworks.ofSerial_setup(self, *args)

    def isInitialized(self):
        return _openframeworks.ofSerial_isInitialized(self)

    def close(self):
        return _openframeworks.ofSerial_close(self)

    def available(self):
        return _openframeworks.ofSerial_available(self)

    def readBytes(self, *args):
        return _openframeworks.ofSerial_readBytes(self, *args)

    def readByte(self):
        return _openframeworks.ofSerial_readByte(self)

    def writeBytes(self, *args):
        return _openframeworks.ofSerial_writeBytes(self, *args)

    def writeByte(self, *args):
        return _openframeworks.ofSerial_writeByte(self, *args)

    def flush(self, flushIn=True, flushOut=True):
        return _openframeworks.ofSerial_flush(self, flushIn, flushOut)

    def drain(self):
        return _openframeworks.ofSerial_drain(self)
ofSerial_swigregister = _openframeworks.ofSerial_swigregister
ofSerial_swigregister(ofSerial)


def ofRandom(*args):
    return _openframeworks.ofRandom(*args)
ofRandom = _openframeworks.ofRandom

def ofRandomf():
    return _openframeworks.ofRandomf()
ofRandomf = _openframeworks.ofRandomf

def ofRandomuf():
    return _openframeworks.ofRandomuf()
ofRandomuf = _openframeworks.ofRandomuf

def ofSeedRandom(*args):
    return _openframeworks.ofSeedRandom(*args)
ofSeedRandom = _openframeworks.ofSeedRandom

def ofNormalize(value, min, max):
    return _openframeworks.ofNormalize(value, min, max)
ofNormalize = _openframeworks.ofNormalize

def ofMap(value, inputMin, inputMax, outputMin, outputMax, clamp=False):
    return _openframeworks.ofMap(value, inputMin, inputMax, outputMin, outputMax, clamp)
ofMap = _openframeworks.ofMap

def ofClamp(value, min, max):
    return _openframeworks.ofClamp(value, min, max)
ofClamp = _openframeworks.ofClamp

def ofInRange(t, min, max):
    return _openframeworks.ofInRange(t, min, max)
ofInRange = _openframeworks.ofInRange

def ofLerp(start, stop, amt):
    return _openframeworks.ofLerp(start, stop, amt)
ofLerp = _openframeworks.ofLerp

def ofDist(*args):
    return _openframeworks.ofDist(*args)
ofDist = _openframeworks.ofDist

def ofDistSquared(*args):
    return _openframeworks.ofDistSquared(*args)
ofDistSquared = _openframeworks.ofDistSquared

def ofRadToDeg(radians):
    return _openframeworks.ofRadToDeg(radians)
ofRadToDeg = _openframeworks.ofRadToDeg

def ofDegToRad(degrees):
    return _openframeworks.ofDegToRad(degrees)
ofDegToRad = _openframeworks.ofDegToRad

def ofLerpDegrees(currentAngle, targetAngle, pct):
    return _openframeworks.ofLerpDegrees(currentAngle, targetAngle, pct)
ofLerpDegrees = _openframeworks.ofLerpDegrees

def ofLerpRadians(currentAngle, targetAngle, pct):
    return _openframeworks.ofLerpRadians(currentAngle, targetAngle, pct)
ofLerpRadians = _openframeworks.ofLerpRadians

def ofAngleDifferenceDegrees(currentAngle, targetAngle):
    return _openframeworks.ofAngleDifferenceDegrees(currentAngle, targetAngle)
ofAngleDifferenceDegrees = _openframeworks.ofAngleDifferenceDegrees

def ofAngleDifferenceRadians(currentAngle, targetAngle):
    return _openframeworks.ofAngleDifferenceRadians(currentAngle, targetAngle)
ofAngleDifferenceRadians = _openframeworks.ofAngleDifferenceRadians

def ofWrap(value, arg2, to):
    return _openframeworks.ofWrap(value, arg2, to)
ofWrap = _openframeworks.ofWrap

def ofWrapRadians(*args):
    return _openframeworks.ofWrapRadians(*args)
ofWrapRadians = _openframeworks.ofWrapRadians

def ofWrapDegrees(angle, arg2=-180, to=+180):
    return _openframeworks.ofWrapDegrees(angle, arg2, to)
ofWrapDegrees = _openframeworks.ofWrapDegrees

def ofNoise(*args):
    return _openframeworks.ofNoise(*args)
ofNoise = _openframeworks.ofNoise

def ofSignedNoise(*args):
    return _openframeworks.ofSignedNoise(*args)
ofSignedNoise = _openframeworks.ofSignedNoise

def ofNextPow2(a):
    return _openframeworks.ofNextPow2(a)
ofNextPow2 = _openframeworks.ofNextPow2

def ofSign(n):
    return _openframeworks.ofSign(n)
ofSign = _openframeworks.ofSign
class ofMatrix3x3(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    a = _swig_property(_openframeworks.ofMatrix3x3_a_get, _openframeworks.ofMatrix3x3_a_set)
    b = _swig_property(_openframeworks.ofMatrix3x3_b_get, _openframeworks.ofMatrix3x3_b_set)
    c = _swig_property(_openframeworks.ofMatrix3x3_c_get, _openframeworks.ofMatrix3x3_c_set)
    d = _swig_property(_openframeworks.ofMatrix3x3_d_get, _openframeworks.ofMatrix3x3_d_set)
    e = _swig_property(_openframeworks.ofMatrix3x3_e_get, _openframeworks.ofMatrix3x3_e_set)
    f = _swig_property(_openframeworks.ofMatrix3x3_f_get, _openframeworks.ofMatrix3x3_f_set)
    g = _swig_property(_openframeworks.ofMatrix3x3_g_get, _openframeworks.ofMatrix3x3_g_set)
    h = _swig_property(_openframeworks.ofMatrix3x3_h_get, _openframeworks.ofMatrix3x3_h_set)
    i = _swig_property(_openframeworks.ofMatrix3x3_i_get, _openframeworks.ofMatrix3x3_i_set)

    def __init__(self, *args):
        this = _openframeworks.new_ofMatrix3x3(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set(self, _a, _b, _c, _d, _e, _f, _g, _h, _i):
        return _openframeworks.ofMatrix3x3_set(self, _a, _b, _c, _d, _e, _f, _g, _h, _i)

    def __getitem__(self, index):
        return _openframeworks.ofMatrix3x3___getitem__(self, index)

    def transpose(self, *args):
        return _openframeworks.ofMatrix3x3_transpose(self, *args)

    def determinant(self, *args):
        return _openframeworks.ofMatrix3x3_determinant(self, *args)

    def inverse(self, A):
        return _openframeworks.ofMatrix3x3_inverse(self, A)

    def invert(self):
        return _openframeworks.ofMatrix3x3_invert(self)

    def entrywiseTimes(self, A):
        return _openframeworks.ofMatrix3x3_entrywiseTimes(self, A)

    def __add__(self, B):
        return _openframeworks.ofMatrix3x3___add__(self, B)

    def __iadd__(self, B):
        return _openframeworks.ofMatrix3x3___iadd__(self, B)

    def __sub__(self, B):
        return _openframeworks.ofMatrix3x3___sub__(self, B)

    def __isub__(self, B):
        return _openframeworks.ofMatrix3x3___isub__(self, B)

    def __imul__(self, *args):
        return _openframeworks.ofMatrix3x3___imul__(self, *args)

    def __mul__(self, *args):
        return _openframeworks.ofMatrix3x3___mul__(self, *args)

    def __truediv__(self, *args):
        return _openframeworks.ofMatrix3x3___div__(self, *args)
    __div__ = __truediv__



    def __itruediv__(self, *args):
        return _openframeworks.ofMatrix3x3___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __str__(self):
        return _openframeworks.ofMatrix3x3___str__(self)
    __swig_destroy__ = _openframeworks.delete_ofMatrix3x3
    __del__ = lambda self: None
ofMatrix3x3_swigregister = _openframeworks.ofMatrix3x3_swigregister
ofMatrix3x3_swigregister(ofMatrix3x3)

class ofMatrix4x4(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _mat = _swig_property(_openframeworks.ofMatrix4x4__mat_get, _openframeworks.ofMatrix4x4__mat_set)

    def __init__(self, *args):
        this = _openframeworks.new_ofMatrix4x4(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _openframeworks.delete_ofMatrix4x4
    __del__ = lambda self: None

    def makeIdentityMatrix(self):
        return _openframeworks.ofMatrix4x4_makeIdentityMatrix(self)

    def makeScaleMatrix(self, *args):
        return _openframeworks.ofMatrix4x4_makeScaleMatrix(self, *args)

    def makeTranslationMatrix(self, *args):
        return _openframeworks.ofMatrix4x4_makeTranslationMatrix(self, *args)

    def makeRotationMatrix(self, *args):
        return _openframeworks.ofMatrix4x4_makeRotationMatrix(self, *args)

    def makeInvertOf(self, rhs):
        return _openframeworks.ofMatrix4x4_makeInvertOf(self, rhs)

    def makeOrthoNormalOf(self, rhs):
        return _openframeworks.ofMatrix4x4_makeOrthoNormalOf(self, rhs)

    def makeFromMultiplicationOf(self, arg2, arg3):
        return _openframeworks.ofMatrix4x4_makeFromMultiplicationOf(self, arg2, arg3)

    def makeOrthoMatrix(self, left, right, bottom, top, zNear, zFar):
        return _openframeworks.ofMatrix4x4_makeOrthoMatrix(self, left, right, bottom, top, zNear, zFar)

    def makeOrtho2DMatrix(self, left, right, bottom, top):
        return _openframeworks.ofMatrix4x4_makeOrtho2DMatrix(self, left, right, bottom, top)

    def makeFrustumMatrix(self, left, right, bottom, top, zNear, zFar):
        return _openframeworks.ofMatrix4x4_makeFrustumMatrix(self, left, right, bottom, top, zNear, zFar)

    def makePerspectiveMatrix(self, fovy, aspectRatio, zNear, zFar):
        return _openframeworks.ofMatrix4x4_makePerspectiveMatrix(self, fovy, aspectRatio, zNear, zFar)

    def makeLookAtMatrix(self, eye, center, up):
        return _openframeworks.ofMatrix4x4_makeLookAtMatrix(self, eye, center, up)

    def makeLookAtViewMatrix(self, eye, center, up):
        return _openframeworks.ofMatrix4x4_makeLookAtViewMatrix(self, eye, center, up)
    newIdentityMatrix = staticmethod(_openframeworks.ofMatrix4x4_newIdentityMatrix)
    newScaleMatrix = staticmethod(_openframeworks.ofMatrix4x4_newScaleMatrix)
    newTranslationMatrix = staticmethod(_openframeworks.ofMatrix4x4_newTranslationMatrix)
    newRotationMatrix = staticmethod(_openframeworks.ofMatrix4x4_newRotationMatrix)
    newOrthoMatrix = staticmethod(_openframeworks.ofMatrix4x4_newOrthoMatrix)
    newOrtho2DMatrix = staticmethod(_openframeworks.ofMatrix4x4_newOrtho2DMatrix)
    newFrustumMatrix = staticmethod(_openframeworks.ofMatrix4x4_newFrustumMatrix)
    newPerspectiveMatrix = staticmethod(_openframeworks.ofMatrix4x4_newPerspectiveMatrix)
    newLookAtMatrix = staticmethod(_openframeworks.ofMatrix4x4_newLookAtMatrix)

    def __call__(self, row, col):
        return _openframeworks.ofMatrix4x4___call__(self, row, col)

    def getRowAsVec3f(self, i):
        return _openframeworks.ofMatrix4x4_getRowAsVec3f(self, i)

    def getRowAsVec4f(self, i):
        return _openframeworks.ofMatrix4x4_getRowAsVec4f(self, i)

    def getPtr(self, *args):
        return _openframeworks.ofMatrix4x4_getPtr(self, *args)

    def isValid(self):
        return _openframeworks.ofMatrix4x4_isValid(self)

    def isNaN(self):
        return _openframeworks.ofMatrix4x4_isNaN(self)

    def isIdentity(self):
        return _openframeworks.ofMatrix4x4_isIdentity(self)

    def set(self, *args):
        return _openframeworks.ofMatrix4x4_set(self, *args)

    def getInverse(self):
        return _openframeworks.ofMatrix4x4_getInverse(self)

    def getOrtho(self, left, right, bottom, top, zNear, zFar):
        return _openframeworks.ofMatrix4x4_getOrtho(self, left, right, bottom, top, zNear, zFar)

    def getFrustum(self, left, right, bottom, top, zNear, zFar):
        return _openframeworks.ofMatrix4x4_getFrustum(self, left, right, bottom, top, zNear, zFar)

    def getPerspective(self, fovy, aspectRatio, zNear, zFar):
        return _openframeworks.ofMatrix4x4_getPerspective(self, fovy, aspectRatio, zNear, zFar)

    def getLookAt(self, eye, center, up, lookDistance=1.0):
        return _openframeworks.ofMatrix4x4_getLookAt(self, eye, center, up, lookDistance)

    def decompose(self, translation, rotation, scale, so):
        return _openframeworks.ofMatrix4x4_decompose(self, translation, rotation, scale, so)
    getInverseOf = staticmethod(_openframeworks.ofMatrix4x4_getInverseOf)
    getTransposedOf = staticmethod(_openframeworks.ofMatrix4x4_getTransposedOf)
    getOrthoNormalOf = staticmethod(_openframeworks.ofMatrix4x4_getOrthoNormalOf)

    def postMult(self, *args):
        return _openframeworks.ofMatrix4x4_postMult(self, *args)

    def preMult(self, *args):
        return _openframeworks.ofMatrix4x4_preMult(self, *args)

    def __imul__(self, other):
        return _openframeworks.ofMatrix4x4___imul__(self, other)

    def __mul__(self, *args):
        return _openframeworks.ofMatrix4x4___mul__(self, *args)

    def postMultTranslate(self, *args):
        return _openframeworks.ofMatrix4x4_postMultTranslate(self, *args)

    def postMultRotate(self, *args):
        return _openframeworks.ofMatrix4x4_postMultRotate(self, *args)

    def postMultScale(self, *args):
        return _openframeworks.ofMatrix4x4_postMultScale(self, *args)

    def preMultScale(self, v):
        return _openframeworks.ofMatrix4x4_preMultScale(self, v)

    def preMultTranslate(self, v):
        return _openframeworks.ofMatrix4x4_preMultTranslate(self, v)

    def preMultRotate(self, q):
        return _openframeworks.ofMatrix4x4_preMultRotate(self, q)

    def setRotate(self, q):
        return _openframeworks.ofMatrix4x4_setRotate(self, q)

    def setTranslation(self, *args):
        return _openframeworks.ofMatrix4x4_setTranslation(self, *args)

    def rotateRad(self, angle, x, y, z):
        return _openframeworks.ofMatrix4x4_rotateRad(self, angle, x, y, z)

    def rotate(self, *args):
        return _openframeworks.ofMatrix4x4_rotate(self, *args)

    def translate(self, *args):
        return _openframeworks.ofMatrix4x4_translate(self, *args)

    def scale(self, *args):
        return _openframeworks.ofMatrix4x4_scale(self, *args)

    def glRotateRad(self, angle, x, y, z):
        return _openframeworks.ofMatrix4x4_glRotateRad(self, angle, x, y, z)

    def glRotate(self, *args):
        return _openframeworks.ofMatrix4x4_glRotate(self, *args)

    def glTranslate(self, *args):
        return _openframeworks.ofMatrix4x4_glTranslate(self, *args)

    def glScale(self, *args):
        return _openframeworks.ofMatrix4x4_glScale(self, *args)

    def getRotate(self):
        return _openframeworks.ofMatrix4x4_getRotate(self)

    def getTranslation(self):
        return _openframeworks.ofMatrix4x4_getTranslation(self)

    def getScale(self):
        return _openframeworks.ofMatrix4x4_getScale(self)
    transform3x3 = staticmethod(_openframeworks.ofMatrix4x4_transform3x3)

    def __str__(self):
        return _openframeworks.ofMatrix4x4___str__(self)
ofMatrix4x4_swigregister = _openframeworks.ofMatrix4x4_swigregister
ofMatrix4x4_swigregister(ofMatrix4x4)

def ofMatrix4x4_newIdentityMatrix():
    return _openframeworks.ofMatrix4x4_newIdentityMatrix()
ofMatrix4x4_newIdentityMatrix = _openframeworks.ofMatrix4x4_newIdentityMatrix

def ofMatrix4x4_newScaleMatrix(*args):
    return _openframeworks.ofMatrix4x4_newScaleMatrix(*args)
ofMatrix4x4_newScaleMatrix = _openframeworks.ofMatrix4x4_newScaleMatrix

def ofMatrix4x4_newTranslationMatrix(*args):
    return _openframeworks.ofMatrix4x4_newTranslationMatrix(*args)
ofMatrix4x4_newTranslationMatrix = _openframeworks.ofMatrix4x4_newTranslationMatrix

def ofMatrix4x4_newRotationMatrix(*args):
    return _openframeworks.ofMatrix4x4_newRotationMatrix(*args)
ofMatrix4x4_newRotationMatrix = _openframeworks.ofMatrix4x4_newRotationMatrix

def ofMatrix4x4_newOrthoMatrix(left, right, bottom, top, zNear, zFar):
    return _openframeworks.ofMatrix4x4_newOrthoMatrix(left, right, bottom, top, zNear, zFar)
ofMatrix4x4_newOrthoMatrix = _openframeworks.ofMatrix4x4_newOrthoMatrix

def ofMatrix4x4_newOrtho2DMatrix(left, right, bottom, top):
    return _openframeworks.ofMatrix4x4_newOrtho2DMatrix(left, right, bottom, top)
ofMatrix4x4_newOrtho2DMatrix = _openframeworks.ofMatrix4x4_newOrtho2DMatrix

def ofMatrix4x4_newFrustumMatrix(left, right, bottom, top, zNear, zFar):
    return _openframeworks.ofMatrix4x4_newFrustumMatrix(left, right, bottom, top, zNear, zFar)
ofMatrix4x4_newFrustumMatrix = _openframeworks.ofMatrix4x4_newFrustumMatrix

def ofMatrix4x4_newPerspectiveMatrix(fovy, aspectRatio, zNear, zFar):
    return _openframeworks.ofMatrix4x4_newPerspectiveMatrix(fovy, aspectRatio, zNear, zFar)
ofMatrix4x4_newPerspectiveMatrix = _openframeworks.ofMatrix4x4_newPerspectiveMatrix

def ofMatrix4x4_newLookAtMatrix(eye, center, up):
    return _openframeworks.ofMatrix4x4_newLookAtMatrix(eye, center, up)
ofMatrix4x4_newLookAtMatrix = _openframeworks.ofMatrix4x4_newLookAtMatrix

def ofMatrix4x4_getInverseOf(matrix):
    return _openframeworks.ofMatrix4x4_getInverseOf(matrix)
ofMatrix4x4_getInverseOf = _openframeworks.ofMatrix4x4_getInverseOf

def ofMatrix4x4_getTransposedOf(matrix):
    return _openframeworks.ofMatrix4x4_getTransposedOf(matrix)
ofMatrix4x4_getTransposedOf = _openframeworks.ofMatrix4x4_getTransposedOf

def ofMatrix4x4_getOrthoNormalOf(matrix):
    return _openframeworks.ofMatrix4x4_getOrthoNormalOf(matrix)
ofMatrix4x4_getOrthoNormalOf = _openframeworks.ofMatrix4x4_getOrthoNormalOf

def ofMatrix4x4_transform3x3(*args):
    return _openframeworks.ofMatrix4x4_transform3x3(*args)
ofMatrix4x4_transform3x3 = _openframeworks.ofMatrix4x4_transform3x3

class ofQuaternion(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _v = _swig_property(_openframeworks.ofQuaternion__v_get, _openframeworks.ofQuaternion__v_set)

    def __init__(self, *args):
        this = _openframeworks.new_ofQuaternion(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set(self, *args):
        return _openframeworks.ofQuaternion_set(self, *args)

    def __getitem__(self, *args):
        return _openframeworks.ofQuaternion___getitem__(self, *args)

    def get(self, matrix):
        return _openframeworks.ofQuaternion_get(self, matrix)

    def x(self):
        return _openframeworks.ofQuaternion_x(self)

    def y(self):
        return _openframeworks.ofQuaternion_y(self)

    def z(self):
        return _openframeworks.ofQuaternion_z(self)

    def w(self):
        return _openframeworks.ofQuaternion_w(self)

    def asVec4(self):
        return _openframeworks.ofQuaternion_asVec4(self)

    def asVec3(self):
        return _openframeworks.ofQuaternion_asVec3(self)

    def zeroRotation(self):
        return _openframeworks.ofQuaternion_zeroRotation(self)

    def length(self):
        return _openframeworks.ofQuaternion_length(self)

    def length2(self):
        return _openframeworks.ofQuaternion_length2(self)

    def conj(self):
        return _openframeworks.ofQuaternion_conj(self)

    def inverse(self):
        return _openframeworks.ofQuaternion_inverse(self)

    def makeRotate(self, *args):
        return _openframeworks.ofQuaternion_makeRotate(self, *args)

    def makeRotate_original(self, vec1, vec2):
        return _openframeworks.ofQuaternion_makeRotate_original(self, vec1, vec2)

    def getRotate(self, *args):
        return _openframeworks.ofQuaternion_getRotate(self, *args)

    def getEuler(self):
        return _openframeworks.ofQuaternion_getEuler(self)

    def slerp(self, t, arg3, to):
        return _openframeworks.ofQuaternion_slerp(self, t, arg3, to)

    def normalize(self):
        return _openframeworks.ofQuaternion_normalize(self)

    def __eq__(self, q):
        return _openframeworks.ofQuaternion___eq__(self, q)

    def __ne__(self, q):
        return _openframeworks.ofQuaternion___ne__(self, q)

    def __mul__(self, *args):
        return _openframeworks.ofQuaternion___mul__(self, *args)

    def __imul__(self, *args):
        return _openframeworks.ofQuaternion___imul__(self, *args)

    def __truediv__(self, *args):
        return _openframeworks.ofQuaternion___div__(self, *args)
    __div__ = __truediv__



    def __itruediv__(self, *args):
        return _openframeworks.ofQuaternion___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __add__(self, rhs):
        return _openframeworks.ofQuaternion___add__(self, rhs)

    def __iadd__(self, rhs):
        return _openframeworks.ofQuaternion___iadd__(self, rhs)

    def __isub__(self, rhs):
        return _openframeworks.ofQuaternion___isub__(self, rhs)

    def __sub__(self, rhs):
        return _openframeworks.ofQuaternion___sub__(self, rhs)

    def __neg__(self):
        return _openframeworks.ofQuaternion___neg__(self)

    def __str__(self):
        return _openframeworks.ofQuaternion___str__(self)
    __swig_destroy__ = _openframeworks.delete_ofQuaternion
    __del__ = lambda self: None
ofQuaternion_swigregister = _openframeworks.ofQuaternion_swigregister
ofQuaternion_swigregister(ofQuaternion)

class ofVec2f(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    DIM = _openframeworks.ofVec2f_DIM
    x = _swig_property(_openframeworks.ofVec2f_x_get, _openframeworks.ofVec2f_x_set)
    y = _swig_property(_openframeworks.ofVec2f_y_get, _openframeworks.ofVec2f_y_set)

    def __init__(self, *args):
        this = _openframeworks.new_ofVec2f(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getPtr(self, *args):
        return _openframeworks.ofVec2f_getPtr(self, *args)

    def __getitem__(self, *args):
        return _openframeworks.ofVec2f___getitem__(self, *args)

    def set(self, *args):
        return _openframeworks.ofVec2f_set(self, *args)

    def __eq__(self, vec):
        return _openframeworks.ofVec2f___eq__(self, vec)

    def __ne__(self, vec):
        return _openframeworks.ofVec2f___ne__(self, vec)

    def match(self, vec, tolerance=0.0001):
        return _openframeworks.ofVec2f_match(self, vec, tolerance)

    def isAligned(self, vec, tolerance=0.0001):
        return _openframeworks.ofVec2f_isAligned(self, vec, tolerance)

    def isAlignedRad(self, vec, tolerance=0.0001):
        return _openframeworks.ofVec2f_isAlignedRad(self, vec, tolerance)

    def align(self, vec, tolerance=0.0001):
        return _openframeworks.ofVec2f_align(self, vec, tolerance)

    def alignRad(self, vec, tolerance=0.0001):
        return _openframeworks.ofVec2f_alignRad(self, vec, tolerance)

    def __add__(self, *args):
        return _openframeworks.ofVec2f___add__(self, *args)

    def __iadd__(self, *args):
        return _openframeworks.ofVec2f___iadd__(self, *args)

    def __sub__(self, *args):
        return _openframeworks.ofVec2f___sub__(self, *args)

    def __neg__(self):
        return _openframeworks.ofVec2f___neg__(self)

    def __isub__(self, *args):
        return _openframeworks.ofVec2f___isub__(self, *args)

    def __mul__(self, *args):
        return _openframeworks.ofVec2f___mul__(self, *args)

    def __imul__(self, *args):
        return _openframeworks.ofVec2f___imul__(self, *args)

    def __truediv__(self, *args):
        return _openframeworks.ofVec2f___div__(self, *args)
    __div__ = __truediv__



    def __itruediv__(self, *args):
        return _openframeworks.ofVec2f___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def getScaled(self, length):
        return _openframeworks.ofVec2f_getScaled(self, length)

    def scale(self, length):
        return _openframeworks.ofVec2f_scale(self, length)

    def getRotated(self, *args):
        return _openframeworks.ofVec2f_getRotated(self, *args)

    def getRotatedRad(self, *args):
        return _openframeworks.ofVec2f_getRotatedRad(self, *args)

    def rotate(self, *args):
        return _openframeworks.ofVec2f_rotate(self, *args)

    def rotateRad(self, *args):
        return _openframeworks.ofVec2f_rotateRad(self, *args)

    def getMapped(self, origin, vx, vy):
        return _openframeworks.ofVec2f_getMapped(self, origin, vx, vy)

    def map(self, origin, vx, vy):
        return _openframeworks.ofVec2f_map(self, origin, vx, vy)

    def distance(self, pnt):
        return _openframeworks.ofVec2f_distance(self, pnt)

    def squareDistance(self, pnt):
        return _openframeworks.ofVec2f_squareDistance(self, pnt)

    def getInterpolated(self, pnt, p):
        return _openframeworks.ofVec2f_getInterpolated(self, pnt, p)

    def interpolate(self, pnt, p):
        return _openframeworks.ofVec2f_interpolate(self, pnt, p)

    def getMiddle(self, pnt):
        return _openframeworks.ofVec2f_getMiddle(self, pnt)

    def middle(self, pnt):
        return _openframeworks.ofVec2f_middle(self, pnt)

    def average(self, points, num):
        return _openframeworks.ofVec2f_average(self, points, num)

    def getNormalized(self):
        return _openframeworks.ofVec2f_getNormalized(self)

    def normalize(self):
        return _openframeworks.ofVec2f_normalize(self)

    def getLimited(self, max):
        return _openframeworks.ofVec2f_getLimited(self, max)

    def limit(self, max):
        return _openframeworks.ofVec2f_limit(self, max)

    def length(self):
        return _openframeworks.ofVec2f_length(self)

    def lengthSquared(self):
        return _openframeworks.ofVec2f_lengthSquared(self)

    def angle(self, vec):
        return _openframeworks.ofVec2f_angle(self, vec)

    def angleRad(self, vec):
        return _openframeworks.ofVec2f_angleRad(self, vec)

    def getPerpendicular(self):
        return _openframeworks.ofVec2f_getPerpendicular(self)

    def perpendicular(self):
        return _openframeworks.ofVec2f_perpendicular(self)

    def dot(self, vec):
        return _openframeworks.ofVec2f_dot(self, vec)
    zero = staticmethod(_openframeworks.ofVec2f_zero)
    one = staticmethod(_openframeworks.ofVec2f_one)

    def __str__(self):
        return _openframeworks.ofVec2f___str__(self)
    __swig_destroy__ = _openframeworks.delete_ofVec2f
    __del__ = lambda self: None
ofVec2f_swigregister = _openframeworks.ofVec2f_swigregister
ofVec2f_swigregister(ofVec2f)

def ofVec2f_zero():
    return _openframeworks.ofVec2f_zero()
ofVec2f_zero = _openframeworks.ofVec2f_zero

def ofVec2f_one():
    return _openframeworks.ofVec2f_one()
ofVec2f_one = _openframeworks.ofVec2f_one

class ofVec3f(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    DIM = _openframeworks.ofVec3f_DIM
    x = _swig_property(_openframeworks.ofVec3f_x_get, _openframeworks.ofVec3f_x_set)
    y = _swig_property(_openframeworks.ofVec3f_y_get, _openframeworks.ofVec3f_y_set)
    z = _swig_property(_openframeworks.ofVec3f_z_get, _openframeworks.ofVec3f_z_set)

    def __init__(self, *args):
        this = _openframeworks.new_ofVec3f(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getPtr(self, *args):
        return _openframeworks.ofVec3f_getPtr(self, *args)

    def __getitem__(self, *args):
        return _openframeworks.ofVec3f___getitem__(self, *args)

    def set(self, *args):
        return _openframeworks.ofVec3f_set(self, *args)

    def __eq__(self, vec):
        return _openframeworks.ofVec3f___eq__(self, vec)

    def __ne__(self, vec):
        return _openframeworks.ofVec3f___ne__(self, vec)

    def match(self, vec, tolerance=0.0001):
        return _openframeworks.ofVec3f_match(self, vec, tolerance)

    def isAligned(self, vec, tolerance=0.0001):
        return _openframeworks.ofVec3f_isAligned(self, vec, tolerance)

    def isAlignedRad(self, vec, tolerance=0.0001):
        return _openframeworks.ofVec3f_isAlignedRad(self, vec, tolerance)

    def align(self, vec, tolerance=0.0001):
        return _openframeworks.ofVec3f_align(self, vec, tolerance)

    def alignRad(self, vec, tolerance=0.0001):
        return _openframeworks.ofVec3f_alignRad(self, vec, tolerance)

    def __add__(self, *args):
        return _openframeworks.ofVec3f___add__(self, *args)

    def __iadd__(self, *args):
        return _openframeworks.ofVec3f___iadd__(self, *args)

    def __sub__(self, *args):
        return _openframeworks.ofVec3f___sub__(self, *args)

    def __neg__(self):
        return _openframeworks.ofVec3f___neg__(self)

    def __isub__(self, *args):
        return _openframeworks.ofVec3f___isub__(self, *args)

    def __mul__(self, *args):
        return _openframeworks.ofVec3f___mul__(self, *args)

    def __imul__(self, *args):
        return _openframeworks.ofVec3f___imul__(self, *args)

    def __truediv__(self, *args):
        return _openframeworks.ofVec3f___div__(self, *args)
    __div__ = __truediv__



    def __itruediv__(self, *args):
        return _openframeworks.ofVec3f___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def getScaled(self, length):
        return _openframeworks.ofVec3f_getScaled(self, length)

    def scale(self, length):
        return _openframeworks.ofVec3f_scale(self, length)

    def getRotated(self, *args):
        return _openframeworks.ofVec3f_getRotated(self, *args)

    def getRotatedRad(self, *args):
        return _openframeworks.ofVec3f_getRotatedRad(self, *args)

    def rotate(self, *args):
        return _openframeworks.ofVec3f_rotate(self, *args)

    def rotateRad(self, *args):
        return _openframeworks.ofVec3f_rotateRad(self, *args)

    def getMapped(self, origin, vx, vy, vz):
        return _openframeworks.ofVec3f_getMapped(self, origin, vx, vy, vz)

    def map(self, origin, vx, vy, vz):
        return _openframeworks.ofVec3f_map(self, origin, vx, vy, vz)

    def distance(self, pnt):
        return _openframeworks.ofVec3f_distance(self, pnt)

    def squareDistance(self, pnt):
        return _openframeworks.ofVec3f_squareDistance(self, pnt)

    def getInterpolated(self, pnt, p):
        return _openframeworks.ofVec3f_getInterpolated(self, pnt, p)

    def interpolate(self, pnt, p):
        return _openframeworks.ofVec3f_interpolate(self, pnt, p)

    def getMiddle(self, pnt):
        return _openframeworks.ofVec3f_getMiddle(self, pnt)

    def middle(self, pnt):
        return _openframeworks.ofVec3f_middle(self, pnt)

    def average(self, points, num):
        return _openframeworks.ofVec3f_average(self, points, num)

    def getNormalized(self):
        return _openframeworks.ofVec3f_getNormalized(self)

    def normalize(self):
        return _openframeworks.ofVec3f_normalize(self)

    def getLimited(self, max):
        return _openframeworks.ofVec3f_getLimited(self, max)

    def limit(self, max):
        return _openframeworks.ofVec3f_limit(self, max)

    def length(self):
        return _openframeworks.ofVec3f_length(self)

    def lengthSquared(self):
        return _openframeworks.ofVec3f_lengthSquared(self)

    def angle(self, vec):
        return _openframeworks.ofVec3f_angle(self, vec)

    def angleRad(self, vec):
        return _openframeworks.ofVec3f_angleRad(self, vec)

    def getPerpendicular(self, vec):
        return _openframeworks.ofVec3f_getPerpendicular(self, vec)

    def perpendicular(self, vec):
        return _openframeworks.ofVec3f_perpendicular(self, vec)

    def getCrossed(self, vec):
        return _openframeworks.ofVec3f_getCrossed(self, vec)

    def cross(self, vec):
        return _openframeworks.ofVec3f_cross(self, vec)

    def dot(self, vec):
        return _openframeworks.ofVec3f_dot(self, vec)
    zero = staticmethod(_openframeworks.ofVec3f_zero)
    one = staticmethod(_openframeworks.ofVec3f_one)

    def __str__(self):
        return _openframeworks.ofVec3f___str__(self)
    __swig_destroy__ = _openframeworks.delete_ofVec3f
    __del__ = lambda self: None
ofVec3f_swigregister = _openframeworks.ofVec3f_swigregister
ofVec3f_swigregister(ofVec3f)

def ofVec3f_zero():
    return _openframeworks.ofVec3f_zero()
ofVec3f_zero = _openframeworks.ofVec3f_zero

def ofVec3f_one():
    return _openframeworks.ofVec3f_one()
ofVec3f_one = _openframeworks.ofVec3f_one

# handle typedefs which swig doesn't wrap
ofPoint = ofVec3f

class ofVec4f(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    DIM = _openframeworks.ofVec4f_DIM
    x = _swig_property(_openframeworks.ofVec4f_x_get, _openframeworks.ofVec4f_x_set)
    y = _swig_property(_openframeworks.ofVec4f_y_get, _openframeworks.ofVec4f_y_set)
    z = _swig_property(_openframeworks.ofVec4f_z_get, _openframeworks.ofVec4f_z_set)
    w = _swig_property(_openframeworks.ofVec4f_w_get, _openframeworks.ofVec4f_w_set)

    def __init__(self, *args):
        this = _openframeworks.new_ofVec4f(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getPtr(self, *args):
        return _openframeworks.ofVec4f_getPtr(self, *args)

    def __getitem__(self, *args):
        return _openframeworks.ofVec4f___getitem__(self, *args)

    def set(self, *args):
        return _openframeworks.ofVec4f_set(self, *args)

    def __eq__(self, vec):
        return _openframeworks.ofVec4f___eq__(self, vec)

    def __ne__(self, vec):
        return _openframeworks.ofVec4f___ne__(self, vec)

    def match(self, vec, tolerance=0.0001):
        return _openframeworks.ofVec4f_match(self, vec, tolerance)

    def __add__(self, *args):
        return _openframeworks.ofVec4f___add__(self, *args)

    def __iadd__(self, *args):
        return _openframeworks.ofVec4f___iadd__(self, *args)

    def __sub__(self, *args):
        return _openframeworks.ofVec4f___sub__(self, *args)

    def __neg__(self):
        return _openframeworks.ofVec4f___neg__(self)

    def __isub__(self, *args):
        return _openframeworks.ofVec4f___isub__(self, *args)

    def __mul__(self, *args):
        return _openframeworks.ofVec4f___mul__(self, *args)

    def __imul__(self, *args):
        return _openframeworks.ofVec4f___imul__(self, *args)

    def __truediv__(self, *args):
        return _openframeworks.ofVec4f___div__(self, *args)
    __div__ = __truediv__



    def __itruediv__(self, *args):
        return _openframeworks.ofVec4f___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def getScaled(self, length):
        return _openframeworks.ofVec4f_getScaled(self, length)

    def scale(self, length):
        return _openframeworks.ofVec4f_scale(self, length)

    def distance(self, pnt):
        return _openframeworks.ofVec4f_distance(self, pnt)

    def squareDistance(self, pnt):
        return _openframeworks.ofVec4f_squareDistance(self, pnt)

    def getInterpolated(self, pnt, p):
        return _openframeworks.ofVec4f_getInterpolated(self, pnt, p)

    def interpolate(self, pnt, p):
        return _openframeworks.ofVec4f_interpolate(self, pnt, p)

    def getMiddle(self, pnt):
        return _openframeworks.ofVec4f_getMiddle(self, pnt)

    def middle(self, pnt):
        return _openframeworks.ofVec4f_middle(self, pnt)

    def average(self, points, num):
        return _openframeworks.ofVec4f_average(self, points, num)

    def getNormalized(self):
        return _openframeworks.ofVec4f_getNormalized(self)

    def normalize(self):
        return _openframeworks.ofVec4f_normalize(self)

    def getLimited(self, max):
        return _openframeworks.ofVec4f_getLimited(self, max)

    def limit(self, max):
        return _openframeworks.ofVec4f_limit(self, max)

    def length(self):
        return _openframeworks.ofVec4f_length(self)

    def lengthSquared(self):
        return _openframeworks.ofVec4f_lengthSquared(self)

    def dot(self, vec):
        return _openframeworks.ofVec4f_dot(self, vec)
    zero = staticmethod(_openframeworks.ofVec4f_zero)
    one = staticmethod(_openframeworks.ofVec4f_one)

    def __str__(self):
        return _openframeworks.ofVec4f___str__(self)
    __swig_destroy__ = _openframeworks.delete_ofVec4f
    __del__ = lambda self: None
ofVec4f_swigregister = _openframeworks.ofVec4f_swigregister
ofVec4f_swigregister(ofVec4f)

def ofVec4f_zero():
    return _openframeworks.ofVec4f_zero()
ofVec4f_zero = _openframeworks.ofVec4f_zero

def ofVec4f_one():
    return _openframeworks.ofVec4f_one()
ofVec4f_one = _openframeworks.ofVec4f_one

class vec2(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        this = _openframeworks.new_vec2()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _openframeworks.delete_vec2
    __del__ = lambda self: None
vec2_swigregister = _openframeworks.vec2_swigregister
vec2_swigregister(vec2)


def ofGetMousePressed(button=-1):
    return _openframeworks.ofGetMousePressed(button)
ofGetMousePressed = _openframeworks.ofGetMousePressed

def ofGetKeyPressed(key=-1):
    return _openframeworks.ofGetKeyPressed(key)
ofGetKeyPressed = _openframeworks.ofGetKeyPressed

def ofGetMouseX():
    return _openframeworks.ofGetMouseX()
ofGetMouseX = _openframeworks.ofGetMouseX

def ofGetMouseY():
    return _openframeworks.ofGetMouseY()
ofGetMouseY = _openframeworks.ofGetMouseY

def ofGetPreviousMouseX():
    return _openframeworks.ofGetPreviousMouseX()
ofGetPreviousMouseX = _openframeworks.ofGetPreviousMouseX

def ofGetPreviousMouseY():
    return _openframeworks.ofGetPreviousMouseY()
ofGetPreviousMouseY = _openframeworks.ofGetPreviousMouseY
OF_KEY_RETURN = _openframeworks.OF_KEY_RETURN
OF_KEY_ESC = _openframeworks.OF_KEY_ESC
OF_KEY_TAB = _openframeworks.OF_KEY_TAB
OF_KEY_BACKSPACE = _openframeworks.OF_KEY_BACKSPACE
OF_KEY_DEL = _openframeworks.OF_KEY_DEL
OF_KEY_SHIFT = _openframeworks.OF_KEY_SHIFT
OF_KEY_CONTROL = _openframeworks.OF_KEY_CONTROL
OF_KEY_ALT = _openframeworks.OF_KEY_ALT
OF_KEY_SUPER = _openframeworks.OF_KEY_SUPER
OF_KEY_COMMAND = _openframeworks.OF_KEY_COMMAND
OF_KEY_LEFT_SHIFT = _openframeworks.OF_KEY_LEFT_SHIFT
OF_KEY_RIGHT_SHIFT = _openframeworks.OF_KEY_RIGHT_SHIFT
OF_KEY_LEFT_CONTROL = _openframeworks.OF_KEY_LEFT_CONTROL
OF_KEY_RIGHT_CONTROL = _openframeworks.OF_KEY_RIGHT_CONTROL
OF_KEY_LEFT_ALT = _openframeworks.OF_KEY_LEFT_ALT
OF_KEY_RIGHT_ALT = _openframeworks.OF_KEY_RIGHT_ALT
OF_KEY_LEFT_SUPER = _openframeworks.OF_KEY_LEFT_SUPER
OF_KEY_RIGHT_SUPER = _openframeworks.OF_KEY_RIGHT_SUPER
OF_KEY_LEFT_COMMAND = _openframeworks.OF_KEY_LEFT_COMMAND
OF_KEY_RIGHT_COMMAND = _openframeworks.OF_KEY_RIGHT_COMMAND
OF_KEY_F1 = _openframeworks.OF_KEY_F1
OF_KEY_F2 = _openframeworks.OF_KEY_F2
OF_KEY_F3 = _openframeworks.OF_KEY_F3
OF_KEY_F4 = _openframeworks.OF_KEY_F4
OF_KEY_F5 = _openframeworks.OF_KEY_F5
OF_KEY_F6 = _openframeworks.OF_KEY_F6
OF_KEY_F7 = _openframeworks.OF_KEY_F7
OF_KEY_F8 = _openframeworks.OF_KEY_F8
OF_KEY_F9 = _openframeworks.OF_KEY_F9
OF_KEY_F10 = _openframeworks.OF_KEY_F10
OF_KEY_F11 = _openframeworks.OF_KEY_F11
OF_KEY_F12 = _openframeworks.OF_KEY_F12
OF_KEY_LEFT = _openframeworks.OF_KEY_LEFT
OF_KEY_UP = _openframeworks.OF_KEY_UP
OF_KEY_RIGHT = _openframeworks.OF_KEY_RIGHT
OF_KEY_DOWN = _openframeworks.OF_KEY_DOWN
OF_KEY_PAGE_UP = _openframeworks.OF_KEY_PAGE_UP
OF_KEY_PAGE_DOWN = _openframeworks.OF_KEY_PAGE_DOWN
OF_KEY_HOME = _openframeworks.OF_KEY_HOME
OF_KEY_END = _openframeworks.OF_KEY_END
OF_KEY_INSERT = _openframeworks.OF_KEY_INSERT
OF_MOUSE_BUTTON_1 = _openframeworks.OF_MOUSE_BUTTON_1
OF_MOUSE_BUTTON_2 = _openframeworks.OF_MOUSE_BUTTON_2
OF_MOUSE_BUTTON_3 = _openframeworks.OF_MOUSE_BUTTON_3
OF_MOUSE_BUTTON_4 = _openframeworks.OF_MOUSE_BUTTON_4
OF_MOUSE_BUTTON_5 = _openframeworks.OF_MOUSE_BUTTON_5
OF_MOUSE_BUTTON_6 = _openframeworks.OF_MOUSE_BUTTON_6
OF_MOUSE_BUTTON_7 = _openframeworks.OF_MOUSE_BUTTON_7
OF_MOUSE_BUTTON_8 = _openframeworks.OF_MOUSE_BUTTON_8
OF_MOUSE_BUTTON_LAST = _openframeworks.OF_MOUSE_BUTTON_LAST
OF_MOUSE_BUTTON_LEFT = _openframeworks.OF_MOUSE_BUTTON_LEFT
OF_MOUSE_BUTTON_MIDDLE = _openframeworks.OF_MOUSE_BUTTON_MIDDLE
OF_MOUSE_BUTTON_RIGHT = _openframeworks.OF_MOUSE_BUTTON_RIGHT
class ofDragInfo(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    files = _swig_property(_openframeworks.ofDragInfo_files_get, _openframeworks.ofDragInfo_files_set)
    position = _swig_property(_openframeworks.ofDragInfo_position_get, _openframeworks.ofDragInfo_position_set)

    def __init__(self):
        this = _openframeworks.new_ofDragInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _openframeworks.delete_ofDragInfo
    __del__ = lambda self: None
ofDragInfo_swigregister = _openframeworks.ofDragInfo_swigregister
ofDragInfo_swigregister(ofDragInfo)

class ofTouchEventArgs(vec2):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    down = _openframeworks.ofTouchEventArgs_down
    up = _openframeworks.ofTouchEventArgs_up
    move = _openframeworks.ofTouchEventArgs_move
    doubleTap = _openframeworks.ofTouchEventArgs_doubleTap
    cancel = _openframeworks.ofTouchEventArgs_cancel

    def __init__(self, *args):
        this = _openframeworks.new_ofTouchEventArgs(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    type = _swig_property(_openframeworks.ofTouchEventArgs_type_get, _openframeworks.ofTouchEventArgs_type_set)
    id = _swig_property(_openframeworks.ofTouchEventArgs_id_get, _openframeworks.ofTouchEventArgs_id_set)
    time = _swig_property(_openframeworks.ofTouchEventArgs_time_get, _openframeworks.ofTouchEventArgs_time_set)
    numTouches = _swig_property(_openframeworks.ofTouchEventArgs_numTouches_get, _openframeworks.ofTouchEventArgs_numTouches_set)
    width = _swig_property(_openframeworks.ofTouchEventArgs_width_get, _openframeworks.ofTouchEventArgs_width_set)
    height = _swig_property(_openframeworks.ofTouchEventArgs_height_get, _openframeworks.ofTouchEventArgs_height_set)
    angle = _swig_property(_openframeworks.ofTouchEventArgs_angle_get, _openframeworks.ofTouchEventArgs_angle_set)
    minoraxis = _swig_property(_openframeworks.ofTouchEventArgs_minoraxis_get, _openframeworks.ofTouchEventArgs_minoraxis_set)
    majoraxis = _swig_property(_openframeworks.ofTouchEventArgs_majoraxis_get, _openframeworks.ofTouchEventArgs_majoraxis_set)
    pressure = _swig_property(_openframeworks.ofTouchEventArgs_pressure_get, _openframeworks.ofTouchEventArgs_pressure_set)
    xspeed = _swig_property(_openframeworks.ofTouchEventArgs_xspeed_get, _openframeworks.ofTouchEventArgs_xspeed_set)
    yspeed = _swig_property(_openframeworks.ofTouchEventArgs_yspeed_get, _openframeworks.ofTouchEventArgs_yspeed_set)
    xaccel = _swig_property(_openframeworks.ofTouchEventArgs_xaccel_get, _openframeworks.ofTouchEventArgs_xaccel_set)
    yaccel = _swig_property(_openframeworks.ofTouchEventArgs_yaccel_get, _openframeworks.ofTouchEventArgs_yaccel_set)
    __swig_destroy__ = _openframeworks.delete_ofTouchEventArgs
    __del__ = lambda self: None
ofTouchEventArgs_swigregister = _openframeworks.ofTouchEventArgs_swigregister
ofTouchEventArgs_swigregister(ofTouchEventArgs)


def ofSendMessage(messageString):
    return _openframeworks.ofSendMessage(messageString)
ofSendMessage = _openframeworks.ofSendMessage
OF_TEXTURE_LUMINANCE = _openframeworks.OF_TEXTURE_LUMINANCE
OF_TEXTURE_RGB = _openframeworks.OF_TEXTURE_RGB
OF_TEXTURE_RGBA = _openframeworks.OF_TEXTURE_RGBA
OF_NEAREST = _openframeworks.OF_NEAREST
OF_LINEAR = _openframeworks.OF_LINEAR
OF_FRAGMENT_SHADER = _openframeworks.OF_FRAGMENT_SHADER
OF_VERTEX_SHADER = _openframeworks.OF_VERTEX_SHADER
OF_CLAMP_TO_EDGE = _openframeworks.OF_CLAMP_TO_EDGE
OF_REPEAT = _openframeworks.OF_REPEAT
OF_MIRRORED_REPEAT = _openframeworks.OF_MIRRORED_REPEAT
class ofBufferObject(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        this = _openframeworks.new_ofBufferObject()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def allocate(self, *args):
        return _openframeworks.ofBufferObject_allocate(self, *args)

    def isAllocated(self):
        return _openframeworks.ofBufferObject_isAllocated(self)

    def bind(self, target):
        return _openframeworks.ofBufferObject_bind(self, target)

    def unbind(self, target):
        return _openframeworks.ofBufferObject_unbind(self, target)

    def getId(self):
        return _openframeworks.ofBufferObject_getId(self)

    def setData(self, bytes, data, usage):
        return _openframeworks.ofBufferObject_setData(self, bytes, data, usage)

    def updateData(self, *args):
        return _openframeworks.ofBufferObject_updateData(self, *args)

    def size(self):
        return _openframeworks.ofBufferObject_size(self)
    __swig_destroy__ = _openframeworks.delete_ofBufferObject
    __del__ = lambda self: None
ofBufferObject_swigregister = _openframeworks.ofBufferObject_swigregister
ofBufferObject_swigregister(ofBufferObject)


def ofGetGLInternalFormat(*args):
    return _openframeworks.ofGetGLInternalFormat(*args)
ofGetGLInternalFormat = _openframeworks.ofGetGLInternalFormat

def ofGetGLInternalFormatName(glInternalFormat):
    return _openframeworks.ofGetGLInternalFormatName(glInternalFormat)
ofGetGLInternalFormatName = _openframeworks.ofGetGLInternalFormatName

def ofGetGLFormatFromInternal(gInternalFormat):
    return _openframeworks.ofGetGLFormatFromInternal(gInternalFormat)
ofGetGLFormatFromInternal = _openframeworks.ofGetGLFormatFromInternal

def ofGetGLTypeFromInternal(glInternalFormat):
    return _openframeworks.ofGetGLTypeFromInternal(glInternalFormat)
ofGetGLTypeFromInternal = _openframeworks.ofGetGLTypeFromInternal

def ofGetGLType(*args):
    return _openframeworks.ofGetGLType(*args)
ofGetGLType = _openframeworks.ofGetGLType

def ofGetImageTypeFromGLType(glType):
    return _openframeworks.ofGetImageTypeFromGLType(glType)
ofGetImageTypeFromGLType = _openframeworks.ofGetImageTypeFromGLType

def ofGetGLPolyMode(m):
    return _openframeworks.ofGetGLPolyMode(m)
ofGetGLPolyMode = _openframeworks.ofGetGLPolyMode

def ofGetOFPolyMode(m):
    return _openframeworks.ofGetOFPolyMode(m)
ofGetOFPolyMode = _openframeworks.ofGetOFPolyMode

def ofGetGLPrimitiveMode(mode):
    return _openframeworks.ofGetGLPrimitiveMode(mode)
ofGetGLPrimitiveMode = _openframeworks.ofGetGLPrimitiveMode

def ofGetOFPrimitiveMode(mode):
    return _openframeworks.ofGetOFPrimitiveMode(mode)
ofGetOFPrimitiveMode = _openframeworks.ofGetOFPrimitiveMode

def ofGetGLInternalFormatFromPixelFormat(pixelFormat):
    return _openframeworks.ofGetGLInternalFormatFromPixelFormat(pixelFormat)
ofGetGLInternalFormatFromPixelFormat = _openframeworks.ofGetGLInternalFormatFromPixelFormat

def ofGetGLFormatFromPixelFormat(pixelFormat):
    return _openframeworks.ofGetGLFormatFromPixelFormat(pixelFormat)
ofGetGLFormatFromPixelFormat = _openframeworks.ofGetGLFormatFromPixelFormat

def ofGetBytesPerChannelFromGLType(glType):
    return _openframeworks.ofGetBytesPerChannelFromGLType(glType)
ofGetBytesPerChannelFromGLType = _openframeworks.ofGetBytesPerChannelFromGLType

def ofGetNumChannelsFromGLFormat(glFormat):
    return _openframeworks.ofGetNumChannelsFromGLFormat(glFormat)
ofGetNumChannelsFromGLFormat = _openframeworks.ofGetNumChannelsFromGLFormat

def ofSetPixelStoreiAlignment(*args):
    return _openframeworks.ofSetPixelStoreiAlignment(*args)
ofSetPixelStoreiAlignment = _openframeworks.ofSetPixelStoreiAlignment

def ofGLSupportedExtensions():
    return _openframeworks.ofGLSupportedExtensions()
ofGLSupportedExtensions = _openframeworks.ofGLSupportedExtensions

def ofGLCheckExtension(searchName):
    return _openframeworks.ofGLCheckExtension(searchName)
ofGLCheckExtension = _openframeworks.ofGLCheckExtension

def ofGLSupportsNPOTTextures():
    return _openframeworks.ofGLSupportsNPOTTextures()
ofGLSupportsNPOTTextures = _openframeworks.ofGLSupportsNPOTTextures

def ofIsGLProgrammableRenderer():
    return _openframeworks.ofIsGLProgrammableRenderer()
ofIsGLProgrammableRenderer = _openframeworks.ofIsGLProgrammableRenderer

def ofGLSLVersionFromGL(major, minor):
    return _openframeworks.ofGLSLVersionFromGL(major, minor)
ofGLSLVersionFromGL = _openframeworks.ofGLSLVersionFromGL
OF_LIGHT_POINT = _openframeworks.OF_LIGHT_POINT
OF_LIGHT_DIRECTIONAL = _openframeworks.OF_LIGHT_DIRECTIONAL
OF_LIGHT_SPOT = _openframeworks.OF_LIGHT_SPOT
OF_LIGHT_AREA = _openframeworks.OF_LIGHT_AREA

def ofEnableLighting():
    return _openframeworks.ofEnableLighting()
ofEnableLighting = _openframeworks.ofEnableLighting

def ofDisableLighting():
    return _openframeworks.ofDisableLighting()
ofDisableLighting = _openframeworks.ofDisableLighting

def ofEnableSeparateSpecularLight():
    return _openframeworks.ofEnableSeparateSpecularLight()
ofEnableSeparateSpecularLight = _openframeworks.ofEnableSeparateSpecularLight

def ofDisableSeparateSpecularLight():
    return _openframeworks.ofDisableSeparateSpecularLight()
ofDisableSeparateSpecularLight = _openframeworks.ofDisableSeparateSpecularLight

def ofGetLightingEnabled():
    return _openframeworks.ofGetLightingEnabled()
ofGetLightingEnabled = _openframeworks.ofGetLightingEnabled

def ofSetSmoothLighting(b):
    return _openframeworks.ofSetSmoothLighting(b)
ofSetSmoothLighting = _openframeworks.ofSetSmoothLighting

def ofSetGlobalAmbientColor(c):
    return _openframeworks.ofSetGlobalAmbientColor(c)
ofSetGlobalAmbientColor = _openframeworks.ofSetGlobalAmbientColor

def ofGetGlobalAmbientColor():
    return _openframeworks.ofGetGlobalAmbientColor()
ofGetGlobalAmbientColor = _openframeworks.ofGetGlobalAmbientColor
class ofLight(ofNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        this = _openframeworks.new_ofLight()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setup(self):
        return _openframeworks.ofLight_setup(self)

    def enable(self):
        return _openframeworks.ofLight_enable(self)

    def disable(self):
        return _openframeworks.ofLight_disable(self)

    def getIsEnabled(self):
        return _openframeworks.ofLight_getIsEnabled(self)

    def setDirectional(self):
        return _openframeworks.ofLight_setDirectional(self)

    def getIsDirectional(self):
        return _openframeworks.ofLight_getIsDirectional(self)

    def setSpotlight(self, spotCutOff=45., exponent=0.):
        return _openframeworks.ofLight_setSpotlight(self, spotCutOff, exponent)

    def getIsSpotlight(self):
        return _openframeworks.ofLight_getIsSpotlight(self)

    def setSpotlightCutOff(self, spotCutOff):
        return _openframeworks.ofLight_setSpotlightCutOff(self, spotCutOff)

    def getSpotlightCutOff(self):
        return _openframeworks.ofLight_getSpotlightCutOff(self)

    def setSpotConcentration(self, exponent):
        return _openframeworks.ofLight_setSpotConcentration(self, exponent)

    def getSpotConcentration(self):
        return _openframeworks.ofLight_getSpotConcentration(self)

    def setPointLight(self):
        return _openframeworks.ofLight_setPointLight(self)

    def getIsPointLight(self):
        return _openframeworks.ofLight_getIsPointLight(self)

    def setAttenuation(self, constant=1., linear=0., quadratic=0.):
        return _openframeworks.ofLight_setAttenuation(self, constant, linear, quadratic)

    def getAttenuationConstant(self):
        return _openframeworks.ofLight_getAttenuationConstant(self)

    def getAttenuationLinear(self):
        return _openframeworks.ofLight_getAttenuationLinear(self)

    def getAttenuationQuadratic(self):
        return _openframeworks.ofLight_getAttenuationQuadratic(self)

    def setAreaLight(self, width, height):
        return _openframeworks.ofLight_setAreaLight(self, width, height)

    def getIsAreaLight(self):
        return _openframeworks.ofLight_getIsAreaLight(self)

    def getType(self):
        return _openframeworks.ofLight_getType(self)

    def setAmbientColor(self, c):
        return _openframeworks.ofLight_setAmbientColor(self, c)

    def setDiffuseColor(self, c):
        return _openframeworks.ofLight_setDiffuseColor(self, c)

    def setSpecularColor(self, c):
        return _openframeworks.ofLight_setSpecularColor(self, c)

    def getAmbientColor(self):
        return _openframeworks.ofLight_getAmbientColor(self)

    def getDiffuseColor(self):
        return _openframeworks.ofLight_getDiffuseColor(self)

    def getSpecularColor(self):
        return _openframeworks.ofLight_getSpecularColor(self)

    def getLightID(self):
        return _openframeworks.ofLight_getLightID(self)
    __swig_destroy__ = _openframeworks.delete_ofLight
    __del__ = lambda self: None
ofLight_swigregister = _openframeworks.ofLight_swigregister
ofLight_swigregister(ofLight)

class ofMaterial(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        this = _openframeworks.new_ofMaterial()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _openframeworks.delete_ofMaterial
    __del__ = lambda self: None

    def setup(self, settings):
        return _openframeworks.ofMaterial_setup(self, settings)

    def setColors(self, oDiffuse, oAmbient, oSpecular, emissive):
        return _openframeworks.ofMaterial_setColors(self, oDiffuse, oAmbient, oSpecular, emissive)

    def setDiffuseColor(self, oDiffuse):
        return _openframeworks.ofMaterial_setDiffuseColor(self, oDiffuse)

    def setAmbientColor(self, oAmbient):
        return _openframeworks.ofMaterial_setAmbientColor(self, oAmbient)

    def setSpecularColor(self, oSpecular):
        return _openframeworks.ofMaterial_setSpecularColor(self, oSpecular)

    def setEmissiveColor(self, oEmmisive):
        return _openframeworks.ofMaterial_setEmissiveColor(self, oEmmisive)

    def setShininess(self, nShininess):
        return _openframeworks.ofMaterial_setShininess(self, nShininess)

    def getDiffuseColor(self):
        return _openframeworks.ofMaterial_getDiffuseColor(self)

    def getAmbientColor(self):
        return _openframeworks.ofMaterial_getAmbientColor(self)

    def getSpecularColor(self):
        return _openframeworks.ofMaterial_getSpecularColor(self)

    def getEmissiveColor(self):
        return _openframeworks.ofMaterial_getEmissiveColor(self)

    def getShininess(self):
        return _openframeworks.ofMaterial_getShininess(self)

    def getSettings(self):
        return _openframeworks.ofMaterial_getSettings(self)

    def begin(self):
        return _openframeworks.ofMaterial_begin(self)

    def end(self):
        return _openframeworks.ofMaterial_end(self)

    def setCustomUniform1f(self, name, value):
        return _openframeworks.ofMaterial_setCustomUniform1f(self, name, value)

    def setCustomUniform2f(self, name, value):
        return _openframeworks.ofMaterial_setCustomUniform2f(self, name, value)

    def setCustomUniform3f(self, name, value):
        return _openframeworks.ofMaterial_setCustomUniform3f(self, name, value)

    def setCustomUniform4f(self, name, value):
        return _openframeworks.ofMaterial_setCustomUniform4f(self, name, value)

    def setCustomUniformMatrix4f(self, name, value):
        return _openframeworks.ofMaterial_setCustomUniformMatrix4f(self, name, value)

    def setCustomUniformMatrix3f(self, name, value):
        return _openframeworks.ofMaterial_setCustomUniformMatrix3f(self, name, value)

    def setCustomUniform1i(self, name, value):
        return _openframeworks.ofMaterial_setCustomUniform1i(self, name, value)

    def setCustomUniform2i(self, name, value):
        return _openframeworks.ofMaterial_setCustomUniform2i(self, name, value)

    def setCustomUniform3i(self, name, value):
        return _openframeworks.ofMaterial_setCustomUniform3i(self, name, value)

    def setCustomUniform4i(self, name, value):
        return _openframeworks.ofMaterial_setCustomUniform4i(self, name, value)

    def setCustomUniformTexture(self, *args):
        return _openframeworks.ofMaterial_setCustomUniformTexture(self, *args)
ofMaterial_swigregister = _openframeworks.ofMaterial_swigregister
ofMaterial_swigregister(ofMaterial)

class ofShader(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_ofShader
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _openframeworks.new_ofShader(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def load(self, *args):
        return _openframeworks.ofShader_load(self, *args)

    def setup(self, settings):
        return _openframeworks.ofShader_setup(self, settings)

    def setGeometryInputType(self, type):
        return _openframeworks.ofShader_setGeometryInputType(self, type)

    def setGeometryOutputType(self, type):
        return _openframeworks.ofShader_setGeometryOutputType(self, type)

    def setGeometryOutputCount(self, count):
        return _openframeworks.ofShader_setGeometryOutputCount(self, count)

    def getGeometryMaxOutputCount(self):
        return _openframeworks.ofShader_getGeometryMaxOutputCount(self)

    def unload(self):
        return _openframeworks.ofShader_unload(self)

    def isLoaded(self):
        return _openframeworks.ofShader_isLoaded(self)

    def begin(self):
        return _openframeworks.ofShader_begin(self)

    def end(self):
        return _openframeworks.ofShader_end(self)

    def setUniformTexture(self, *args):
        return _openframeworks.ofShader_setUniformTexture(self, *args)

    def setUniform1i(self, name, v1):
        return _openframeworks.ofShader_setUniform1i(self, name, v1)

    def setUniform2i(self, name, v1, v2):
        return _openframeworks.ofShader_setUniform2i(self, name, v1, v2)

    def setUniform3i(self, name, v1, v2, v3):
        return _openframeworks.ofShader_setUniform3i(self, name, v1, v2, v3)

    def setUniform4i(self, name, v1, v2, v3, v4):
        return _openframeworks.ofShader_setUniform4i(self, name, v1, v2, v3, v4)

    def setUniform1f(self, name, v1):
        return _openframeworks.ofShader_setUniform1f(self, name, v1)

    def setUniform2f(self, *args):
        return _openframeworks.ofShader_setUniform2f(self, *args)

    def setUniform3f(self, *args):
        return _openframeworks.ofShader_setUniform3f(self, *args)

    def setUniform4f(self, *args):
        return _openframeworks.ofShader_setUniform4f(self, *args)

    def setUniform1iv(self, name, v, count=1):
        return _openframeworks.ofShader_setUniform1iv(self, name, v, count)

    def setUniform2iv(self, name, v, count=1):
        return _openframeworks.ofShader_setUniform2iv(self, name, v, count)

    def setUniform3iv(self, name, v, count=1):
        return _openframeworks.ofShader_setUniform3iv(self, name, v, count)

    def setUniform4iv(self, name, v, count=1):
        return _openframeworks.ofShader_setUniform4iv(self, name, v, count)

    def setUniform1fv(self, name, v, count=1):
        return _openframeworks.ofShader_setUniform1fv(self, name, v, count)

    def setUniform2fv(self, name, v, count=1):
        return _openframeworks.ofShader_setUniform2fv(self, name, v, count)

    def setUniform3fv(self, name, v, count=1):
        return _openframeworks.ofShader_setUniform3fv(self, name, v, count)

    def setUniform4fv(self, name, v, count=1):
        return _openframeworks.ofShader_setUniform4fv(self, name, v, count)

    def setUniforms(self, parameters):
        return _openframeworks.ofShader_setUniforms(self, parameters)

    def setUniformMatrix3f(self, name, m, count=1):
        return _openframeworks.ofShader_setUniformMatrix3f(self, name, m, count)

    def setUniformMatrix4f(self, name, m, count=1):
        return _openframeworks.ofShader_setUniformMatrix4f(self, name, m, count)

    def getUniformLocation(self, name):
        return _openframeworks.ofShader_getUniformLocation(self, name)

    def getAttributeLocation(self, name):
        return _openframeworks.ofShader_getAttributeLocation(self, name)

    def setAttribute1f(self, location, v1):
        return _openframeworks.ofShader_setAttribute1f(self, location, v1)

    def setAttribute2f(self, location, v1, v2):
        return _openframeworks.ofShader_setAttribute2f(self, location, v1, v2)

    def setAttribute3f(self, location, v1, v2, v3):
        return _openframeworks.ofShader_setAttribute3f(self, location, v1, v2, v3)

    def setAttribute4f(self, location, v1, v2, v3, v4):
        return _openframeworks.ofShader_setAttribute4f(self, location, v1, v2, v3, v4)

    def setAttribute1fv(self, *args):
        return _openframeworks.ofShader_setAttribute1fv(self, *args)

    def setAttribute2fv(self, *args):
        return _openframeworks.ofShader_setAttribute2fv(self, *args)

    def setAttribute3fv(self, *args):
        return _openframeworks.ofShader_setAttribute3fv(self, *args)

    def setAttribute4fv(self, *args):
        return _openframeworks.ofShader_setAttribute4fv(self, *args)

    def bindAttribute(self, location, name):
        return _openframeworks.ofShader_bindAttribute(self, location, name)

    def printActiveUniforms(self):
        return _openframeworks.ofShader_printActiveUniforms(self)

    def printActiveAttributes(self):
        return _openframeworks.ofShader_printActiveAttributes(self)

    def setupShaderFromSource(self, *args):
        return _openframeworks.ofShader_setupShaderFromSource(self, *args)

    def setupShaderFromFile(self, type, filename):
        return _openframeworks.ofShader_setupShaderFromFile(self, type, filename)

    def linkProgram(self):
        return _openframeworks.ofShader_linkProgram(self)

    def bindDefaults(self):
        return _openframeworks.ofShader_bindDefaults(self)

    def getProgram(self):
        return _openframeworks.ofShader_getProgram(self)

    def getShader(self, type):
        return _openframeworks.ofShader_getShader(self, type)

    def __eq__(self, other):
        return _openframeworks.ofShader___eq__(self, other)

    def __ne__(self, other):
        return _openframeworks.ofShader___ne__(self, other)

    def getShaderSource(self, type):
        return _openframeworks.ofShader_getShaderSource(self, type)
ofShader_swigregister = _openframeworks.ofShader_swigregister
ofShader_swigregister(ofShader)

class ofVbo(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openframeworks.new_ofVbo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _openframeworks.delete_ofVbo
    __del__ = lambda self: None

    def setMesh(self, *args):
        return _openframeworks.ofVbo_setMesh(self, *args)

    def setIndexData(self, indices, total, usage):
        return _openframeworks.ofVbo_setIndexData(self, indices, total, usage)

    def setVertexData(self, *args):
        return _openframeworks.ofVbo_setVertexData(self, *args)

    def setColorData(self, *args):
        return _openframeworks.ofVbo_setColorData(self, *args)

    def setNormalData(self, *args):
        return _openframeworks.ofVbo_setNormalData(self, *args)

    def setTexCoordData(self, *args):
        return _openframeworks.ofVbo_setTexCoordData(self, *args)

    def setAttributeData(self, location, vert0x, numCoords, total, usage, stride=0):
        return _openframeworks.ofVbo_setAttributeData(self, location, vert0x, numCoords, total, usage, stride)

    def setVertexBuffer(self, buffer, numCoords, stride, offset=0):
        return _openframeworks.ofVbo_setVertexBuffer(self, buffer, numCoords, stride, offset)

    def setColorBuffer(self, buffer, stride, offset=0):
        return _openframeworks.ofVbo_setColorBuffer(self, buffer, stride, offset)

    def setNormalBuffer(self, buffer, stride, offset=0):
        return _openframeworks.ofVbo_setNormalBuffer(self, buffer, stride, offset)

    def setTexCoordBuffer(self, buffer, stride, offset=0):
        return _openframeworks.ofVbo_setTexCoordBuffer(self, buffer, stride, offset)

    def setIndexBuffer(self, buffer):
        return _openframeworks.ofVbo_setIndexBuffer(self, buffer)

    def setAttributeBuffer(self, location, buffer, numCoords, stride, offset=0):
        return _openframeworks.ofVbo_setAttributeBuffer(self, location, buffer, numCoords, stride, offset)

    def getVertexBuffer(self, *args):
        return _openframeworks.ofVbo_getVertexBuffer(self, *args)

    def getColorBuffer(self, *args):
        return _openframeworks.ofVbo_getColorBuffer(self, *args)

    def getNormalBuffer(self, *args):
        return _openframeworks.ofVbo_getNormalBuffer(self, *args)

    def getTexCoordBuffer(self, *args):
        return _openframeworks.ofVbo_getTexCoordBuffer(self, *args)

    def getIndexBuffer(self, *args):
        return _openframeworks.ofVbo_getIndexBuffer(self, *args)

    def getAttributeBuffer(self, *args):
        return _openframeworks.ofVbo_getAttributeBuffer(self, *args)

    def updateMesh(self, mesh):
        return _openframeworks.ofVbo_updateMesh(self, mesh)

    def updateIndexData(self, indices, total):
        return _openframeworks.ofVbo_updateIndexData(self, indices, total)

    def updateVertexData(self, *args):
        return _openframeworks.ofVbo_updateVertexData(self, *args)

    def updateColorData(self, *args):
        return _openframeworks.ofVbo_updateColorData(self, *args)

    def updateNormalData(self, *args):
        return _openframeworks.ofVbo_updateNormalData(self, *args)

    def updateTexCoordData(self, *args):
        return _openframeworks.ofVbo_updateTexCoordData(self, *args)

    def updateAttributeData(self, location, vert0x, total):
        return _openframeworks.ofVbo_updateAttributeData(self, location, vert0x, total)

    def enableColors(self):
        return _openframeworks.ofVbo_enableColors(self)

    def enableNormals(self):
        return _openframeworks.ofVbo_enableNormals(self)

    def enableTexCoords(self):
        return _openframeworks.ofVbo_enableTexCoords(self)

    def enableIndices(self):
        return _openframeworks.ofVbo_enableIndices(self)

    def disableColors(self):
        return _openframeworks.ofVbo_disableColors(self)

    def disableNormals(self):
        return _openframeworks.ofVbo_disableNormals(self)

    def disableTexCoords(self):
        return _openframeworks.ofVbo_disableTexCoords(self)

    def disableIndices(self):
        return _openframeworks.ofVbo_disableIndices(self)

    def getVaoId(self):
        return _openframeworks.ofVbo_getVaoId(self)

    def getVertId(self):
        return _openframeworks.ofVbo_getVertId(self)

    def getColorId(self):
        return _openframeworks.ofVbo_getColorId(self)

    def getNormalId(self):
        return _openframeworks.ofVbo_getNormalId(self)

    def getTexCoordId(self):
        return _openframeworks.ofVbo_getTexCoordId(self)

    def getIndexId(self):
        return _openframeworks.ofVbo_getIndexId(self)

    def getAttributeId(self, AttrPos_):
        return _openframeworks.ofVbo_getAttributeId(self, AttrPos_)

    def getIsAllocated(self):
        return _openframeworks.ofVbo_getIsAllocated(self)

    def getUsingVerts(self):
        return _openframeworks.ofVbo_getUsingVerts(self)

    def getUsingColors(self):
        return _openframeworks.ofVbo_getUsingColors(self)

    def getUsingNormals(self):
        return _openframeworks.ofVbo_getUsingNormals(self)

    def getUsingTexCoords(self):
        return _openframeworks.ofVbo_getUsingTexCoords(self)

    def getUsingIndices(self):
        return _openframeworks.ofVbo_getUsingIndices(self)

    def draw(self, drawMode, first, total):
        return _openframeworks.ofVbo_draw(self, drawMode, first, total)

    def drawElements(self, drawMode, amt, offsetelements=0):
        return _openframeworks.ofVbo_drawElements(self, drawMode, amt, offsetelements)

    def drawInstanced(self, drawMode, first, total, primCount):
        return _openframeworks.ofVbo_drawInstanced(self, drawMode, first, total, primCount)

    def drawElementsInstanced(self, drawMode, amt, primCount):
        return _openframeworks.ofVbo_drawElementsInstanced(self, drawMode, amt, primCount)

    def bind(self):
        return _openframeworks.ofVbo_bind(self)

    def unbind(self):
        return _openframeworks.ofVbo_unbind(self)

    def clear(self):
        return _openframeworks.ofVbo_clear(self)

    def clearVertices(self):
        return _openframeworks.ofVbo_clearVertices(self)

    def clearNormals(self):
        return _openframeworks.ofVbo_clearNormals(self)

    def clearColors(self):
        return _openframeworks.ofVbo_clearColors(self)

    def clearTexCoords(self):
        return _openframeworks.ofVbo_clearTexCoords(self)

    def clearIndices(self):
        return _openframeworks.ofVbo_clearIndices(self)

    def clearAttribute(self, attributePos_):
        return _openframeworks.ofVbo_clearAttribute(self, attributePos_)

    def getNumVertices(self):
        return _openframeworks.ofVbo_getNumVertices(self)

    def getNumIndices(self):
        return _openframeworks.ofVbo_getNumIndices(self)

    def hasAttribute(self, attributePos_):
        return _openframeworks.ofVbo_hasAttribute(self, attributePos_)
ofVbo_swigregister = _openframeworks.ofVbo_swigregister
ofVbo_swigregister(ofVbo)

class ofVboMesh(ofMesh):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openframeworks.new_ofVboMesh(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _openframeworks.delete_ofVboMesh
    __del__ = lambda self: None

    def setUsage(self, usage):
        return _openframeworks.ofVboMesh_setUsage(self, usage)

    def draw(self, *args):
        return _openframeworks.ofVboMesh_draw(self, *args)

    def drawInstanced(self, drawMode, primCount):
        return _openframeworks.ofVboMesh_drawInstanced(self, drawMode, primCount)

    def getVbo(self, *args):
        return _openframeworks.ofVboMesh_getVbo(self, *args)
ofVboMesh_swigregister = _openframeworks.ofVboMesh_swigregister
ofVboMesh_swigregister(ofVboMesh)

class ofPixels(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_ofPixels
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _openframeworks.new_ofPixels(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def allocate(self, w, h, channels):
        return _openframeworks.ofPixels_allocate(self, w, h, channels)

    def allocatePixelFormat(self, w, h, pixelFormat):
        return _openframeworks.ofPixels_allocatePixelFormat(self, w, h, pixelFormat)

    def allocateImageType(self, w, h, imageType):
        return _openframeworks.ofPixels_allocateImageType(self, w, h, imageType)

    def isAllocated(self):
        return _openframeworks.ofPixels_isAllocated(self)

    def clear(self):
        return _openframeworks.ofPixels_clear(self)

    def set(self, *args):
        return _openframeworks.ofPixels_set(self, *args)

    def setFromPixels(self, newPixels, w, h, pixelFormat):
        return _openframeworks.ofPixels_setFromPixels(self, newPixels, w, h, pixelFormat)

    def setFromPixelsImageType(self, newPixels, w, h, type):
        return _openframeworks.ofPixels_setFromPixelsImageType(self, newPixels, w, h, type)

    def setFromExternalPixels(self, newPixels, w, h, pixelFormat):
        return _openframeworks.ofPixels_setFromExternalPixels(self, newPixels, w, h, pixelFormat)

    def setFromAlignedPixels(self, newPixels, width, height, pixelFormat, stride):
        return _openframeworks.ofPixels_setFromAlignedPixels(self, newPixels, width, height, pixelFormat, stride)

    def swap(self, pix):
        return _openframeworks.ofPixels_swap(self, pix)

    def crop(self, x, y, width, height):
        return _openframeworks.ofPixels_crop(self, x, y, width, height)

    def cropTo(self, toPix, x, y, width, height):
        return _openframeworks.ofPixels_cropTo(self, toPix, x, y, width, height)

    def rotate90(self, nClockwiseRotations):
        return _openframeworks.ofPixels_rotate90(self, nClockwiseRotations)

    def rotate90To(self, dst, nClockwiseRotations):
        return _openframeworks.ofPixels_rotate90To(self, dst, nClockwiseRotations)

    def mirrorTo(self, dst, vertically, horizontal):
        return _openframeworks.ofPixels_mirrorTo(self, dst, vertically, horizontal)

    def mirror(self, vertically, horizontal):
        return _openframeworks.ofPixels_mirror(self, vertically, horizontal)

    def resize(self, dstWidth, dstHeight, interpMethod=OF_INTERPOLATE_NEAREST_NEIGHBOR):
        return _openframeworks.ofPixels_resize(self, dstWidth, dstHeight, interpMethod)

    def resizeTo(self, dst, interpMethod=OF_INTERPOLATE_NEAREST_NEIGHBOR):
        return _openframeworks.ofPixels_resizeTo(self, dst, interpMethod)

    def pasteInto(self, dst, x, y):
        return _openframeworks.ofPixels_pasteInto(self, dst, x, y)

    def blendInto(self, dst, x, y):
        return _openframeworks.ofPixels_blendInto(self, dst, x, y)

    def swapRgb(self):
        return _openframeworks.ofPixels_swapRgb(self)

    def getData(self, *args):
        return _openframeworks.ofPixels_getData(self, *args)

    def getPixelIndex(self, x, y):
        return _openframeworks.ofPixels_getPixelIndex(self, x, y)

    def getColor(self, *args):
        return _openframeworks.ofPixels_getColor(self, *args)

    def setColor(self, *args):
        return _openframeworks.ofPixels_setColor(self, *args)

    def __getitem__(self, *args):
        return _openframeworks.ofPixels___getitem__(self, *args)

    def getWidth(self):
        return _openframeworks.ofPixels_getWidth(self)

    def getHeight(self):
        return _openframeworks.ofPixels_getHeight(self)

    def getBytesPerPixel(self):
        return _openframeworks.ofPixels_getBytesPerPixel(self)

    def getBitsPerPixel(self):
        return _openframeworks.ofPixels_getBitsPerPixel(self)

    def getBytesPerChannel(self):
        return _openframeworks.ofPixels_getBytesPerChannel(self)

    def getBitsPerChannel(self):
        return _openframeworks.ofPixels_getBitsPerChannel(self)

    def getBytesStride(self):
        return _openframeworks.ofPixels_getBytesStride(self)

    def getNumChannels(self):
        return _openframeworks.ofPixels_getNumChannels(self)

    def getTotalBytes(self):
        return _openframeworks.ofPixels_getTotalBytes(self)

    def getNumPlanes(self):
        return _openframeworks.ofPixels_getNumPlanes(self)

    def getPlane(self, plane):
        return _openframeworks.ofPixels_getPlane(self, plane)

    def getChannel(self, channel):
        return _openframeworks.ofPixels_getChannel(self, channel)

    def getPixelFormat(self):
        return _openframeworks.ofPixels_getPixelFormat(self)

    def size(self):
        return _openframeworks.ofPixels_size(self)

    def getImageType(self):
        return _openframeworks.ofPixels_getImageType(self)

    def setChannel(self, channel, channelPixels):
        return _openframeworks.ofPixels_setChannel(self, channel, channelPixels)

    def setImageType(self, imageType):
        return _openframeworks.ofPixels_setImageType(self, imageType)

    def setNumChannels(self, numChannels):
        return _openframeworks.ofPixels_setNumChannels(self, numChannels)
ofPixels_swigregister = _openframeworks.ofPixels_swigregister
ofPixels_swigregister(ofPixels)

class ofFloatPixels(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_ofFloatPixels
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _openframeworks.new_ofFloatPixels(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def allocate(self, w, h, channels):
        return _openframeworks.ofFloatPixels_allocate(self, w, h, channels)

    def allocatePixelFormat(self, w, h, pixelFormat):
        return _openframeworks.ofFloatPixels_allocatePixelFormat(self, w, h, pixelFormat)

    def allocateImageType(self, w, h, imageType):
        return _openframeworks.ofFloatPixels_allocateImageType(self, w, h, imageType)

    def isAllocated(self):
        return _openframeworks.ofFloatPixels_isAllocated(self)

    def clear(self):
        return _openframeworks.ofFloatPixels_clear(self)

    def set(self, *args):
        return _openframeworks.ofFloatPixels_set(self, *args)

    def setFromPixels(self, newPixels, w, h, pixelFormat):
        return _openframeworks.ofFloatPixels_setFromPixels(self, newPixels, w, h, pixelFormat)

    def setFromPixelsImageType(self, newPixels, w, h, type):
        return _openframeworks.ofFloatPixels_setFromPixelsImageType(self, newPixels, w, h, type)

    def setFromExternalPixels(self, newPixels, w, h, pixelFormat):
        return _openframeworks.ofFloatPixels_setFromExternalPixels(self, newPixels, w, h, pixelFormat)

    def setFromAlignedPixels(self, newPixels, width, height, pixelFormat, stride):
        return _openframeworks.ofFloatPixels_setFromAlignedPixels(self, newPixels, width, height, pixelFormat, stride)

    def swap(self, pix):
        return _openframeworks.ofFloatPixels_swap(self, pix)

    def crop(self, x, y, width, height):
        return _openframeworks.ofFloatPixels_crop(self, x, y, width, height)

    def cropTo(self, toPix, x, y, width, height):
        return _openframeworks.ofFloatPixels_cropTo(self, toPix, x, y, width, height)

    def rotate90(self, nClockwiseRotations):
        return _openframeworks.ofFloatPixels_rotate90(self, nClockwiseRotations)

    def rotate90To(self, dst, nClockwiseRotations):
        return _openframeworks.ofFloatPixels_rotate90To(self, dst, nClockwiseRotations)

    def mirrorTo(self, dst, vertically, horizontal):
        return _openframeworks.ofFloatPixels_mirrorTo(self, dst, vertically, horizontal)

    def mirror(self, vertically, horizontal):
        return _openframeworks.ofFloatPixels_mirror(self, vertically, horizontal)

    def resize(self, dstWidth, dstHeight, interpMethod=OF_INTERPOLATE_NEAREST_NEIGHBOR):
        return _openframeworks.ofFloatPixels_resize(self, dstWidth, dstHeight, interpMethod)

    def resizeTo(self, dst, interpMethod=OF_INTERPOLATE_NEAREST_NEIGHBOR):
        return _openframeworks.ofFloatPixels_resizeTo(self, dst, interpMethod)

    def pasteInto(self, dst, x, y):
        return _openframeworks.ofFloatPixels_pasteInto(self, dst, x, y)

    def blendInto(self, dst, x, y):
        return _openframeworks.ofFloatPixels_blendInto(self, dst, x, y)

    def swapRgb(self):
        return _openframeworks.ofFloatPixels_swapRgb(self)

    def getData(self, *args):
        return _openframeworks.ofFloatPixels_getData(self, *args)

    def getPixelIndex(self, x, y):
        return _openframeworks.ofFloatPixels_getPixelIndex(self, x, y)

    def getColor(self, *args):
        return _openframeworks.ofFloatPixels_getColor(self, *args)

    def setColor(self, *args):
        return _openframeworks.ofFloatPixels_setColor(self, *args)

    def __getitem__(self, *args):
        return _openframeworks.ofFloatPixels___getitem__(self, *args)

    def getWidth(self):
        return _openframeworks.ofFloatPixels_getWidth(self)

    def getHeight(self):
        return _openframeworks.ofFloatPixels_getHeight(self)

    def getBytesPerPixel(self):
        return _openframeworks.ofFloatPixels_getBytesPerPixel(self)

    def getBitsPerPixel(self):
        return _openframeworks.ofFloatPixels_getBitsPerPixel(self)

    def getBytesPerChannel(self):
        return _openframeworks.ofFloatPixels_getBytesPerChannel(self)

    def getBitsPerChannel(self):
        return _openframeworks.ofFloatPixels_getBitsPerChannel(self)

    def getBytesStride(self):
        return _openframeworks.ofFloatPixels_getBytesStride(self)

    def getNumChannels(self):
        return _openframeworks.ofFloatPixels_getNumChannels(self)

    def getTotalBytes(self):
        return _openframeworks.ofFloatPixels_getTotalBytes(self)

    def getNumPlanes(self):
        return _openframeworks.ofFloatPixels_getNumPlanes(self)

    def getPlane(self, plane):
        return _openframeworks.ofFloatPixels_getPlane(self, plane)

    def getChannel(self, channel):
        return _openframeworks.ofFloatPixels_getChannel(self, channel)

    def getPixelFormat(self):
        return _openframeworks.ofFloatPixels_getPixelFormat(self)

    def size(self):
        return _openframeworks.ofFloatPixels_size(self)

    def getImageType(self):
        return _openframeworks.ofFloatPixels_getImageType(self)

    def setChannel(self, channel, channelPixels):
        return _openframeworks.ofFloatPixels_setChannel(self, channel, channelPixels)

    def setImageType(self, imageType):
        return _openframeworks.ofFloatPixels_setImageType(self, imageType)

    def setNumChannels(self, numChannels):
        return _openframeworks.ofFloatPixels_setNumChannels(self, numChannels)
ofFloatPixels_swigregister = _openframeworks.ofFloatPixels_swigregister
ofFloatPixels_swigregister(ofFloatPixels)

class ofShortPixels(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_ofShortPixels
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _openframeworks.new_ofShortPixels(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def allocate(self, w, h, channels):
        return _openframeworks.ofShortPixels_allocate(self, w, h, channels)

    def allocatePixelFormat(self, w, h, pixelFormat):
        return _openframeworks.ofShortPixels_allocatePixelFormat(self, w, h, pixelFormat)

    def allocateImageType(self, w, h, imageType):
        return _openframeworks.ofShortPixels_allocateImageType(self, w, h, imageType)

    def isAllocated(self):
        return _openframeworks.ofShortPixels_isAllocated(self)

    def clear(self):
        return _openframeworks.ofShortPixels_clear(self)

    def set(self, *args):
        return _openframeworks.ofShortPixels_set(self, *args)

    def setFromPixels(self, newPixels, w, h, pixelFormat):
        return _openframeworks.ofShortPixels_setFromPixels(self, newPixels, w, h, pixelFormat)

    def setFromPixelsImageType(self, newPixels, w, h, type):
        return _openframeworks.ofShortPixels_setFromPixelsImageType(self, newPixels, w, h, type)

    def setFromExternalPixels(self, newPixels, w, h, pixelFormat):
        return _openframeworks.ofShortPixels_setFromExternalPixels(self, newPixels, w, h, pixelFormat)

    def setFromAlignedPixels(self, newPixels, width, height, pixelFormat, stride):
        return _openframeworks.ofShortPixels_setFromAlignedPixels(self, newPixels, width, height, pixelFormat, stride)

    def swap(self, pix):
        return _openframeworks.ofShortPixels_swap(self, pix)

    def crop(self, x, y, width, height):
        return _openframeworks.ofShortPixels_crop(self, x, y, width, height)

    def cropTo(self, toPix, x, y, width, height):
        return _openframeworks.ofShortPixels_cropTo(self, toPix, x, y, width, height)

    def rotate90(self, nClockwiseRotations):
        return _openframeworks.ofShortPixels_rotate90(self, nClockwiseRotations)

    def rotate90To(self, dst, nClockwiseRotations):
        return _openframeworks.ofShortPixels_rotate90To(self, dst, nClockwiseRotations)

    def mirrorTo(self, dst, vertically, horizontal):
        return _openframeworks.ofShortPixels_mirrorTo(self, dst, vertically, horizontal)

    def mirror(self, vertically, horizontal):
        return _openframeworks.ofShortPixels_mirror(self, vertically, horizontal)

    def resize(self, dstWidth, dstHeight, interpMethod=OF_INTERPOLATE_NEAREST_NEIGHBOR):
        return _openframeworks.ofShortPixels_resize(self, dstWidth, dstHeight, interpMethod)

    def resizeTo(self, dst, interpMethod=OF_INTERPOLATE_NEAREST_NEIGHBOR):
        return _openframeworks.ofShortPixels_resizeTo(self, dst, interpMethod)

    def pasteInto(self, dst, x, y):
        return _openframeworks.ofShortPixels_pasteInto(self, dst, x, y)

    def blendInto(self, dst, x, y):
        return _openframeworks.ofShortPixels_blendInto(self, dst, x, y)

    def swapRgb(self):
        return _openframeworks.ofShortPixels_swapRgb(self)

    def getData(self, *args):
        return _openframeworks.ofShortPixels_getData(self, *args)

    def getPixelIndex(self, x, y):
        return _openframeworks.ofShortPixels_getPixelIndex(self, x, y)

    def getColor(self, *args):
        return _openframeworks.ofShortPixels_getColor(self, *args)

    def setColor(self, *args):
        return _openframeworks.ofShortPixels_setColor(self, *args)

    def __getitem__(self, *args):
        return _openframeworks.ofShortPixels___getitem__(self, *args)

    def getWidth(self):
        return _openframeworks.ofShortPixels_getWidth(self)

    def getHeight(self):
        return _openframeworks.ofShortPixels_getHeight(self)

    def getBytesPerPixel(self):
        return _openframeworks.ofShortPixels_getBytesPerPixel(self)

    def getBitsPerPixel(self):
        return _openframeworks.ofShortPixels_getBitsPerPixel(self)

    def getBytesPerChannel(self):
        return _openframeworks.ofShortPixels_getBytesPerChannel(self)

    def getBitsPerChannel(self):
        return _openframeworks.ofShortPixels_getBitsPerChannel(self)

    def getBytesStride(self):
        return _openframeworks.ofShortPixels_getBytesStride(self)

    def getNumChannels(self):
        return _openframeworks.ofShortPixels_getNumChannels(self)

    def getTotalBytes(self):
        return _openframeworks.ofShortPixels_getTotalBytes(self)

    def getNumPlanes(self):
        return _openframeworks.ofShortPixels_getNumPlanes(self)

    def getPlane(self, plane):
        return _openframeworks.ofShortPixels_getPlane(self, plane)

    def getChannel(self, channel):
        return _openframeworks.ofShortPixels_getChannel(self, channel)

    def getPixelFormat(self):
        return _openframeworks.ofShortPixels_getPixelFormat(self)

    def size(self):
        return _openframeworks.ofShortPixels_size(self)

    def getImageType(self):
        return _openframeworks.ofShortPixels_getImageType(self)

    def setChannel(self, channel, channelPixels):
        return _openframeworks.ofShortPixels_setChannel(self, channel, channelPixels)

    def setImageType(self, imageType):
        return _openframeworks.ofShortPixels_setImageType(self, imageType)

    def setNumChannels(self, numChannels):
        return _openframeworks.ofShortPixels_setNumChannels(self, numChannels)
ofShortPixels_swigregister = _openframeworks.ofShortPixels_swigregister
ofShortPixels_swigregister(ofShortPixels)

class ofPath(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        this = _openframeworks.new_ofPath()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clear(self):
        return _openframeworks.ofPath_clear(self)

    def newSubPath(self):
        return _openframeworks.ofPath_newSubPath(self)

    def close(self):
        return _openframeworks.ofPath_close(self)

    def lineTo(self, *args):
        return _openframeworks.ofPath_lineTo(self, *args)

    def moveTo(self, *args):
        return _openframeworks.ofPath_moveTo(self, *args)

    def curveTo(self, *args):
        return _openframeworks.ofPath_curveTo(self, *args)

    def bezierTo(self, *args):
        return _openframeworks.ofPath_bezierTo(self, *args)

    def quadBezierTo(self, *args):
        return _openframeworks.ofPath_quadBezierTo(self, *args)

    def arc(self, *args):
        return _openframeworks.ofPath_arc(self, *args)

    def arcNegative(self, *args):
        return _openframeworks.ofPath_arcNegative(self, *args)

    def triangle(self, *args):
        return _openframeworks.ofPath_triangle(self, *args)

    def circle(self, *args):
        return _openframeworks.ofPath_circle(self, *args)

    def ellipse(self, *args):
        return _openframeworks.ofPath_ellipse(self, *args)

    def rectangle(self, *args):
        return _openframeworks.ofPath_rectangle(self, *args)

    def rectRounded(self, *args):
        return _openframeworks.ofPath_rectRounded(self, *args)

    def setPolyWindingMode(self, mode):
        return _openframeworks.ofPath_setPolyWindingMode(self, mode)

    def getWindingMode(self):
        return _openframeworks.ofPath_getWindingMode(self)

    def setFilled(self, hasFill):
        return _openframeworks.ofPath_setFilled(self, hasFill)

    def setStrokeWidth(self, width):
        return _openframeworks.ofPath_setStrokeWidth(self, width)

    def setColor(self, color):
        return _openframeworks.ofPath_setColor(self, color)

    def setHexColor(self, hex):
        return _openframeworks.ofPath_setHexColor(self, hex)

    def setFillColor(self, color):
        return _openframeworks.ofPath_setFillColor(self, color)

    def setFillHexColor(self, hex):
        return _openframeworks.ofPath_setFillHexColor(self, hex)

    def setStrokeColor(self, color):
        return _openframeworks.ofPath_setStrokeColor(self, color)

    def setStrokeHexColor(self, hex):
        return _openframeworks.ofPath_setStrokeHexColor(self, hex)

    def isFilled(self):
        return _openframeworks.ofPath_isFilled(self)

    def getFillColor(self):
        return _openframeworks.ofPath_getFillColor(self)

    def getStrokeColor(self):
        return _openframeworks.ofPath_getStrokeColor(self)

    def getStrokeWidth(self):
        return _openframeworks.ofPath_getStrokeWidth(self)

    def hasOutline(self):
        return _openframeworks.ofPath_hasOutline(self)

    def setCurveResolution(self, curveResolution):
        return _openframeworks.ofPath_setCurveResolution(self, curveResolution)

    def getCurveResolution(self):
        return _openframeworks.ofPath_getCurveResolution(self)

    def setCircleResolution(self, circleResolution):
        return _openframeworks.ofPath_setCircleResolution(self, circleResolution)

    def getCircleResolution(self):
        return _openframeworks.ofPath_getCircleResolution(self)

    def setUseShapeColor(self, useColor):
        return _openframeworks.ofPath_setUseShapeColor(self, useColor)

    def getUseShapeColor(self):
        return _openframeworks.ofPath_getUseShapeColor(self)

    def draw(self, *args):
        return _openframeworks.ofPath_draw(self, *args)

    def getOutline(self):
        return _openframeworks.ofPath_getOutline(self)

    def tessellate(self):
        return _openframeworks.ofPath_tessellate(self)

    def getTessellation(self):
        return _openframeworks.ofPath_getTessellation(self)

    def simplify(self, tolerance=0.3):
        return _openframeworks.ofPath_simplify(self, tolerance)

    def translate(self, *args):
        return _openframeworks.ofPath_translate(self, *args)

    def rotateDeg(self, *args):
        return _openframeworks.ofPath_rotateDeg(self, *args)

    def rotateRad(self, *args):
        return _openframeworks.ofPath_rotateRad(self, *args)

    def scale(self, x, y):
        return _openframeworks.ofPath_scale(self, x, y)

    def append(self, path):
        return _openframeworks.ofPath_append(self, path)
    COMMANDS = _openframeworks.ofPath_COMMANDS
    POLYLINES = _openframeworks.ofPath_POLYLINES

    def setMode(self, mode):
        return _openframeworks.ofPath_setMode(self, mode)

    def getMode(self):
        return _openframeworks.ofPath_getMode(self)

    def getCommands(self, *args):
        return _openframeworks.ofPath_getCommands(self, *args)
    __swig_destroy__ = _openframeworks.delete_ofPath
    __del__ = lambda self: None
ofPath_swigregister = _openframeworks.ofPath_swigregister
ofPath_swigregister(ofPath)

class PolylineVector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _openframeworks.PolylineVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openframeworks.PolylineVector___nonzero__(self)

    def __bool__(self):
        return _openframeworks.PolylineVector___bool__(self)

    def __len__(self):
        return _openframeworks.PolylineVector___len__(self)

    def __getslice__(self, i, j):
        return _openframeworks.PolylineVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openframeworks.PolylineVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openframeworks.PolylineVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openframeworks.PolylineVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openframeworks.PolylineVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openframeworks.PolylineVector___setitem__(self, *args)

    def pop(self):
        return _openframeworks.PolylineVector_pop(self)

    def append(self, x):
        return _openframeworks.PolylineVector_append(self, x)

    def empty(self):
        return _openframeworks.PolylineVector_empty(self)

    def size(self):
        return _openframeworks.PolylineVector_size(self)

    def swap(self, v):
        return _openframeworks.PolylineVector_swap(self, v)

    def begin(self):
        return _openframeworks.PolylineVector_begin(self)

    def end(self):
        return _openframeworks.PolylineVector_end(self)

    def rbegin(self):
        return _openframeworks.PolylineVector_rbegin(self)

    def rend(self):
        return _openframeworks.PolylineVector_rend(self)

    def clear(self):
        return _openframeworks.PolylineVector_clear(self)

    def get_allocator(self):
        return _openframeworks.PolylineVector_get_allocator(self)

    def pop_back(self):
        return _openframeworks.PolylineVector_pop_back(self)

    def erase(self, *args):
        return _openframeworks.PolylineVector_erase(self, *args)

    def __init__(self, *args):
        this = _openframeworks.new_PolylineVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _openframeworks.PolylineVector_push_back(self, x)

    def front(self):
        return _openframeworks.PolylineVector_front(self)

    def back(self):
        return _openframeworks.PolylineVector_back(self)

    def assign(self, n, x):
        return _openframeworks.PolylineVector_assign(self, n, x)

    def resize(self, *args):
        return _openframeworks.PolylineVector_resize(self, *args)

    def insert(self, *args):
        return _openframeworks.PolylineVector_insert(self, *args)

    def reserve(self, n):
        return _openframeworks.PolylineVector_reserve(self, n)

    def capacity(self):
        return _openframeworks.PolylineVector_capacity(self)
    __swig_destroy__ = _openframeworks.delete_PolylineVector
    __del__ = lambda self: None
PolylineVector_swigregister = _openframeworks.PolylineVector_swigregister
PolylineVector_swigregister(PolylineVector)

class ofPolyline(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openframeworks.new_ofPolyline(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    fromRectangle = staticmethod(_openframeworks.ofPolyline_fromRectangle)

    def clear(self):
        return _openframeworks.ofPolyline_clear(self)

    def addVertex(self, *args):
        return _openframeworks.ofPolyline_addVertex(self, *args)

    def addVertices(self, *args):
        return _openframeworks.ofPolyline_addVertices(self, *args)

    def insertVertex(self, *args):
        return _openframeworks.ofPolyline_insertVertex(self, *args)

    def resize(self, size):
        return _openframeworks.ofPolyline_resize(self, size)

    def size(self):
        return _openframeworks.ofPolyline_size(self)

    def __getitem__(self, *args):
        return _openframeworks.ofPolyline___getitem__(self, *args)

    def getVertices(self, *args):
        return _openframeworks.ofPolyline_getVertices(self, *args)

    def lineTo(self, *args):
        return _openframeworks.ofPolyline_lineTo(self, *args)

    def arc(self, *args):
        return _openframeworks.ofPolyline_arc(self, *args)

    def arcNegative(self, *args):
        return _openframeworks.ofPolyline_arcNegative(self, *args)

    def curveTo(self, *args):
        return _openframeworks.ofPolyline_curveTo(self, *args)

    def bezierTo(self, *args):
        return _openframeworks.ofPolyline_bezierTo(self, *args)

    def quadBezierTo(self, *args):
        return _openframeworks.ofPolyline_quadBezierTo(self, *args)

    def getSmoothed(self, smoothingSize, smoothingShape=0):
        return _openframeworks.ofPolyline_getSmoothed(self, smoothingSize, smoothingShape)

    def getResampledBySpacing(self, spacing):
        return _openframeworks.ofPolyline_getResampledBySpacing(self, spacing)

    def getResampledByCount(self, count):
        return _openframeworks.ofPolyline_getResampledByCount(self, count)

    def simplify(self, tolerance=0.3):
        return _openframeworks.ofPolyline_simplify(self, tolerance)

    def rotateDeg(self, *args):
        return _openframeworks.ofPolyline_rotateDeg(self, *args)

    def rotateRad(self, *args):
        return _openframeworks.ofPolyline_rotateRad(self, *args)

    def translate(self, *args):
        return _openframeworks.ofPolyline_translate(self, *args)

    def scale(self, x, y):
        return _openframeworks.ofPolyline_scale(self, x, y)

    def close(self):
        return _openframeworks.ofPolyline_close(self)

    def setClosed(self, tf):
        return _openframeworks.ofPolyline_setClosed(self, tf)

    def isClosed(self):
        return _openframeworks.ofPolyline_isClosed(self)

    def hasChanged(self):
        return _openframeworks.ofPolyline_hasChanged(self)

    def flagHasChanged(self):
        return _openframeworks.ofPolyline_flagHasChanged(self)

    def inside(self, *args):
        return _openframeworks.ofPolyline_inside(self, *args)

    def getBoundingBox(self):
        return _openframeworks.ofPolyline_getBoundingBox(self)

    def getPerimeter(self):
        return _openframeworks.ofPolyline_getPerimeter(self)

    def getArea(self):
        return _openframeworks.ofPolyline_getArea(self)

    def getCentroid2D(self):
        return _openframeworks.ofPolyline_getCentroid2D(self)

    def getClosestPoint(self, target, nearestIndex=None):
        return _openframeworks.ofPolyline_getClosestPoint(self, target, nearestIndex)

    def getIndexAtLength(self, f):
        return _openframeworks.ofPolyline_getIndexAtLength(self, f)

    def getIndexAtPercent(self, f):
        return _openframeworks.ofPolyline_getIndexAtPercent(self, f)

    def getLengthAtIndex(self, index):
        return _openframeworks.ofPolyline_getLengthAtIndex(self, index)

    def getLengthAtIndexInterpolated(self, findex):
        return _openframeworks.ofPolyline_getLengthAtIndexInterpolated(self, findex)

    def getPointAtLength(self, f):
        return _openframeworks.ofPolyline_getPointAtLength(self, f)

    def getPointAtPercent(self, f):
        return _openframeworks.ofPolyline_getPointAtPercent(self, f)

    def getPointAtIndexInterpolated(self, findex):
        return _openframeworks.ofPolyline_getPointAtIndexInterpolated(self, findex)

    def getRotationAtIndex(self, index):
        return _openframeworks.ofPolyline_getRotationAtIndex(self, index)

    def getRotationAtIndexInterpolated(self, findex):
        return _openframeworks.ofPolyline_getRotationAtIndexInterpolated(self, findex)

    def getDegreesAtIndex(self, index):
        return _openframeworks.ofPolyline_getDegreesAtIndex(self, index)

    def getDegreesAtIndexInterpolated(self, findex):
        return _openframeworks.ofPolyline_getDegreesAtIndexInterpolated(self, findex)

    def getRadiansAtIndex(self, index):
        return _openframeworks.ofPolyline_getRadiansAtIndex(self, index)

    def getRadiansAtIndexInterpolated(self, findex):
        return _openframeworks.ofPolyline_getRadiansAtIndexInterpolated(self, findex)

    def getTangentAtIndex(self, index):
        return _openframeworks.ofPolyline_getTangentAtIndex(self, index)

    def getTangentAtIndexInterpolated(self, findex):
        return _openframeworks.ofPolyline_getTangentAtIndexInterpolated(self, findex)

    def getNormalAtIndex(self, index):
        return _openframeworks.ofPolyline_getNormalAtIndex(self, index)

    def getNormalAtIndexInterpolated(self, findex):
        return _openframeworks.ofPolyline_getNormalAtIndexInterpolated(self, findex)

    def getWrappedIndex(self, index):
        return _openframeworks.ofPolyline_getWrappedIndex(self, index)

    def setRightVector(self, *args):
        return _openframeworks.ofPolyline_setRightVector(self, *args)

    def getRightVector(self):
        return _openframeworks.ofPolyline_getRightVector(self)

    def draw(self):
        return _openframeworks.ofPolyline_draw(self)
    __swig_destroy__ = _openframeworks.delete_ofPolyline
    __del__ = lambda self: None
ofPolyline_swigregister = _openframeworks.ofPolyline_swigregister
ofPolyline_swigregister(ofPolyline)

def ofPolyline_fromRectangle(rect):
    return _openframeworks.ofPolyline_fromRectangle(rect)
ofPolyline_fromRectangle = _openframeworks.ofPolyline_fromRectangle


def ofDrawBitmapString(*args):
    return _openframeworks.ofDrawBitmapString(*args)
ofDrawBitmapString = _openframeworks.ofDrawBitmapString
CIRC_RESOLUTION = _openframeworks.CIRC_RESOLUTION

def ofSetColor(*args):
    return _openframeworks.ofSetColor(*args)
ofSetColor = _openframeworks.ofSetColor

def ofSetHexColor(hexColor):
    return _openframeworks.ofSetHexColor(hexColor)
ofSetHexColor = _openframeworks.ofSetHexColor

def ofNoFill():
    return _openframeworks.ofNoFill()
ofNoFill = _openframeworks.ofNoFill

def ofFill():
    return _openframeworks.ofFill()
ofFill = _openframeworks.ofFill

def ofGetFill():
    return _openframeworks.ofGetFill()
ofGetFill = _openframeworks.ofGetFill

def ofGetBackgroundColor():
    return _openframeworks.ofGetBackgroundColor()
ofGetBackgroundColor = _openframeworks.ofGetBackgroundColor

def ofBackground(*args):
    return _openframeworks.ofBackground(*args)
ofBackground = _openframeworks.ofBackground

def ofBackgroundHex(hexColor, alpha=255):
    return _openframeworks.ofBackgroundHex(hexColor, alpha)
ofBackgroundHex = _openframeworks.ofBackgroundHex

def ofBackgroundGradient(start, end, mode=OF_GRADIENT_CIRCULAR):
    return _openframeworks.ofBackgroundGradient(start, end, mode)
ofBackgroundGradient = _openframeworks.ofBackgroundGradient

def ofSetBackgroundColor(*args):
    return _openframeworks.ofSetBackgroundColor(*args)
ofSetBackgroundColor = _openframeworks.ofSetBackgroundColor

def ofSetBackgroundColorHex(hexColor, alpha=255):
    return _openframeworks.ofSetBackgroundColorHex(hexColor, alpha)
ofSetBackgroundColorHex = _openframeworks.ofSetBackgroundColorHex

def ofSetBackgroundAuto(bManual):
    return _openframeworks.ofSetBackgroundAuto(bManual)
ofSetBackgroundAuto = _openframeworks.ofSetBackgroundAuto

def ofGetBackgroundAuto():
    return _openframeworks.ofGetBackgroundAuto()
ofGetBackgroundAuto = _openframeworks.ofGetBackgroundAuto

def ofClear(*args):
    return _openframeworks.ofClear(*args)
ofClear = _openframeworks.ofClear

def ofClearAlpha():
    return _openframeworks.ofClearAlpha()
ofClearAlpha = _openframeworks.ofClearAlpha

def ofDrawTriangle(*args):
    return _openframeworks.ofDrawTriangle(*args)
ofDrawTriangle = _openframeworks.ofDrawTriangle

def ofDrawCircle(*args):
    return _openframeworks.ofDrawCircle(*args)
ofDrawCircle = _openframeworks.ofDrawCircle

def ofDrawEllipse(*args):
    return _openframeworks.ofDrawEllipse(*args)
ofDrawEllipse = _openframeworks.ofDrawEllipse

def ofDrawLine(*args):
    return _openframeworks.ofDrawLine(*args)
ofDrawLine = _openframeworks.ofDrawLine

def ofDrawRectangle(*args):
    return _openframeworks.ofDrawRectangle(*args)
ofDrawRectangle = _openframeworks.ofDrawRectangle

def ofDrawRectRounded(*args):
    return _openframeworks.ofDrawRectRounded(*args)
ofDrawRectRounded = _openframeworks.ofDrawRectRounded

def ofDrawCurve(*args):
    return _openframeworks.ofDrawCurve(*args)
ofDrawCurve = _openframeworks.ofDrawCurve

def ofDrawBezier(*args):
    return _openframeworks.ofDrawBezier(*args)
ofDrawBezier = _openframeworks.ofDrawBezier

def ofBeginShape():
    return _openframeworks.ofBeginShape()
ofBeginShape = _openframeworks.ofBeginShape

def ofVertex(*args):
    return _openframeworks.ofVertex(*args)
ofVertex = _openframeworks.ofVertex

def ofVertices(*args):
    return _openframeworks.ofVertices(*args)
ofVertices = _openframeworks.ofVertices

def ofCurveVertex(*args):
    return _openframeworks.ofCurveVertex(*args)
ofCurveVertex = _openframeworks.ofCurveVertex

def ofCurveVertices(*args):
    return _openframeworks.ofCurveVertices(*args)
ofCurveVertices = _openframeworks.ofCurveVertices

def ofBezierVertex(*args):
    return _openframeworks.ofBezierVertex(*args)
ofBezierVertex = _openframeworks.ofBezierVertex
OF_OPEN = _openframeworks.OF_OPEN
OF_CLOSE = _openframeworks.OF_CLOSE

def ofEndShape(bClose=False):
    return _openframeworks.ofEndShape(bClose)
ofEndShape = _openframeworks.ofEndShape

def ofNextContour(bClose=False):
    return _openframeworks.ofNextContour(bClose)
ofNextContour = _openframeworks.ofNextContour

def ofSetDrawBitmapMode(mode):
    return _openframeworks.ofSetDrawBitmapMode(mode)
ofSetDrawBitmapMode = _openframeworks.ofSetDrawBitmapMode

def ofDrawBitmapStringHighlight(*args):
    return _openframeworks.ofDrawBitmapStringHighlight(*args)
ofDrawBitmapStringHighlight = _openframeworks.ofDrawBitmapStringHighlight

def ofSetupGraphicDefaults():
    return _openframeworks.ofSetupGraphicDefaults()
ofSetupGraphicDefaults = _openframeworks.ofSetupGraphicDefaults

def ofSetupScreen():
    return _openframeworks.ofSetupScreen()
ofSetupScreen = _openframeworks.ofSetupScreen

def ofGetRectMode():
    return _openframeworks.ofGetRectMode()
ofGetRectMode = _openframeworks.ofGetRectMode

def ofSetCircleResolution(res):
    return _openframeworks.ofSetCircleResolution(res)
ofSetCircleResolution = _openframeworks.ofSetCircleResolution

def ofSetCurveResolution(res):
    return _openframeworks.ofSetCurveResolution(res)
ofSetCurveResolution = _openframeworks.ofSetCurveResolution

def ofSetLineWidth(lineWidth):
    return _openframeworks.ofSetLineWidth(lineWidth)
ofSetLineWidth = _openframeworks.ofSetLineWidth

def ofSetDepthTest(depthTest):
    return _openframeworks.ofSetDepthTest(depthTest)
ofSetDepthTest = _openframeworks.ofSetDepthTest

def ofEnableDepthTest():
    return _openframeworks.ofEnableDepthTest()
ofEnableDepthTest = _openframeworks.ofEnableDepthTest

def ofDisableDepthTest():
    return _openframeworks.ofDisableDepthTest()
ofDisableDepthTest = _openframeworks.ofDisableDepthTest

def ofEnableBlendMode(blendMode):
    return _openframeworks.ofEnableBlendMode(blendMode)
ofEnableBlendMode = _openframeworks.ofEnableBlendMode

def ofDisableBlendMode():
    return _openframeworks.ofDisableBlendMode()
ofDisableBlendMode = _openframeworks.ofDisableBlendMode

def ofEnablePointSprites():
    return _openframeworks.ofEnablePointSprites()
ofEnablePointSprites = _openframeworks.ofEnablePointSprites

def ofDisablePointSprites():
    return _openframeworks.ofDisablePointSprites()
ofDisablePointSprites = _openframeworks.ofDisablePointSprites

def ofEnableAlphaBlending():
    return _openframeworks.ofEnableAlphaBlending()
ofEnableAlphaBlending = _openframeworks.ofEnableAlphaBlending

def ofDisableAlphaBlending():
    return _openframeworks.ofDisableAlphaBlending()
ofDisableAlphaBlending = _openframeworks.ofDisableAlphaBlending

def ofEnableSmoothing():
    return _openframeworks.ofEnableSmoothing()
ofEnableSmoothing = _openframeworks.ofEnableSmoothing

def ofDisableSmoothing():
    return _openframeworks.ofDisableSmoothing()
ofDisableSmoothing = _openframeworks.ofDisableSmoothing

def ofEnableAntiAliasing():
    return _openframeworks.ofEnableAntiAliasing()
ofEnableAntiAliasing = _openframeworks.ofEnableAntiAliasing

def ofDisableAntiAliasing():
    return _openframeworks.ofDisableAntiAliasing()
ofDisableAntiAliasing = _openframeworks.ofDisableAntiAliasing

def ofGetStyle():
    return _openframeworks.ofGetStyle()
ofGetStyle = _openframeworks.ofGetStyle

def ofSetStyle(style):
    return _openframeworks.ofSetStyle(style)
ofSetStyle = _openframeworks.ofSetStyle

def ofPushStyle():
    return _openframeworks.ofPushStyle()
ofPushStyle = _openframeworks.ofPushStyle

def ofPopStyle():
    return _openframeworks.ofPopStyle()
ofPopStyle = _openframeworks.ofPopStyle

def ofSetPolyMode(mode):
    return _openframeworks.ofSetPolyMode(mode)
ofSetPolyMode = _openframeworks.ofSetPolyMode

def ofSetRectMode(mode):
    return _openframeworks.ofSetRectMode(mode)
ofSetRectMode = _openframeworks.ofSetRectMode

def ofPushMatrix():
    return _openframeworks.ofPushMatrix()
ofPushMatrix = _openframeworks.ofPushMatrix

def ofPopMatrix():
    return _openframeworks.ofPopMatrix()
ofPopMatrix = _openframeworks.ofPopMatrix

def ofGetCurrentMatrix(matrixMode):
    return _openframeworks.ofGetCurrentMatrix(matrixMode)
ofGetCurrentMatrix = _openframeworks.ofGetCurrentMatrix

def ofGetCurrentOrientationMatrix():
    return _openframeworks.ofGetCurrentOrientationMatrix()
ofGetCurrentOrientationMatrix = _openframeworks.ofGetCurrentOrientationMatrix

def ofGetCurrentNormalMatrix():
    return _openframeworks.ofGetCurrentNormalMatrix()
ofGetCurrentNormalMatrix = _openframeworks.ofGetCurrentNormalMatrix

def ofTranslate(*args):
    return _openframeworks.ofTranslate(*args)
ofTranslate = _openframeworks.ofTranslate

def ofScale(*args):
    return _openframeworks.ofScale(*args)
ofScale = _openframeworks.ofScale

def ofRotateDeg(*args):
    return _openframeworks.ofRotateDeg(*args)
ofRotateDeg = _openframeworks.ofRotateDeg

def ofRotateXDeg(degrees):
    return _openframeworks.ofRotateXDeg(degrees)
ofRotateXDeg = _openframeworks.ofRotateXDeg

def ofRotateYDeg(degrees):
    return _openframeworks.ofRotateYDeg(degrees)
ofRotateYDeg = _openframeworks.ofRotateYDeg

def ofRotateZDeg(degrees):
    return _openframeworks.ofRotateZDeg(degrees)
ofRotateZDeg = _openframeworks.ofRotateZDeg

def ofRotateRad(*args):
    return _openframeworks.ofRotateRad(*args)
ofRotateRad = _openframeworks.ofRotateRad

def ofRotateXRad(degrees):
    return _openframeworks.ofRotateXRad(degrees)
ofRotateXRad = _openframeworks.ofRotateXRad

def ofRotateYRad(degrees):
    return _openframeworks.ofRotateYRad(degrees)
ofRotateYRad = _openframeworks.ofRotateYRad

def ofRotateZRad(degrees):
    return _openframeworks.ofRotateZRad(degrees)
ofRotateZRad = _openframeworks.ofRotateZRad

def ofLoadIdentityMatrix():
    return _openframeworks.ofLoadIdentityMatrix()
ofLoadIdentityMatrix = _openframeworks.ofLoadIdentityMatrix

def ofLoadMatrix(*args):
    return _openframeworks.ofLoadMatrix(*args)
ofLoadMatrix = _openframeworks.ofLoadMatrix

def ofMultMatrix(*args):
    return _openframeworks.ofMultMatrix(*args)
ofMultMatrix = _openframeworks.ofMultMatrix

def ofSetMatrixMode(matrixMode):
    return _openframeworks.ofSetMatrixMode(matrixMode)
ofSetMatrixMode = _openframeworks.ofSetMatrixMode

def ofLoadViewMatrix(m):
    return _openframeworks.ofLoadViewMatrix(m)
ofLoadViewMatrix = _openframeworks.ofLoadViewMatrix

def ofMultViewMatrix(m):
    return _openframeworks.ofMultViewMatrix(m)
ofMultViewMatrix = _openframeworks.ofMultViewMatrix

def ofGetCurrentViewMatrix():
    return _openframeworks.ofGetCurrentViewMatrix()
ofGetCurrentViewMatrix = _openframeworks.ofGetCurrentViewMatrix

def ofPushView():
    return _openframeworks.ofPushView()
ofPushView = _openframeworks.ofPushView

def ofPopView():
    return _openframeworks.ofPopView()
ofPopView = _openframeworks.ofPopView

def ofIsVFlipped():
    return _openframeworks.ofIsVFlipped()
ofIsVFlipped = _openframeworks.ofIsVFlipped

def ofViewport(*args):
    return _openframeworks.ofViewport(*args)
ofViewport = _openframeworks.ofViewport

def ofGetCurrentViewport():
    return _openframeworks.ofGetCurrentViewport()
ofGetCurrentViewport = _openframeworks.ofGetCurrentViewport

def ofGetNativeViewport():
    return _openframeworks.ofGetNativeViewport()
ofGetNativeViewport = _openframeworks.ofGetNativeViewport

def ofGetViewportWidth():
    return _openframeworks.ofGetViewportWidth()
ofGetViewportWidth = _openframeworks.ofGetViewportWidth

def ofGetViewportHeight():
    return _openframeworks.ofGetViewportHeight()
ofGetViewportHeight = _openframeworks.ofGetViewportHeight

def ofSetupScreenPerspective(width=-1, height=-1, fov=60, nearDist=0, farDist=0):
    return _openframeworks.ofSetupScreenPerspective(width, height, fov, nearDist, farDist)
ofSetupScreenPerspective = _openframeworks.ofSetupScreenPerspective

def ofSetupScreenOrtho(width=-1, height=-1, nearDist=-1, farDist=1):
    return _openframeworks.ofSetupScreenOrtho(width, height, nearDist, farDist)
ofSetupScreenOrtho = _openframeworks.ofSetupScreenOrtho

def ofOrientationToDegrees(orientation):
    return _openframeworks.ofOrientationToDegrees(orientation)
ofOrientationToDegrees = _openframeworks.ofOrientationToDegrees

def ofSetCoordHandedness(handedness):
    return _openframeworks.ofSetCoordHandedness(handedness)
ofSetCoordHandedness = _openframeworks.ofSetCoordHandedness

def ofGetCoordHandedness():
    return _openframeworks.ofGetCoordHandedness()
ofGetCoordHandedness = _openframeworks.ofGetCoordHandedness

def ofBeginSaveScreenAsPDF(*args):
    return _openframeworks.ofBeginSaveScreenAsPDF(*args)
ofBeginSaveScreenAsPDF = _openframeworks.ofBeginSaveScreenAsPDF

def ofEndSaveScreenAsPDF():
    return _openframeworks.ofEndSaveScreenAsPDF()
ofEndSaveScreenAsPDF = _openframeworks.ofEndSaveScreenAsPDF

def ofBeginSaveScreenAsSVG(*args):
    return _openframeworks.ofBeginSaveScreenAsSVG(*args)
ofBeginSaveScreenAsSVG = _openframeworks.ofBeginSaveScreenAsSVG

def ofEndSaveScreenAsSVG():
    return _openframeworks.ofEndSaveScreenAsSVG()
ofEndSaveScreenAsSVG = _openframeworks.ofEndSaveScreenAsSVG

def ofSetPlaneResolution(columns, rows):
    return _openframeworks.ofSetPlaneResolution(columns, rows)
ofSetPlaneResolution = _openframeworks.ofSetPlaneResolution

def ofGetPlaneResolution():
    return _openframeworks.ofGetPlaneResolution()
ofGetPlaneResolution = _openframeworks.ofGetPlaneResolution

def ofDrawPlane(*args):
    return _openframeworks.ofDrawPlane(*args)
ofDrawPlane = _openframeworks.ofDrawPlane

def ofSetSphereResolution(res):
    return _openframeworks.ofSetSphereResolution(res)
ofSetSphereResolution = _openframeworks.ofSetSphereResolution

def ofGetSphereResolution():
    return _openframeworks.ofGetSphereResolution()
ofGetSphereResolution = _openframeworks.ofGetSphereResolution

def ofDrawSphere(*args):
    return _openframeworks.ofDrawSphere(*args)
ofDrawSphere = _openframeworks.ofDrawSphere

def ofSetIcoSphereResolution(res):
    return _openframeworks.ofSetIcoSphereResolution(res)
ofSetIcoSphereResolution = _openframeworks.ofSetIcoSphereResolution

def ofGetIcoSphereResolution():
    return _openframeworks.ofGetIcoSphereResolution()
ofGetIcoSphereResolution = _openframeworks.ofGetIcoSphereResolution

def ofDrawIcoSphere(*args):
    return _openframeworks.ofDrawIcoSphere(*args)
ofDrawIcoSphere = _openframeworks.ofDrawIcoSphere

def ofSetCylinderResolution(radiusSegments, heightSegments, capSegments=2):
    return _openframeworks.ofSetCylinderResolution(radiusSegments, heightSegments, capSegments)
ofSetCylinderResolution = _openframeworks.ofSetCylinderResolution

def ofGetCylinderResolution():
    return _openframeworks.ofGetCylinderResolution()
ofGetCylinderResolution = _openframeworks.ofGetCylinderResolution

def ofDrawCylinder(*args):
    return _openframeworks.ofDrawCylinder(*args)
ofDrawCylinder = _openframeworks.ofDrawCylinder

def ofSetConeResolution(radiusSegments, heightSegments, capSegments=2):
    return _openframeworks.ofSetConeResolution(radiusSegments, heightSegments, capSegments)
ofSetConeResolution = _openframeworks.ofSetConeResolution

def ofGetConeResolution():
    return _openframeworks.ofGetConeResolution()
ofGetConeResolution = _openframeworks.ofGetConeResolution

def ofDrawCone(*args):
    return _openframeworks.ofDrawCone(*args)
ofDrawCone = _openframeworks.ofDrawCone

def ofSetBoxResolution(*args):
    return _openframeworks.ofSetBoxResolution(*args)
ofSetBoxResolution = _openframeworks.ofSetBoxResolution

def ofGetBoxResolution():
    return _openframeworks.ofGetBoxResolution()
ofGetBoxResolution = _openframeworks.ofGetBoxResolution

def ofDrawBox(*args):
    return _openframeworks.ofDrawBox(*args)
ofDrawBox = _openframeworks.ofDrawBox
OF_TTF_LEFT_TO_RIGHT = _openframeworks.OF_TTF_LEFT_TO_RIGHT
OF_TTF_RIGHT_TO_LEFT = _openframeworks.OF_TTF_RIGHT_TO_LEFT
class ofTrueTypeFont(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_ofTrueTypeFont
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _openframeworks.new_ofTrueTypeFont(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def load(self, filename, fontsize, _bAntiAliased=True, _bFullCharacterSet=True, makeContours=False, simplifyAmt=0.3, dpi=0):
        return _openframeworks.ofTrueTypeFont_load(self, filename, fontsize, _bAntiAliased, _bFullCharacterSet, makeContours, simplifyAmt, dpi)

    def isLoaded(self):
        return _openframeworks.ofTrueTypeFont_isLoaded(self)
    setGlobalDpi = staticmethod(_openframeworks.ofTrueTypeFont_setGlobalDpi)

    def isAntiAliased(self):
        return _openframeworks.ofTrueTypeFont_isAntiAliased(self)

    def hasFullCharacterSet(self):
        return _openframeworks.ofTrueTypeFont_hasFullCharacterSet(self)

    def getNumCharacters(self):
        return _openframeworks.ofTrueTypeFont_getNumCharacters(self)

    def getSize(self):
        return _openframeworks.ofTrueTypeFont_getSize(self)

    def getLineHeight(self):
        return _openframeworks.ofTrueTypeFont_getLineHeight(self)

    def setLineHeight(self, height):
        return _openframeworks.ofTrueTypeFont_setLineHeight(self, height)

    def getAscenderHeight(self):
        return _openframeworks.ofTrueTypeFont_getAscenderHeight(self)

    def getDescenderHeight(self):
        return _openframeworks.ofTrueTypeFont_getDescenderHeight(self)

    def getGlyphBBox(self):
        return _openframeworks.ofTrueTypeFont_getGlyphBBox(self)

    def getLetterSpacing(self):
        return _openframeworks.ofTrueTypeFont_getLetterSpacing(self)

    def setLetterSpacing(self, spacing):
        return _openframeworks.ofTrueTypeFont_setLetterSpacing(self, spacing)

    def getSpaceSize(self):
        return _openframeworks.ofTrueTypeFont_getSpaceSize(self)

    def setSpaceSize(self, size):
        return _openframeworks.ofTrueTypeFont_setSpaceSize(self, size)

    def stringWidth(self, s):
        return _openframeworks.ofTrueTypeFont_stringWidth(self, s)

    def stringHeight(self, s):
        return _openframeworks.ofTrueTypeFont_stringHeight(self, s)

    def getStringBoundingBox(self, s, x, y, vflip=True):
        return _openframeworks.ofTrueTypeFont_getStringBoundingBox(self, s, x, y, vflip)

    def drawString(self, s, x, y):
        return _openframeworks.ofTrueTypeFont_drawString(self, s, x, y)

    def drawStringAsShapes(self, s, x, y):
        return _openframeworks.ofTrueTypeFont_drawStringAsShapes(self, s, x, y)

    def getCharacterAsPoints(self, character, vflip=True, filled=True):
        return _openframeworks.ofTrueTypeFont_getCharacterAsPoints(self, character, vflip, filled)

    def getStringAsPoints(self, str, vflip=True, filled=True):
        return _openframeworks.ofTrueTypeFont_getStringAsPoints(self, str, vflip, filled)

    def getStringMesh(self, s, x, y, vflip=True):
        return _openframeworks.ofTrueTypeFont_getStringMesh(self, s, x, y, vflip)

    def getFontTexture(self):
        return _openframeworks.ofTrueTypeFont_getFontTexture(self)

    def getStringTexture(self, s, vflip=True):
        return _openframeworks.ofTrueTypeFont_getStringTexture(self, s, vflip)

    def getFirstGlyphPosForTexture(self, str, vflip):
        return _openframeworks.ofTrueTypeFont_getFirstGlyphPosForTexture(self, str, vflip)

    def isValidGlyph(self, arg2):
        return _openframeworks.ofTrueTypeFont_isValidGlyph(self, arg2)
ofTrueTypeFont_swigregister = _openframeworks.ofTrueTypeFont_swigregister
ofTrueTypeFont_swigregister(ofTrueTypeFont)
cvar = _openframeworks.cvar
OF_TTF_SANS = cvar.OF_TTF_SANS
OF_TTF_SERIF = cvar.OF_TTF_SERIF
OF_TTF_MONO = cvar.OF_TTF_MONO

def ofTrueTypeFont_setGlobalDpi(newDpi):
    return _openframeworks.ofTrueTypeFont_setGlobalDpi(newDpi)
ofTrueTypeFont_setGlobalDpi = _openframeworks.ofTrueTypeFont_setGlobalDpi


def ofSoundStreamSetup(settings):
    return _openframeworks.ofSoundStreamSetup(settings)
ofSoundStreamSetup = _openframeworks.ofSoundStreamSetup

def ofSoundStreamStop():
    return _openframeworks.ofSoundStreamStop()
ofSoundStreamStop = _openframeworks.ofSoundStreamStop

def ofSoundStreamStart():
    return _openframeworks.ofSoundStreamStart()
ofSoundStreamStart = _openframeworks.ofSoundStreamStart

def ofSoundStreamClose():
    return _openframeworks.ofSoundStreamClose()
ofSoundStreamClose = _openframeworks.ofSoundStreamClose

def ofSoundStreamListDevices():
    return _openframeworks.ofSoundStreamListDevices()
ofSoundStreamListDevices = _openframeworks.ofSoundStreamListDevices
class ofSoundStream(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        this = _openframeworks.new_ofSoundStream()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setSoundStream(self, soundStreamPtr):
        return _openframeworks.ofSoundStream_setSoundStream(self, soundStreamPtr)

    def getSoundStream(self):
        return _openframeworks.ofSoundStream_getSoundStream(self)

    def printDeviceList(self):
        return _openframeworks.ofSoundStream_printDeviceList(self)

    def getDeviceList(self, *args):
        return _openframeworks.ofSoundStream_getDeviceList(self, *args)

    def getMatchingDevices(self, *args):
        return _openframeworks.ofSoundStream_getMatchingDevices(self, *args)

    def setup(self, settings):
        return _openframeworks.ofSoundStream_setup(self, settings)

    def setInput(self, soundInput):
        return _openframeworks.ofSoundStream_setInput(self, soundInput)

    def setOutput(self, soundOutput):
        return _openframeworks.ofSoundStream_setOutput(self, soundOutput)

    def start(self):
        return _openframeworks.ofSoundStream_start(self)

    def stop(self):
        return _openframeworks.ofSoundStream_stop(self)

    def close(self):
        return _openframeworks.ofSoundStream_close(self)

    def getTickCount(self):
        return _openframeworks.ofSoundStream_getTickCount(self)

    def getNumInputChannels(self):
        return _openframeworks.ofSoundStream_getNumInputChannels(self)

    def getNumOutputChannels(self):
        return _openframeworks.ofSoundStream_getNumOutputChannels(self)

    def getSampleRate(self):
        return _openframeworks.ofSoundStream_getSampleRate(self)

    def getBufferSize(self):
        return _openframeworks.ofSoundStream_getBufferSize(self)
    __swig_destroy__ = _openframeworks.delete_ofSoundStream
    __del__ = lambda self: None
ofSoundStream_swigregister = _openframeworks.ofSoundStream_swigregister
ofSoundStream_swigregister(ofSoundStream)

class ofSoundPlayer(ofBaseSoundPlayer):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        this = _openframeworks.new_ofSoundPlayer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setPlayer(self, newPlayer):
        return _openframeworks.ofSoundPlayer_setPlayer(self, newPlayer)

    def getPlayer(self):
        return _openframeworks.ofSoundPlayer_getPlayer(self)

    def load(self, fileName, stream=False):
        return _openframeworks.ofSoundPlayer_load(self, fileName, stream)
    __swig_destroy__ = _openframeworks.delete_ofSoundPlayer
    __del__ = lambda self: None
ofSoundPlayer_swigregister = _openframeworks.ofSoundPlayer_swigregister
ofSoundPlayer_swigregister(ofSoundPlayer)

class ofColor(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openframeworks.new_ofColor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    fromHsb = staticmethod(_openframeworks.ofColor_fromHsb)
    fromHex = staticmethod(_openframeworks.ofColor_fromHex)

    def set(self, *args):
        return _openframeworks.ofColor_set(self, *args)

    def setHex(self, *args):
        return _openframeworks.ofColor_setHex(self, *args)

    def setHue(self, hue):
        return _openframeworks.ofColor_setHue(self, hue)

    def setHueAngle(self, angle):
        return _openframeworks.ofColor_setHueAngle(self, angle)

    def setSaturation(self, saturation):
        return _openframeworks.ofColor_setSaturation(self, saturation)

    def setBrightness(self, brightness):
        return _openframeworks.ofColor_setBrightness(self, brightness)

    def setHsb(self, *args):
        return _openframeworks.ofColor_setHsb(self, *args)

    def clamp(self):
        return _openframeworks.ofColor_clamp(self)

    def invert(self):
        return _openframeworks.ofColor_invert(self)

    def normalize(self):
        return _openframeworks.ofColor_normalize(self)

    def lerp(self, target, amount):
        return _openframeworks.ofColor_lerp(self, target, amount)

    def getClamped(self):
        return _openframeworks.ofColor_getClamped(self)

    def getInverted(self):
        return _openframeworks.ofColor_getInverted(self)

    def getNormalized(self):
        return _openframeworks.ofColor_getNormalized(self)

    def getLerped(self, target, amount):
        return _openframeworks.ofColor_getLerped(self, target, amount)

    def getHex(self):
        return _openframeworks.ofColor_getHex(self)

    def getHue(self):
        return _openframeworks.ofColor_getHue(self)

    def getHueAngle(self):
        return _openframeworks.ofColor_getHueAngle(self)

    def getSaturation(self):
        return _openframeworks.ofColor_getSaturation(self)

    def getBrightness(self):
        return _openframeworks.ofColor_getBrightness(self)

    def getLightness(self):
        return _openframeworks.ofColor_getLightness(self)

    def getHsb(self, hue, saturation, brightness):
        return _openframeworks.ofColor_getHsb(self, hue, saturation, brightness)
    limit = staticmethod(_openframeworks.ofColor_limit)

    def __eq__(self, color):
        return _openframeworks.ofColor___eq__(self, color)

    def __ne__(self, color):
        return _openframeworks.ofColor___ne__(self, color)

    def __add__(self, *args):
        return _openframeworks.ofColor___add__(self, *args)

    def __iadd__(self, *args):
        return _openframeworks.ofColor___iadd__(self, *args)

    def __sub__(self, *args):
        return _openframeworks.ofColor___sub__(self, *args)

    def __isub__(self, *args):
        return _openframeworks.ofColor___isub__(self, *args)

    def __mul__(self, *args):
        return _openframeworks.ofColor___mul__(self, *args)

    def __imul__(self, *args):
        return _openframeworks.ofColor___imul__(self, *args)

    def __truediv__(self, *args):
        return _openframeworks.ofColor___div__(self, *args)
    __div__ = __truediv__



    def __itruediv__(self, *args):
        return _openframeworks.ofColor___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __getitem__(self, *args):
        return _openframeworks.ofColor___getitem__(self, *args)

    def getR(self):
        return _openframeworks.ofColor_getR(self)

    def getG(self):
        return _openframeworks.ofColor_getG(self)

    def getB(self):
        return _openframeworks.ofColor_getB(self)

    def getA(self):
        return _openframeworks.ofColor_getA(self)

    def setR(self, r):
        return _openframeworks.ofColor_setR(self, r)

    def setG(self, g):
        return _openframeworks.ofColor_setG(self, g)

    def setB(self, b):
        return _openframeworks.ofColor_setB(self, b)

    def setA(self, a):
        return _openframeworks.ofColor_setA(self, a)

    def __str__(self):
        return _openframeworks.ofColor___str__(self)
    r = _swig_property(_openframeworks.ofColor_r_get, _openframeworks.ofColor_r_set)
    g = _swig_property(_openframeworks.ofColor_g_get, _openframeworks.ofColor_g_set)
    b = _swig_property(_openframeworks.ofColor_b_get, _openframeworks.ofColor_b_set)
    a = _swig_property(_openframeworks.ofColor_a_get, _openframeworks.ofColor_a_set)
    __swig_destroy__ = _openframeworks.delete_ofColor
    __del__ = lambda self: None
ofColor_swigregister = _openframeworks.ofColor_swigregister
ofColor_swigregister(ofColor)

def ofColor_fromHsb(*args):
    return _openframeworks.ofColor_fromHsb(*args)
ofColor_fromHsb = _openframeworks.ofColor_fromHsb

def ofColor_fromHex(*args):
    return _openframeworks.ofColor_fromHex(*args)
ofColor_fromHex = _openframeworks.ofColor_fromHex

def ofColor_limit():
    return _openframeworks.ofColor_limit()
ofColor_limit = _openframeworks.ofColor_limit
ofColor.white = _openframeworks.cvar.ofColor_white
ofColor.gray = _openframeworks.cvar.ofColor_gray
ofColor.black = _openframeworks.cvar.ofColor_black
ofColor.red = _openframeworks.cvar.ofColor_red
ofColor.green = _openframeworks.cvar.ofColor_green
ofColor.blue = _openframeworks.cvar.ofColor_blue
ofColor.cyan = _openframeworks.cvar.ofColor_cyan
ofColor.magenta = _openframeworks.cvar.ofColor_magenta
ofColor.yellow = _openframeworks.cvar.ofColor_yellow
ofColor.aliceBlue = _openframeworks.cvar.ofColor_aliceBlue
ofColor.antiqueWhite = _openframeworks.cvar.ofColor_antiqueWhite
ofColor.aqua = _openframeworks.cvar.ofColor_aqua
ofColor.aquamarine = _openframeworks.cvar.ofColor_aquamarine
ofColor.azure = _openframeworks.cvar.ofColor_azure
ofColor.beige = _openframeworks.cvar.ofColor_beige
ofColor.bisque = _openframeworks.cvar.ofColor_bisque
ofColor.blanchedAlmond = _openframeworks.cvar.ofColor_blanchedAlmond
ofColor.blueViolet = _openframeworks.cvar.ofColor_blueViolet
ofColor.brown = _openframeworks.cvar.ofColor_brown
ofColor.burlyWood = _openframeworks.cvar.ofColor_burlyWood
ofColor.cadetBlue = _openframeworks.cvar.ofColor_cadetBlue
ofColor.chartreuse = _openframeworks.cvar.ofColor_chartreuse
ofColor.chocolate = _openframeworks.cvar.ofColor_chocolate
ofColor.coral = _openframeworks.cvar.ofColor_coral
ofColor.cornflowerBlue = _openframeworks.cvar.ofColor_cornflowerBlue
ofColor.cornsilk = _openframeworks.cvar.ofColor_cornsilk
ofColor.crimson = _openframeworks.cvar.ofColor_crimson
ofColor.darkBlue = _openframeworks.cvar.ofColor_darkBlue
ofColor.darkCyan = _openframeworks.cvar.ofColor_darkCyan
ofColor.darkGoldenRod = _openframeworks.cvar.ofColor_darkGoldenRod
ofColor.darkGray = _openframeworks.cvar.ofColor_darkGray
ofColor.darkGrey = _openframeworks.cvar.ofColor_darkGrey
ofColor.darkGreen = _openframeworks.cvar.ofColor_darkGreen
ofColor.darkKhaki = _openframeworks.cvar.ofColor_darkKhaki
ofColor.darkMagenta = _openframeworks.cvar.ofColor_darkMagenta
ofColor.darkOliveGreen = _openframeworks.cvar.ofColor_darkOliveGreen
ofColor.darkorange = _openframeworks.cvar.ofColor_darkorange
ofColor.darkOrchid = _openframeworks.cvar.ofColor_darkOrchid
ofColor.darkRed = _openframeworks.cvar.ofColor_darkRed
ofColor.darkSalmon = _openframeworks.cvar.ofColor_darkSalmon
ofColor.darkSeaGreen = _openframeworks.cvar.ofColor_darkSeaGreen
ofColor.darkSlateBlue = _openframeworks.cvar.ofColor_darkSlateBlue
ofColor.darkSlateGray = _openframeworks.cvar.ofColor_darkSlateGray
ofColor.darkSlateGrey = _openframeworks.cvar.ofColor_darkSlateGrey
ofColor.darkTurquoise = _openframeworks.cvar.ofColor_darkTurquoise
ofColor.darkViolet = _openframeworks.cvar.ofColor_darkViolet
ofColor.deepPink = _openframeworks.cvar.ofColor_deepPink
ofColor.deepSkyBlue = _openframeworks.cvar.ofColor_deepSkyBlue
ofColor.dimGray = _openframeworks.cvar.ofColor_dimGray
ofColor.dimGrey = _openframeworks.cvar.ofColor_dimGrey
ofColor.dodgerBlue = _openframeworks.cvar.ofColor_dodgerBlue
ofColor.fireBrick = _openframeworks.cvar.ofColor_fireBrick
ofColor.floralWhite = _openframeworks.cvar.ofColor_floralWhite
ofColor.forestGreen = _openframeworks.cvar.ofColor_forestGreen
ofColor.fuchsia = _openframeworks.cvar.ofColor_fuchsia
ofColor.gainsboro = _openframeworks.cvar.ofColor_gainsboro
ofColor.ghostWhite = _openframeworks.cvar.ofColor_ghostWhite
ofColor.gold = _openframeworks.cvar.ofColor_gold
ofColor.goldenRod = _openframeworks.cvar.ofColor_goldenRod
ofColor.grey = _openframeworks.cvar.ofColor_grey
ofColor.greenYellow = _openframeworks.cvar.ofColor_greenYellow
ofColor.honeyDew = _openframeworks.cvar.ofColor_honeyDew
ofColor.hotPink = _openframeworks.cvar.ofColor_hotPink
ofColor.indianRed = _openframeworks.cvar.ofColor_indianRed
ofColor.indigo = _openframeworks.cvar.ofColor_indigo
ofColor.ivory = _openframeworks.cvar.ofColor_ivory
ofColor.khaki = _openframeworks.cvar.ofColor_khaki
ofColor.lavender = _openframeworks.cvar.ofColor_lavender
ofColor.lavenderBlush = _openframeworks.cvar.ofColor_lavenderBlush
ofColor.lawnGreen = _openframeworks.cvar.ofColor_lawnGreen
ofColor.lemonChiffon = _openframeworks.cvar.ofColor_lemonChiffon
ofColor.lightBlue = _openframeworks.cvar.ofColor_lightBlue
ofColor.lightCoral = _openframeworks.cvar.ofColor_lightCoral
ofColor.lightCyan = _openframeworks.cvar.ofColor_lightCyan
ofColor.lightGoldenRodYellow = _openframeworks.cvar.ofColor_lightGoldenRodYellow
ofColor.lightGray = _openframeworks.cvar.ofColor_lightGray
ofColor.lightGrey = _openframeworks.cvar.ofColor_lightGrey
ofColor.lightGreen = _openframeworks.cvar.ofColor_lightGreen
ofColor.lightPink = _openframeworks.cvar.ofColor_lightPink
ofColor.lightSalmon = _openframeworks.cvar.ofColor_lightSalmon
ofColor.lightSeaGreen = _openframeworks.cvar.ofColor_lightSeaGreen
ofColor.lightSkyBlue = _openframeworks.cvar.ofColor_lightSkyBlue
ofColor.lightSlateGray = _openframeworks.cvar.ofColor_lightSlateGray
ofColor.lightSlateGrey = _openframeworks.cvar.ofColor_lightSlateGrey
ofColor.lightSteelBlue = _openframeworks.cvar.ofColor_lightSteelBlue
ofColor.lightYellow = _openframeworks.cvar.ofColor_lightYellow
ofColor.lime = _openframeworks.cvar.ofColor_lime
ofColor.limeGreen = _openframeworks.cvar.ofColor_limeGreen
ofColor.linen = _openframeworks.cvar.ofColor_linen
ofColor.maroon = _openframeworks.cvar.ofColor_maroon
ofColor.mediumAquaMarine = _openframeworks.cvar.ofColor_mediumAquaMarine
ofColor.mediumBlue = _openframeworks.cvar.ofColor_mediumBlue
ofColor.mediumOrchid = _openframeworks.cvar.ofColor_mediumOrchid
ofColor.mediumPurple = _openframeworks.cvar.ofColor_mediumPurple
ofColor.mediumSeaGreen = _openframeworks.cvar.ofColor_mediumSeaGreen
ofColor.mediumSlateBlue = _openframeworks.cvar.ofColor_mediumSlateBlue
ofColor.mediumSpringGreen = _openframeworks.cvar.ofColor_mediumSpringGreen
ofColor.mediumTurquoise = _openframeworks.cvar.ofColor_mediumTurquoise
ofColor.mediumVioletRed = _openframeworks.cvar.ofColor_mediumVioletRed
ofColor.midnightBlue = _openframeworks.cvar.ofColor_midnightBlue
ofColor.mintCream = _openframeworks.cvar.ofColor_mintCream
ofColor.mistyRose = _openframeworks.cvar.ofColor_mistyRose
ofColor.moccasin = _openframeworks.cvar.ofColor_moccasin
ofColor.navajoWhite = _openframeworks.cvar.ofColor_navajoWhite
ofColor.navy = _openframeworks.cvar.ofColor_navy
ofColor.oldLace = _openframeworks.cvar.ofColor_oldLace
ofColor.olive = _openframeworks.cvar.ofColor_olive
ofColor.oliveDrab = _openframeworks.cvar.ofColor_oliveDrab
ofColor.orange = _openframeworks.cvar.ofColor_orange
ofColor.orangeRed = _openframeworks.cvar.ofColor_orangeRed
ofColor.orchid = _openframeworks.cvar.ofColor_orchid
ofColor.paleGoldenRod = _openframeworks.cvar.ofColor_paleGoldenRod
ofColor.paleGreen = _openframeworks.cvar.ofColor_paleGreen
ofColor.paleTurquoise = _openframeworks.cvar.ofColor_paleTurquoise
ofColor.paleVioletRed = _openframeworks.cvar.ofColor_paleVioletRed
ofColor.papayaWhip = _openframeworks.cvar.ofColor_papayaWhip
ofColor.peachPuff = _openframeworks.cvar.ofColor_peachPuff
ofColor.peru = _openframeworks.cvar.ofColor_peru
ofColor.pink = _openframeworks.cvar.ofColor_pink
ofColor.plum = _openframeworks.cvar.ofColor_plum
ofColor.powderBlue = _openframeworks.cvar.ofColor_powderBlue
ofColor.purple = _openframeworks.cvar.ofColor_purple
ofColor.rosyBrown = _openframeworks.cvar.ofColor_rosyBrown
ofColor.royalBlue = _openframeworks.cvar.ofColor_royalBlue
ofColor.saddleBrown = _openframeworks.cvar.ofColor_saddleBrown
ofColor.salmon = _openframeworks.cvar.ofColor_salmon
ofColor.sandyBrown = _openframeworks.cvar.ofColor_sandyBrown
ofColor.seaGreen = _openframeworks.cvar.ofColor_seaGreen
ofColor.seaShell = _openframeworks.cvar.ofColor_seaShell
ofColor.sienna = _openframeworks.cvar.ofColor_sienna
ofColor.silver = _openframeworks.cvar.ofColor_silver
ofColor.skyBlue = _openframeworks.cvar.ofColor_skyBlue
ofColor.slateBlue = _openframeworks.cvar.ofColor_slateBlue
ofColor.slateGray = _openframeworks.cvar.ofColor_slateGray
ofColor.slateGrey = _openframeworks.cvar.ofColor_slateGrey
ofColor.snow = _openframeworks.cvar.ofColor_snow
ofColor.springGreen = _openframeworks.cvar.ofColor_springGreen
ofColor.steelBlue = _openframeworks.cvar.ofColor_steelBlue
ofColor.blueSteel = _openframeworks.cvar.ofColor_blueSteel
ofColor.tan = _openframeworks.cvar.ofColor_tan
ofColor.teal = _openframeworks.cvar.ofColor_teal
ofColor.thistle = _openframeworks.cvar.ofColor_thistle
ofColor.tomato = _openframeworks.cvar.ofColor_tomato
ofColor.turquoise = _openframeworks.cvar.ofColor_turquoise
ofColor.violet = _openframeworks.cvar.ofColor_violet
ofColor.wheat = _openframeworks.cvar.ofColor_wheat
ofColor.whiteSmoke = _openframeworks.cvar.ofColor_whiteSmoke
ofColor.yellowGreen = _openframeworks.cvar.ofColor_yellowGreen

class ofFloatColor(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openframeworks.new_ofFloatColor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    fromHsb = staticmethod(_openframeworks.ofFloatColor_fromHsb)
    fromHex = staticmethod(_openframeworks.ofFloatColor_fromHex)

    def set(self, *args):
        return _openframeworks.ofFloatColor_set(self, *args)

    def setHex(self, *args):
        return _openframeworks.ofFloatColor_setHex(self, *args)

    def setHue(self, hue):
        return _openframeworks.ofFloatColor_setHue(self, hue)

    def setHueAngle(self, angle):
        return _openframeworks.ofFloatColor_setHueAngle(self, angle)

    def setSaturation(self, saturation):
        return _openframeworks.ofFloatColor_setSaturation(self, saturation)

    def setBrightness(self, brightness):
        return _openframeworks.ofFloatColor_setBrightness(self, brightness)

    def setHsb(self, *args):
        return _openframeworks.ofFloatColor_setHsb(self, *args)

    def clamp(self):
        return _openframeworks.ofFloatColor_clamp(self)

    def invert(self):
        return _openframeworks.ofFloatColor_invert(self)

    def normalize(self):
        return _openframeworks.ofFloatColor_normalize(self)

    def lerp(self, target, amount):
        return _openframeworks.ofFloatColor_lerp(self, target, amount)

    def getClamped(self):
        return _openframeworks.ofFloatColor_getClamped(self)

    def getInverted(self):
        return _openframeworks.ofFloatColor_getInverted(self)

    def getNormalized(self):
        return _openframeworks.ofFloatColor_getNormalized(self)

    def getLerped(self, target, amount):
        return _openframeworks.ofFloatColor_getLerped(self, target, amount)

    def getHex(self):
        return _openframeworks.ofFloatColor_getHex(self)

    def getHue(self):
        return _openframeworks.ofFloatColor_getHue(self)

    def getHueAngle(self):
        return _openframeworks.ofFloatColor_getHueAngle(self)

    def getSaturation(self):
        return _openframeworks.ofFloatColor_getSaturation(self)

    def getBrightness(self):
        return _openframeworks.ofFloatColor_getBrightness(self)

    def getLightness(self):
        return _openframeworks.ofFloatColor_getLightness(self)

    def getHsb(self, hue, saturation, brightness):
        return _openframeworks.ofFloatColor_getHsb(self, hue, saturation, brightness)
    limit = staticmethod(_openframeworks.ofFloatColor_limit)

    def __eq__(self, color):
        return _openframeworks.ofFloatColor___eq__(self, color)

    def __ne__(self, color):
        return _openframeworks.ofFloatColor___ne__(self, color)

    def __add__(self, *args):
        return _openframeworks.ofFloatColor___add__(self, *args)

    def __iadd__(self, *args):
        return _openframeworks.ofFloatColor___iadd__(self, *args)

    def __sub__(self, *args):
        return _openframeworks.ofFloatColor___sub__(self, *args)

    def __isub__(self, *args):
        return _openframeworks.ofFloatColor___isub__(self, *args)

    def __mul__(self, *args):
        return _openframeworks.ofFloatColor___mul__(self, *args)

    def __imul__(self, *args):
        return _openframeworks.ofFloatColor___imul__(self, *args)

    def __truediv__(self, *args):
        return _openframeworks.ofFloatColor___div__(self, *args)
    __div__ = __truediv__



    def __itruediv__(self, *args):
        return _openframeworks.ofFloatColor___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __getitem__(self, *args):
        return _openframeworks.ofFloatColor___getitem__(self, *args)

    def getR(self):
        return _openframeworks.ofFloatColor_getR(self)

    def getG(self):
        return _openframeworks.ofFloatColor_getG(self)

    def getB(self):
        return _openframeworks.ofFloatColor_getB(self)

    def getA(self):
        return _openframeworks.ofFloatColor_getA(self)

    def setR(self, r):
        return _openframeworks.ofFloatColor_setR(self, r)

    def setG(self, g):
        return _openframeworks.ofFloatColor_setG(self, g)

    def setB(self, b):
        return _openframeworks.ofFloatColor_setB(self, b)

    def setA(self, a):
        return _openframeworks.ofFloatColor_setA(self, a)

    def __str__(self):
        return _openframeworks.ofFloatColor___str__(self)
    r = _swig_property(_openframeworks.ofFloatColor_r_get, _openframeworks.ofFloatColor_r_set)
    g = _swig_property(_openframeworks.ofFloatColor_g_get, _openframeworks.ofFloatColor_g_set)
    b = _swig_property(_openframeworks.ofFloatColor_b_get, _openframeworks.ofFloatColor_b_set)
    a = _swig_property(_openframeworks.ofFloatColor_a_get, _openframeworks.ofFloatColor_a_set)
    __swig_destroy__ = _openframeworks.delete_ofFloatColor
    __del__ = lambda self: None
ofFloatColor_swigregister = _openframeworks.ofFloatColor_swigregister
ofFloatColor_swigregister(ofFloatColor)

def ofFloatColor_fromHsb(*args):
    return _openframeworks.ofFloatColor_fromHsb(*args)
ofFloatColor_fromHsb = _openframeworks.ofFloatColor_fromHsb

def ofFloatColor_fromHex(*args):
    return _openframeworks.ofFloatColor_fromHex(*args)
ofFloatColor_fromHex = _openframeworks.ofFloatColor_fromHex

def ofFloatColor_limit():
    return _openframeworks.ofFloatColor_limit()
ofFloatColor_limit = _openframeworks.ofFloatColor_limit
ofFloatColor.white = _openframeworks.cvar.ofFloatColor_white
ofFloatColor.gray = _openframeworks.cvar.ofFloatColor_gray
ofFloatColor.black = _openframeworks.cvar.ofFloatColor_black
ofFloatColor.red = _openframeworks.cvar.ofFloatColor_red
ofFloatColor.green = _openframeworks.cvar.ofFloatColor_green
ofFloatColor.blue = _openframeworks.cvar.ofFloatColor_blue
ofFloatColor.cyan = _openframeworks.cvar.ofFloatColor_cyan
ofFloatColor.magenta = _openframeworks.cvar.ofFloatColor_magenta
ofFloatColor.yellow = _openframeworks.cvar.ofFloatColor_yellow
ofFloatColor.aliceBlue = _openframeworks.cvar.ofFloatColor_aliceBlue
ofFloatColor.antiqueWhite = _openframeworks.cvar.ofFloatColor_antiqueWhite
ofFloatColor.aqua = _openframeworks.cvar.ofFloatColor_aqua
ofFloatColor.aquamarine = _openframeworks.cvar.ofFloatColor_aquamarine
ofFloatColor.azure = _openframeworks.cvar.ofFloatColor_azure
ofFloatColor.beige = _openframeworks.cvar.ofFloatColor_beige
ofFloatColor.bisque = _openframeworks.cvar.ofFloatColor_bisque
ofFloatColor.blanchedAlmond = _openframeworks.cvar.ofFloatColor_blanchedAlmond
ofFloatColor.blueViolet = _openframeworks.cvar.ofFloatColor_blueViolet
ofFloatColor.brown = _openframeworks.cvar.ofFloatColor_brown
ofFloatColor.burlyWood = _openframeworks.cvar.ofFloatColor_burlyWood
ofFloatColor.cadetBlue = _openframeworks.cvar.ofFloatColor_cadetBlue
ofFloatColor.chartreuse = _openframeworks.cvar.ofFloatColor_chartreuse
ofFloatColor.chocolate = _openframeworks.cvar.ofFloatColor_chocolate
ofFloatColor.coral = _openframeworks.cvar.ofFloatColor_coral
ofFloatColor.cornflowerBlue = _openframeworks.cvar.ofFloatColor_cornflowerBlue
ofFloatColor.cornsilk = _openframeworks.cvar.ofFloatColor_cornsilk
ofFloatColor.crimson = _openframeworks.cvar.ofFloatColor_crimson
ofFloatColor.darkBlue = _openframeworks.cvar.ofFloatColor_darkBlue
ofFloatColor.darkCyan = _openframeworks.cvar.ofFloatColor_darkCyan
ofFloatColor.darkGoldenRod = _openframeworks.cvar.ofFloatColor_darkGoldenRod
ofFloatColor.darkGray = _openframeworks.cvar.ofFloatColor_darkGray
ofFloatColor.darkGrey = _openframeworks.cvar.ofFloatColor_darkGrey
ofFloatColor.darkGreen = _openframeworks.cvar.ofFloatColor_darkGreen
ofFloatColor.darkKhaki = _openframeworks.cvar.ofFloatColor_darkKhaki
ofFloatColor.darkMagenta = _openframeworks.cvar.ofFloatColor_darkMagenta
ofFloatColor.darkOliveGreen = _openframeworks.cvar.ofFloatColor_darkOliveGreen
ofFloatColor.darkorange = _openframeworks.cvar.ofFloatColor_darkorange
ofFloatColor.darkOrchid = _openframeworks.cvar.ofFloatColor_darkOrchid
ofFloatColor.darkRed = _openframeworks.cvar.ofFloatColor_darkRed
ofFloatColor.darkSalmon = _openframeworks.cvar.ofFloatColor_darkSalmon
ofFloatColor.darkSeaGreen = _openframeworks.cvar.ofFloatColor_darkSeaGreen
ofFloatColor.darkSlateBlue = _openframeworks.cvar.ofFloatColor_darkSlateBlue
ofFloatColor.darkSlateGray = _openframeworks.cvar.ofFloatColor_darkSlateGray
ofFloatColor.darkSlateGrey = _openframeworks.cvar.ofFloatColor_darkSlateGrey
ofFloatColor.darkTurquoise = _openframeworks.cvar.ofFloatColor_darkTurquoise
ofFloatColor.darkViolet = _openframeworks.cvar.ofFloatColor_darkViolet
ofFloatColor.deepPink = _openframeworks.cvar.ofFloatColor_deepPink
ofFloatColor.deepSkyBlue = _openframeworks.cvar.ofFloatColor_deepSkyBlue
ofFloatColor.dimGray = _openframeworks.cvar.ofFloatColor_dimGray
ofFloatColor.dimGrey = _openframeworks.cvar.ofFloatColor_dimGrey
ofFloatColor.dodgerBlue = _openframeworks.cvar.ofFloatColor_dodgerBlue
ofFloatColor.fireBrick = _openframeworks.cvar.ofFloatColor_fireBrick
ofFloatColor.floralWhite = _openframeworks.cvar.ofFloatColor_floralWhite
ofFloatColor.forestGreen = _openframeworks.cvar.ofFloatColor_forestGreen
ofFloatColor.fuchsia = _openframeworks.cvar.ofFloatColor_fuchsia
ofFloatColor.gainsboro = _openframeworks.cvar.ofFloatColor_gainsboro
ofFloatColor.ghostWhite = _openframeworks.cvar.ofFloatColor_ghostWhite
ofFloatColor.gold = _openframeworks.cvar.ofFloatColor_gold
ofFloatColor.goldenRod = _openframeworks.cvar.ofFloatColor_goldenRod
ofFloatColor.grey = _openframeworks.cvar.ofFloatColor_grey
ofFloatColor.greenYellow = _openframeworks.cvar.ofFloatColor_greenYellow
ofFloatColor.honeyDew = _openframeworks.cvar.ofFloatColor_honeyDew
ofFloatColor.hotPink = _openframeworks.cvar.ofFloatColor_hotPink
ofFloatColor.indianRed = _openframeworks.cvar.ofFloatColor_indianRed
ofFloatColor.indigo = _openframeworks.cvar.ofFloatColor_indigo
ofFloatColor.ivory = _openframeworks.cvar.ofFloatColor_ivory
ofFloatColor.khaki = _openframeworks.cvar.ofFloatColor_khaki
ofFloatColor.lavender = _openframeworks.cvar.ofFloatColor_lavender
ofFloatColor.lavenderBlush = _openframeworks.cvar.ofFloatColor_lavenderBlush
ofFloatColor.lawnGreen = _openframeworks.cvar.ofFloatColor_lawnGreen
ofFloatColor.lemonChiffon = _openframeworks.cvar.ofFloatColor_lemonChiffon
ofFloatColor.lightBlue = _openframeworks.cvar.ofFloatColor_lightBlue
ofFloatColor.lightCoral = _openframeworks.cvar.ofFloatColor_lightCoral
ofFloatColor.lightCyan = _openframeworks.cvar.ofFloatColor_lightCyan
ofFloatColor.lightGoldenRodYellow = _openframeworks.cvar.ofFloatColor_lightGoldenRodYellow
ofFloatColor.lightGray = _openframeworks.cvar.ofFloatColor_lightGray
ofFloatColor.lightGrey = _openframeworks.cvar.ofFloatColor_lightGrey
ofFloatColor.lightGreen = _openframeworks.cvar.ofFloatColor_lightGreen
ofFloatColor.lightPink = _openframeworks.cvar.ofFloatColor_lightPink
ofFloatColor.lightSalmon = _openframeworks.cvar.ofFloatColor_lightSalmon
ofFloatColor.lightSeaGreen = _openframeworks.cvar.ofFloatColor_lightSeaGreen
ofFloatColor.lightSkyBlue = _openframeworks.cvar.ofFloatColor_lightSkyBlue
ofFloatColor.lightSlateGray = _openframeworks.cvar.ofFloatColor_lightSlateGray
ofFloatColor.lightSlateGrey = _openframeworks.cvar.ofFloatColor_lightSlateGrey
ofFloatColor.lightSteelBlue = _openframeworks.cvar.ofFloatColor_lightSteelBlue
ofFloatColor.lightYellow = _openframeworks.cvar.ofFloatColor_lightYellow
ofFloatColor.lime = _openframeworks.cvar.ofFloatColor_lime
ofFloatColor.limeGreen = _openframeworks.cvar.ofFloatColor_limeGreen
ofFloatColor.linen = _openframeworks.cvar.ofFloatColor_linen
ofFloatColor.maroon = _openframeworks.cvar.ofFloatColor_maroon
ofFloatColor.mediumAquaMarine = _openframeworks.cvar.ofFloatColor_mediumAquaMarine
ofFloatColor.mediumBlue = _openframeworks.cvar.ofFloatColor_mediumBlue
ofFloatColor.mediumOrchid = _openframeworks.cvar.ofFloatColor_mediumOrchid
ofFloatColor.mediumPurple = _openframeworks.cvar.ofFloatColor_mediumPurple
ofFloatColor.mediumSeaGreen = _openframeworks.cvar.ofFloatColor_mediumSeaGreen
ofFloatColor.mediumSlateBlue = _openframeworks.cvar.ofFloatColor_mediumSlateBlue
ofFloatColor.mediumSpringGreen = _openframeworks.cvar.ofFloatColor_mediumSpringGreen
ofFloatColor.mediumTurquoise = _openframeworks.cvar.ofFloatColor_mediumTurquoise
ofFloatColor.mediumVioletRed = _openframeworks.cvar.ofFloatColor_mediumVioletRed
ofFloatColor.midnightBlue = _openframeworks.cvar.ofFloatColor_midnightBlue
ofFloatColor.mintCream = _openframeworks.cvar.ofFloatColor_mintCream
ofFloatColor.mistyRose = _openframeworks.cvar.ofFloatColor_mistyRose
ofFloatColor.moccasin = _openframeworks.cvar.ofFloatColor_moccasin
ofFloatColor.navajoWhite = _openframeworks.cvar.ofFloatColor_navajoWhite
ofFloatColor.navy = _openframeworks.cvar.ofFloatColor_navy
ofFloatColor.oldLace = _openframeworks.cvar.ofFloatColor_oldLace
ofFloatColor.olive = _openframeworks.cvar.ofFloatColor_olive
ofFloatColor.oliveDrab = _openframeworks.cvar.ofFloatColor_oliveDrab
ofFloatColor.orange = _openframeworks.cvar.ofFloatColor_orange
ofFloatColor.orangeRed = _openframeworks.cvar.ofFloatColor_orangeRed
ofFloatColor.orchid = _openframeworks.cvar.ofFloatColor_orchid
ofFloatColor.paleGoldenRod = _openframeworks.cvar.ofFloatColor_paleGoldenRod
ofFloatColor.paleGreen = _openframeworks.cvar.ofFloatColor_paleGreen
ofFloatColor.paleTurquoise = _openframeworks.cvar.ofFloatColor_paleTurquoise
ofFloatColor.paleVioletRed = _openframeworks.cvar.ofFloatColor_paleVioletRed
ofFloatColor.papayaWhip = _openframeworks.cvar.ofFloatColor_papayaWhip
ofFloatColor.peachPuff = _openframeworks.cvar.ofFloatColor_peachPuff
ofFloatColor.peru = _openframeworks.cvar.ofFloatColor_peru
ofFloatColor.pink = _openframeworks.cvar.ofFloatColor_pink
ofFloatColor.plum = _openframeworks.cvar.ofFloatColor_plum
ofFloatColor.powderBlue = _openframeworks.cvar.ofFloatColor_powderBlue
ofFloatColor.purple = _openframeworks.cvar.ofFloatColor_purple
ofFloatColor.rosyBrown = _openframeworks.cvar.ofFloatColor_rosyBrown
ofFloatColor.royalBlue = _openframeworks.cvar.ofFloatColor_royalBlue
ofFloatColor.saddleBrown = _openframeworks.cvar.ofFloatColor_saddleBrown
ofFloatColor.salmon = _openframeworks.cvar.ofFloatColor_salmon
ofFloatColor.sandyBrown = _openframeworks.cvar.ofFloatColor_sandyBrown
ofFloatColor.seaGreen = _openframeworks.cvar.ofFloatColor_seaGreen
ofFloatColor.seaShell = _openframeworks.cvar.ofFloatColor_seaShell
ofFloatColor.sienna = _openframeworks.cvar.ofFloatColor_sienna
ofFloatColor.silver = _openframeworks.cvar.ofFloatColor_silver
ofFloatColor.skyBlue = _openframeworks.cvar.ofFloatColor_skyBlue
ofFloatColor.slateBlue = _openframeworks.cvar.ofFloatColor_slateBlue
ofFloatColor.slateGray = _openframeworks.cvar.ofFloatColor_slateGray
ofFloatColor.slateGrey = _openframeworks.cvar.ofFloatColor_slateGrey
ofFloatColor.snow = _openframeworks.cvar.ofFloatColor_snow
ofFloatColor.springGreen = _openframeworks.cvar.ofFloatColor_springGreen
ofFloatColor.steelBlue = _openframeworks.cvar.ofFloatColor_steelBlue
ofFloatColor.blueSteel = _openframeworks.cvar.ofFloatColor_blueSteel
ofFloatColor.tan = _openframeworks.cvar.ofFloatColor_tan
ofFloatColor.teal = _openframeworks.cvar.ofFloatColor_teal
ofFloatColor.thistle = _openframeworks.cvar.ofFloatColor_thistle
ofFloatColor.tomato = _openframeworks.cvar.ofFloatColor_tomato
ofFloatColor.turquoise = _openframeworks.cvar.ofFloatColor_turquoise
ofFloatColor.violet = _openframeworks.cvar.ofFloatColor_violet
ofFloatColor.wheat = _openframeworks.cvar.ofFloatColor_wheat
ofFloatColor.whiteSmoke = _openframeworks.cvar.ofFloatColor_whiteSmoke
ofFloatColor.yellowGreen = _openframeworks.cvar.ofFloatColor_yellowGreen

class ofShortColor(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openframeworks.new_ofShortColor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    fromHsb = staticmethod(_openframeworks.ofShortColor_fromHsb)
    fromHex = staticmethod(_openframeworks.ofShortColor_fromHex)

    def set(self, *args):
        return _openframeworks.ofShortColor_set(self, *args)

    def setHex(self, *args):
        return _openframeworks.ofShortColor_setHex(self, *args)

    def setHue(self, hue):
        return _openframeworks.ofShortColor_setHue(self, hue)

    def setHueAngle(self, angle):
        return _openframeworks.ofShortColor_setHueAngle(self, angle)

    def setSaturation(self, saturation):
        return _openframeworks.ofShortColor_setSaturation(self, saturation)

    def setBrightness(self, brightness):
        return _openframeworks.ofShortColor_setBrightness(self, brightness)

    def setHsb(self, *args):
        return _openframeworks.ofShortColor_setHsb(self, *args)

    def clamp(self):
        return _openframeworks.ofShortColor_clamp(self)

    def invert(self):
        return _openframeworks.ofShortColor_invert(self)

    def normalize(self):
        return _openframeworks.ofShortColor_normalize(self)

    def lerp(self, target, amount):
        return _openframeworks.ofShortColor_lerp(self, target, amount)

    def getClamped(self):
        return _openframeworks.ofShortColor_getClamped(self)

    def getInverted(self):
        return _openframeworks.ofShortColor_getInverted(self)

    def getNormalized(self):
        return _openframeworks.ofShortColor_getNormalized(self)

    def getLerped(self, target, amount):
        return _openframeworks.ofShortColor_getLerped(self, target, amount)

    def getHex(self):
        return _openframeworks.ofShortColor_getHex(self)

    def getHue(self):
        return _openframeworks.ofShortColor_getHue(self)

    def getHueAngle(self):
        return _openframeworks.ofShortColor_getHueAngle(self)

    def getSaturation(self):
        return _openframeworks.ofShortColor_getSaturation(self)

    def getBrightness(self):
        return _openframeworks.ofShortColor_getBrightness(self)

    def getLightness(self):
        return _openframeworks.ofShortColor_getLightness(self)

    def getHsb(self, hue, saturation, brightness):
        return _openframeworks.ofShortColor_getHsb(self, hue, saturation, brightness)
    limit = staticmethod(_openframeworks.ofShortColor_limit)

    def __eq__(self, color):
        return _openframeworks.ofShortColor___eq__(self, color)

    def __ne__(self, color):
        return _openframeworks.ofShortColor___ne__(self, color)

    def __add__(self, *args):
        return _openframeworks.ofShortColor___add__(self, *args)

    def __iadd__(self, *args):
        return _openframeworks.ofShortColor___iadd__(self, *args)

    def __sub__(self, *args):
        return _openframeworks.ofShortColor___sub__(self, *args)

    def __isub__(self, *args):
        return _openframeworks.ofShortColor___isub__(self, *args)

    def __mul__(self, *args):
        return _openframeworks.ofShortColor___mul__(self, *args)

    def __imul__(self, *args):
        return _openframeworks.ofShortColor___imul__(self, *args)

    def __truediv__(self, *args):
        return _openframeworks.ofShortColor___div__(self, *args)
    __div__ = __truediv__



    def __itruediv__(self, *args):
        return _openframeworks.ofShortColor___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __getitem__(self, *args):
        return _openframeworks.ofShortColor___getitem__(self, *args)

    def getR(self):
        return _openframeworks.ofShortColor_getR(self)

    def getG(self):
        return _openframeworks.ofShortColor_getG(self)

    def getB(self):
        return _openframeworks.ofShortColor_getB(self)

    def getA(self):
        return _openframeworks.ofShortColor_getA(self)

    def setR(self, r):
        return _openframeworks.ofShortColor_setR(self, r)

    def setG(self, g):
        return _openframeworks.ofShortColor_setG(self, g)

    def setB(self, b):
        return _openframeworks.ofShortColor_setB(self, b)

    def setA(self, a):
        return _openframeworks.ofShortColor_setA(self, a)

    def __str__(self):
        return _openframeworks.ofShortColor___str__(self)
    r = _swig_property(_openframeworks.ofShortColor_r_get, _openframeworks.ofShortColor_r_set)
    g = _swig_property(_openframeworks.ofShortColor_g_get, _openframeworks.ofShortColor_g_set)
    b = _swig_property(_openframeworks.ofShortColor_b_get, _openframeworks.ofShortColor_b_set)
    a = _swig_property(_openframeworks.ofShortColor_a_get, _openframeworks.ofShortColor_a_set)
    __swig_destroy__ = _openframeworks.delete_ofShortColor
    __del__ = lambda self: None
ofShortColor_swigregister = _openframeworks.ofShortColor_swigregister
ofShortColor_swigregister(ofShortColor)

def ofShortColor_fromHsb(*args):
    return _openframeworks.ofShortColor_fromHsb(*args)
ofShortColor_fromHsb = _openframeworks.ofShortColor_fromHsb

def ofShortColor_fromHex(*args):
    return _openframeworks.ofShortColor_fromHex(*args)
ofShortColor_fromHex = _openframeworks.ofShortColor_fromHex

def ofShortColor_limit():
    return _openframeworks.ofShortColor_limit()
ofShortColor_limit = _openframeworks.ofShortColor_limit
ofShortColor.white = _openframeworks.cvar.ofShortColor_white
ofShortColor.gray = _openframeworks.cvar.ofShortColor_gray
ofShortColor.black = _openframeworks.cvar.ofShortColor_black
ofShortColor.red = _openframeworks.cvar.ofShortColor_red
ofShortColor.green = _openframeworks.cvar.ofShortColor_green
ofShortColor.blue = _openframeworks.cvar.ofShortColor_blue
ofShortColor.cyan = _openframeworks.cvar.ofShortColor_cyan
ofShortColor.magenta = _openframeworks.cvar.ofShortColor_magenta
ofShortColor.yellow = _openframeworks.cvar.ofShortColor_yellow
ofShortColor.aliceBlue = _openframeworks.cvar.ofShortColor_aliceBlue
ofShortColor.antiqueWhite = _openframeworks.cvar.ofShortColor_antiqueWhite
ofShortColor.aqua = _openframeworks.cvar.ofShortColor_aqua
ofShortColor.aquamarine = _openframeworks.cvar.ofShortColor_aquamarine
ofShortColor.azure = _openframeworks.cvar.ofShortColor_azure
ofShortColor.beige = _openframeworks.cvar.ofShortColor_beige
ofShortColor.bisque = _openframeworks.cvar.ofShortColor_bisque
ofShortColor.blanchedAlmond = _openframeworks.cvar.ofShortColor_blanchedAlmond
ofShortColor.blueViolet = _openframeworks.cvar.ofShortColor_blueViolet
ofShortColor.brown = _openframeworks.cvar.ofShortColor_brown
ofShortColor.burlyWood = _openframeworks.cvar.ofShortColor_burlyWood
ofShortColor.cadetBlue = _openframeworks.cvar.ofShortColor_cadetBlue
ofShortColor.chartreuse = _openframeworks.cvar.ofShortColor_chartreuse
ofShortColor.chocolate = _openframeworks.cvar.ofShortColor_chocolate
ofShortColor.coral = _openframeworks.cvar.ofShortColor_coral
ofShortColor.cornflowerBlue = _openframeworks.cvar.ofShortColor_cornflowerBlue
ofShortColor.cornsilk = _openframeworks.cvar.ofShortColor_cornsilk
ofShortColor.crimson = _openframeworks.cvar.ofShortColor_crimson
ofShortColor.darkBlue = _openframeworks.cvar.ofShortColor_darkBlue
ofShortColor.darkCyan = _openframeworks.cvar.ofShortColor_darkCyan
ofShortColor.darkGoldenRod = _openframeworks.cvar.ofShortColor_darkGoldenRod
ofShortColor.darkGray = _openframeworks.cvar.ofShortColor_darkGray
ofShortColor.darkGrey = _openframeworks.cvar.ofShortColor_darkGrey
ofShortColor.darkGreen = _openframeworks.cvar.ofShortColor_darkGreen
ofShortColor.darkKhaki = _openframeworks.cvar.ofShortColor_darkKhaki
ofShortColor.darkMagenta = _openframeworks.cvar.ofShortColor_darkMagenta
ofShortColor.darkOliveGreen = _openframeworks.cvar.ofShortColor_darkOliveGreen
ofShortColor.darkorange = _openframeworks.cvar.ofShortColor_darkorange
ofShortColor.darkOrchid = _openframeworks.cvar.ofShortColor_darkOrchid
ofShortColor.darkRed = _openframeworks.cvar.ofShortColor_darkRed
ofShortColor.darkSalmon = _openframeworks.cvar.ofShortColor_darkSalmon
ofShortColor.darkSeaGreen = _openframeworks.cvar.ofShortColor_darkSeaGreen
ofShortColor.darkSlateBlue = _openframeworks.cvar.ofShortColor_darkSlateBlue
ofShortColor.darkSlateGray = _openframeworks.cvar.ofShortColor_darkSlateGray
ofShortColor.darkSlateGrey = _openframeworks.cvar.ofShortColor_darkSlateGrey
ofShortColor.darkTurquoise = _openframeworks.cvar.ofShortColor_darkTurquoise
ofShortColor.darkViolet = _openframeworks.cvar.ofShortColor_darkViolet
ofShortColor.deepPink = _openframeworks.cvar.ofShortColor_deepPink
ofShortColor.deepSkyBlue = _openframeworks.cvar.ofShortColor_deepSkyBlue
ofShortColor.dimGray = _openframeworks.cvar.ofShortColor_dimGray
ofShortColor.dimGrey = _openframeworks.cvar.ofShortColor_dimGrey
ofShortColor.dodgerBlue = _openframeworks.cvar.ofShortColor_dodgerBlue
ofShortColor.fireBrick = _openframeworks.cvar.ofShortColor_fireBrick
ofShortColor.floralWhite = _openframeworks.cvar.ofShortColor_floralWhite
ofShortColor.forestGreen = _openframeworks.cvar.ofShortColor_forestGreen
ofShortColor.fuchsia = _openframeworks.cvar.ofShortColor_fuchsia
ofShortColor.gainsboro = _openframeworks.cvar.ofShortColor_gainsboro
ofShortColor.ghostWhite = _openframeworks.cvar.ofShortColor_ghostWhite
ofShortColor.gold = _openframeworks.cvar.ofShortColor_gold
ofShortColor.goldenRod = _openframeworks.cvar.ofShortColor_goldenRod
ofShortColor.grey = _openframeworks.cvar.ofShortColor_grey
ofShortColor.greenYellow = _openframeworks.cvar.ofShortColor_greenYellow
ofShortColor.honeyDew = _openframeworks.cvar.ofShortColor_honeyDew
ofShortColor.hotPink = _openframeworks.cvar.ofShortColor_hotPink
ofShortColor.indianRed = _openframeworks.cvar.ofShortColor_indianRed
ofShortColor.indigo = _openframeworks.cvar.ofShortColor_indigo
ofShortColor.ivory = _openframeworks.cvar.ofShortColor_ivory
ofShortColor.khaki = _openframeworks.cvar.ofShortColor_khaki
ofShortColor.lavender = _openframeworks.cvar.ofShortColor_lavender
ofShortColor.lavenderBlush = _openframeworks.cvar.ofShortColor_lavenderBlush
ofShortColor.lawnGreen = _openframeworks.cvar.ofShortColor_lawnGreen
ofShortColor.lemonChiffon = _openframeworks.cvar.ofShortColor_lemonChiffon
ofShortColor.lightBlue = _openframeworks.cvar.ofShortColor_lightBlue
ofShortColor.lightCoral = _openframeworks.cvar.ofShortColor_lightCoral
ofShortColor.lightCyan = _openframeworks.cvar.ofShortColor_lightCyan
ofShortColor.lightGoldenRodYellow = _openframeworks.cvar.ofShortColor_lightGoldenRodYellow
ofShortColor.lightGray = _openframeworks.cvar.ofShortColor_lightGray
ofShortColor.lightGrey = _openframeworks.cvar.ofShortColor_lightGrey
ofShortColor.lightGreen = _openframeworks.cvar.ofShortColor_lightGreen
ofShortColor.lightPink = _openframeworks.cvar.ofShortColor_lightPink
ofShortColor.lightSalmon = _openframeworks.cvar.ofShortColor_lightSalmon
ofShortColor.lightSeaGreen = _openframeworks.cvar.ofShortColor_lightSeaGreen
ofShortColor.lightSkyBlue = _openframeworks.cvar.ofShortColor_lightSkyBlue
ofShortColor.lightSlateGray = _openframeworks.cvar.ofShortColor_lightSlateGray
ofShortColor.lightSlateGrey = _openframeworks.cvar.ofShortColor_lightSlateGrey
ofShortColor.lightSteelBlue = _openframeworks.cvar.ofShortColor_lightSteelBlue
ofShortColor.lightYellow = _openframeworks.cvar.ofShortColor_lightYellow
ofShortColor.lime = _openframeworks.cvar.ofShortColor_lime
ofShortColor.limeGreen = _openframeworks.cvar.ofShortColor_limeGreen
ofShortColor.linen = _openframeworks.cvar.ofShortColor_linen
ofShortColor.maroon = _openframeworks.cvar.ofShortColor_maroon
ofShortColor.mediumAquaMarine = _openframeworks.cvar.ofShortColor_mediumAquaMarine
ofShortColor.mediumBlue = _openframeworks.cvar.ofShortColor_mediumBlue
ofShortColor.mediumOrchid = _openframeworks.cvar.ofShortColor_mediumOrchid
ofShortColor.mediumPurple = _openframeworks.cvar.ofShortColor_mediumPurple
ofShortColor.mediumSeaGreen = _openframeworks.cvar.ofShortColor_mediumSeaGreen
ofShortColor.mediumSlateBlue = _openframeworks.cvar.ofShortColor_mediumSlateBlue
ofShortColor.mediumSpringGreen = _openframeworks.cvar.ofShortColor_mediumSpringGreen
ofShortColor.mediumTurquoise = _openframeworks.cvar.ofShortColor_mediumTurquoise
ofShortColor.mediumVioletRed = _openframeworks.cvar.ofShortColor_mediumVioletRed
ofShortColor.midnightBlue = _openframeworks.cvar.ofShortColor_midnightBlue
ofShortColor.mintCream = _openframeworks.cvar.ofShortColor_mintCream
ofShortColor.mistyRose = _openframeworks.cvar.ofShortColor_mistyRose
ofShortColor.moccasin = _openframeworks.cvar.ofShortColor_moccasin
ofShortColor.navajoWhite = _openframeworks.cvar.ofShortColor_navajoWhite
ofShortColor.navy = _openframeworks.cvar.ofShortColor_navy
ofShortColor.oldLace = _openframeworks.cvar.ofShortColor_oldLace
ofShortColor.olive = _openframeworks.cvar.ofShortColor_olive
ofShortColor.oliveDrab = _openframeworks.cvar.ofShortColor_oliveDrab
ofShortColor.orange = _openframeworks.cvar.ofShortColor_orange
ofShortColor.orangeRed = _openframeworks.cvar.ofShortColor_orangeRed
ofShortColor.orchid = _openframeworks.cvar.ofShortColor_orchid
ofShortColor.paleGoldenRod = _openframeworks.cvar.ofShortColor_paleGoldenRod
ofShortColor.paleGreen = _openframeworks.cvar.ofShortColor_paleGreen
ofShortColor.paleTurquoise = _openframeworks.cvar.ofShortColor_paleTurquoise
ofShortColor.paleVioletRed = _openframeworks.cvar.ofShortColor_paleVioletRed
ofShortColor.papayaWhip = _openframeworks.cvar.ofShortColor_papayaWhip
ofShortColor.peachPuff = _openframeworks.cvar.ofShortColor_peachPuff
ofShortColor.peru = _openframeworks.cvar.ofShortColor_peru
ofShortColor.pink = _openframeworks.cvar.ofShortColor_pink
ofShortColor.plum = _openframeworks.cvar.ofShortColor_plum
ofShortColor.powderBlue = _openframeworks.cvar.ofShortColor_powderBlue
ofShortColor.purple = _openframeworks.cvar.ofShortColor_purple
ofShortColor.rosyBrown = _openframeworks.cvar.ofShortColor_rosyBrown
ofShortColor.royalBlue = _openframeworks.cvar.ofShortColor_royalBlue
ofShortColor.saddleBrown = _openframeworks.cvar.ofShortColor_saddleBrown
ofShortColor.salmon = _openframeworks.cvar.ofShortColor_salmon
ofShortColor.sandyBrown = _openframeworks.cvar.ofShortColor_sandyBrown
ofShortColor.seaGreen = _openframeworks.cvar.ofShortColor_seaGreen
ofShortColor.seaShell = _openframeworks.cvar.ofShortColor_seaShell
ofShortColor.sienna = _openframeworks.cvar.ofShortColor_sienna
ofShortColor.silver = _openframeworks.cvar.ofShortColor_silver
ofShortColor.skyBlue = _openframeworks.cvar.ofShortColor_skyBlue
ofShortColor.slateBlue = _openframeworks.cvar.ofShortColor_slateBlue
ofShortColor.slateGray = _openframeworks.cvar.ofShortColor_slateGray
ofShortColor.slateGrey = _openframeworks.cvar.ofShortColor_slateGrey
ofShortColor.snow = _openframeworks.cvar.ofShortColor_snow
ofShortColor.springGreen = _openframeworks.cvar.ofShortColor_springGreen
ofShortColor.steelBlue = _openframeworks.cvar.ofShortColor_steelBlue
ofShortColor.blueSteel = _openframeworks.cvar.ofShortColor_blueSteel
ofShortColor.tan = _openframeworks.cvar.ofShortColor_tan
ofShortColor.teal = _openframeworks.cvar.ofShortColor_teal
ofShortColor.thistle = _openframeworks.cvar.ofShortColor_thistle
ofShortColor.tomato = _openframeworks.cvar.ofShortColor_tomato
ofShortColor.turquoise = _openframeworks.cvar.ofShortColor_turquoise
ofShortColor.violet = _openframeworks.cvar.ofShortColor_violet
ofShortColor.wheat = _openframeworks.cvar.ofShortColor_wheat
ofShortColor.whiteSmoke = _openframeworks.cvar.ofShortColor_whiteSmoke
ofShortColor.yellowGreen = _openframeworks.cvar.ofShortColor_yellowGreen

OF_ASPECT_RATIO_IGNORE = _openframeworks.OF_ASPECT_RATIO_IGNORE
OF_ASPECT_RATIO_KEEP = _openframeworks.OF_ASPECT_RATIO_KEEP
OF_ASPECT_RATIO_KEEP_BY_EXPANDING = _openframeworks.OF_ASPECT_RATIO_KEEP_BY_EXPANDING
OF_ALIGN_VERT_IGNORE = _openframeworks.OF_ALIGN_VERT_IGNORE
OF_ALIGN_VERT_TOP = _openframeworks.OF_ALIGN_VERT_TOP
OF_ALIGN_VERT_BOTTOM = _openframeworks.OF_ALIGN_VERT_BOTTOM
OF_ALIGN_VERT_CENTER = _openframeworks.OF_ALIGN_VERT_CENTER
OF_ALIGN_HORZ_IGNORE = _openframeworks.OF_ALIGN_HORZ_IGNORE
OF_ALIGN_HORZ_LEFT = _openframeworks.OF_ALIGN_HORZ_LEFT
OF_ALIGN_HORZ_RIGHT = _openframeworks.OF_ALIGN_HORZ_RIGHT
OF_ALIGN_HORZ_CENTER = _openframeworks.OF_ALIGN_HORZ_CENTER
OF_SCALEMODE_FIT = _openframeworks.OF_SCALEMODE_FIT
OF_SCALEMODE_FILL = _openframeworks.OF_SCALEMODE_FILL
OF_SCALEMODE_CENTER = _openframeworks.OF_SCALEMODE_CENTER
OF_SCALEMODE_STRETCH_TO_FILL = _openframeworks.OF_SCALEMODE_STRETCH_TO_FILL
class ofRectangle(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openframeworks.new_ofRectangle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _openframeworks.delete_ofRectangle
    __del__ = lambda self: None

    def set(self, *args):
        return _openframeworks.ofRectangle_set(self, *args)

    def setX(self, px):
        return _openframeworks.ofRectangle_setX(self, px)

    def setY(self, py):
        return _openframeworks.ofRectangle_setY(self, py)

    def setWidth(self, w):
        return _openframeworks.ofRectangle_setWidth(self, w)

    def setHeight(self, h):
        return _openframeworks.ofRectangle_setHeight(self, h)

    def setPosition(self, *args):
        return _openframeworks.ofRectangle_setPosition(self, *args)

    def setSize(self, w, h):
        return _openframeworks.ofRectangle_setSize(self, w, h)

    def setFromCenter(self, *args):
        return _openframeworks.ofRectangle_setFromCenter(self, *args)

    def translate(self, *args):
        return _openframeworks.ofRectangle_translate(self, *args)

    def translateX(self, dx):
        return _openframeworks.ofRectangle_translateX(self, dx)

    def translateY(self, dy):
        return _openframeworks.ofRectangle_translateY(self, dy)

    def scale(self, *args):
        return _openframeworks.ofRectangle_scale(self, *args)

    def scaleWidth(self, sX):
        return _openframeworks.ofRectangle_scaleWidth(self, sX)

    def scaleHeight(self, sY):
        return _openframeworks.ofRectangle_scaleHeight(self, sY)

    def scaleFromCenter(self, *args):
        return _openframeworks.ofRectangle_scaleFromCenter(self, *args)

    def scaleToScaleMode(self, targetRect, scaleMode=OF_SCALEMODE_FIT):
        return _openframeworks.ofRectangle_scaleToScaleMode(self, targetRect, scaleMode)

    def scaleToAspectRatio(self, *args):
        return _openframeworks.ofRectangle_scaleToAspectRatio(self, *args)

    def scaleTo(self, *args):
        return _openframeworks.ofRectangle_scaleTo(self, *args)

    def alignToHorz(self, *args):
        return _openframeworks.ofRectangle_alignToHorz(self, *args)

    def alignToVert(self, *args):
        return _openframeworks.ofRectangle_alignToVert(self, *args)

    def alignTo(self, *args):
        return _openframeworks.ofRectangle_alignTo(self, *args)

    def inside(self, *args):
        return _openframeworks.ofRectangle_inside(self, *args)

    def intersects(self, *args):
        return _openframeworks.ofRectangle_intersects(self, *args)

    def growToInclude(self, *args):
        return _openframeworks.ofRectangle_growToInclude(self, *args)

    def getIntersection(self, rect):
        return _openframeworks.ofRectangle_getIntersection(self, rect)

    def getUnion(self, rect):
        return _openframeworks.ofRectangle_getUnion(self, rect)

    def standardize(self):
        return _openframeworks.ofRectangle_standardize(self)

    def getStandardized(self):
        return _openframeworks.ofRectangle_getStandardized(self)

    def isStandardized(self):
        return _openframeworks.ofRectangle_isStandardized(self)

    def getArea(self):
        return _openframeworks.ofRectangle_getArea(self)

    def getPerimeter(self):
        return _openframeworks.ofRectangle_getPerimeter(self)

    def getAspectRatio(self):
        return _openframeworks.ofRectangle_getAspectRatio(self)

    def isEmpty(self):
        return _openframeworks.ofRectangle_isEmpty(self)

    def getMin(self):
        return _openframeworks.ofRectangle_getMin(self)

    def getMax(self):
        return _openframeworks.ofRectangle_getMax(self)

    def getMinX(self):
        return _openframeworks.ofRectangle_getMinX(self)

    def getMaxX(self):
        return _openframeworks.ofRectangle_getMaxX(self)

    def getMinY(self):
        return _openframeworks.ofRectangle_getMinY(self)

    def getMaxY(self):
        return _openframeworks.ofRectangle_getMaxY(self)

    def getLeft(self):
        return _openframeworks.ofRectangle_getLeft(self)

    def getRight(self):
        return _openframeworks.ofRectangle_getRight(self)

    def getTop(self):
        return _openframeworks.ofRectangle_getTop(self)

    def getBottom(self):
        return _openframeworks.ofRectangle_getBottom(self)

    def getTopLeft(self):
        return _openframeworks.ofRectangle_getTopLeft(self)

    def getTopRight(self):
        return _openframeworks.ofRectangle_getTopRight(self)

    def getBottomLeft(self):
        return _openframeworks.ofRectangle_getBottomLeft(self)

    def getBottomRight(self):
        return _openframeworks.ofRectangle_getBottomRight(self)

    def getHorzAnchor(self, anchor):
        return _openframeworks.ofRectangle_getHorzAnchor(self, anchor)

    def getVertAnchor(self, anchor):
        return _openframeworks.ofRectangle_getVertAnchor(self, anchor)

    def getPosition(self):
        return _openframeworks.ofRectangle_getPosition(self)

    def getCenter(self):
        return _openframeworks.ofRectangle_getCenter(self)

    def getX(self):
        return _openframeworks.ofRectangle_getX(self)

    def getY(self):
        return _openframeworks.ofRectangle_getY(self)

    def getWidth(self):
        return _openframeworks.ofRectangle_getWidth(self)

    def getHeight(self):
        return _openframeworks.ofRectangle_getHeight(self)

    def map(self, *args):
        return _openframeworks.ofRectangle_map(self, *args)

    def mapClamp(self, *args):
        return _openframeworks.ofRectangle_mapClamp(self, *args)

    def __add__(self, *args):
        return _openframeworks.ofRectangle___add__(self, *args)

    def __sub__(self, *args):
        return _openframeworks.ofRectangle___sub__(self, *args)

    def __eq__(self, rect):
        return _openframeworks.ofRectangle___eq__(self, rect)

    def __ne__(self, rect):
        return _openframeworks.ofRectangle___ne__(self, rect)

    def isZero(self):
        return _openframeworks.ofRectangle_isZero(self)
    position = _swig_property(_openframeworks.ofRectangle_position_get, _openframeworks.ofRectangle_position_set)
    width = _swig_property(_openframeworks.ofRectangle_width_get, _openframeworks.ofRectangle_width_set)
    height = _swig_property(_openframeworks.ofRectangle_height_get, _openframeworks.ofRectangle_height_set)
    x = _swig_property(_openframeworks.ofRectangle_x_get, _openframeworks.ofRectangle_x_set)
    y = _swig_property(_openframeworks.ofRectangle_y_get, _openframeworks.ofRectangle_y_set)

    def __str__(self):
        return _openframeworks.ofRectangle___str__(self)
ofRectangle_swigregister = _openframeworks.ofRectangle_swigregister
ofRectangle_swigregister(ofRectangle)

class ofFpsCounter(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openframeworks.new_ofFpsCounter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def newFrame(self):
        return _openframeworks.ofFpsCounter_newFrame(self)

    def update(self):
        return _openframeworks.ofFpsCounter_update(self)

    def getFps(self):
        return _openframeworks.ofFpsCounter_getFps(self)

    def getNumFrames(self):
        return _openframeworks.ofFpsCounter_getNumFrames(self)

    def getLastFrameNanos(self):
        return _openframeworks.ofFpsCounter_getLastFrameNanos(self)

    def getLastFrameSecs(self):
        return _openframeworks.ofFpsCounter_getLastFrameSecs(self)

    def getLastFrameFilteredNanos(self):
        return _openframeworks.ofFpsCounter_getLastFrameFilteredNanos(self)

    def getLastFrameFilteredSecs(self):
        return _openframeworks.ofFpsCounter_getLastFrameFilteredSecs(self)

    def setFilterAlpha(self, alpha):
        return _openframeworks.ofFpsCounter_setFilterAlpha(self, alpha)
    __swig_destroy__ = _openframeworks.delete_ofFpsCounter
    __del__ = lambda self: None
ofFpsCounter_swigregister = _openframeworks.ofFpsCounter_swigregister
ofFpsCounter_swigregister(ofFpsCounter)

class ofXml(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        this = _openframeworks.new_ofXml()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def load(self, *args):
        return _openframeworks.ofXml_load(self, *args)

    def parse(self, xmlStr):
        return _openframeworks.ofXml_parse(self, xmlStr)

    def save(self, file):
        return _openframeworks.ofXml_save(self, file)

    def toString(self, *args):
        return _openframeworks.ofXml_toString(self, *args)

    def getChild(self, name):
        return _openframeworks.ofXml_getChild(self, name)

    def getChildren(self, *args):
        return _openframeworks.ofXml_getChildren(self, *args)

    def appendChild(self, *args):
        return _openframeworks.ofXml_appendChild(self, *args)

    def prependChild(self, *args):
        return _openframeworks.ofXml_prependChild(self, *args)

    def removeChild(self, name):
        return _openframeworks.ofXml_removeChild(self, name)

    def insertChildAfter(self, name, after):
        return _openframeworks.ofXml_insertChildAfter(self, name, after)

    def insertChildBefore(self, name, after):
        return _openframeworks.ofXml_insertChildBefore(self, name, after)

    def getNextSibling(self, *args):
        return _openframeworks.ofXml_getNextSibling(self, *args)

    def getPreviousSibling(self, *args):
        return _openframeworks.ofXml_getPreviousSibling(self, *args)

    def getFirstChild(self):
        return _openframeworks.ofXml_getFirstChild(self)

    def getLastChild(self):
        return _openframeworks.ofXml_getLastChild(self)

    def getAttribute(self, name):
        return _openframeworks.ofXml_getAttribute(self, name)

    def getAttributes(self):
        return _openframeworks.ofXml_getAttributes(self)

    def getFirstAttribute(self):
        return _openframeworks.ofXml_getFirstAttribute(self)

    def getLastAttribute(self):
        return _openframeworks.ofXml_getLastAttribute(self)

    def appendAttribute(self, name):
        return _openframeworks.ofXml_appendAttribute(self, name)

    def prependAttribute(self, name):
        return _openframeworks.ofXml_prependAttribute(self, name)

    def findFirst(self, path):
        return _openframeworks.ofXml_findFirst(self, path)

    def getValue(self):
        return _openframeworks.ofXml_getValue(self)

    def getName(self):
        return _openframeworks.ofXml_getName(self)

    def set(self, value):
        return _openframeworks.ofXml_set(self, value)

    def setName(self, name):
        return _openframeworks.ofXml_setName(self, name)

    def getIntValue(self):
        return _openframeworks.ofXml_getIntValue(self)

    def getUintValue(self):
        return _openframeworks.ofXml_getUintValue(self)

    def getFloatValue(self):
        return _openframeworks.ofXml_getFloatValue(self)

    def getDoubleValue(self):
        return _openframeworks.ofXml_getDoubleValue(self)

    def getBoolValue(self):
        return _openframeworks.ofXml_getBoolValue(self)
    __swig_destroy__ = _openframeworks.delete_ofXml
    __del__ = lambda self: None
ofXml_swigregister = _openframeworks.ofXml_swigregister
ofXml_swigregister(ofXml)


def ofSerialize(xml, parameter):
    return _openframeworks.ofSerialize(xml, parameter)
ofSerialize = _openframeworks.ofSerialize

def ofDeserialize(xml, parameter):
    return _openframeworks.ofDeserialize(xml, parameter)
ofDeserialize = _openframeworks.ofDeserialize
class ofMatrixStack(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, window):
        this = _openframeworks.new_ofMatrixStack(window)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setRenderSurfaceNoMatrixFlip(self, fbo):
        return _openframeworks.ofMatrixStack_setRenderSurfaceNoMatrixFlip(self, fbo)

    def setRenderSurface(self, *args):
        return _openframeworks.ofMatrixStack_setRenderSurface(self, *args)

    def setOrientation(self, orientation, vFlip):
        return _openframeworks.ofMatrixStack_setOrientation(self, orientation, vFlip)

    def getOrientation(self):
        return _openframeworks.ofMatrixStack_getOrientation(self)

    def viewport(self, x, y, width, height, vflip):
        return _openframeworks.ofMatrixStack_viewport(self, x, y, width, height, vflip)

    def nativeViewport(self, viewport):
        return _openframeworks.ofMatrixStack_nativeViewport(self, viewport)

    def getCurrentViewport(self):
        return _openframeworks.ofMatrixStack_getCurrentViewport(self)

    def getNativeViewport(self):
        return _openframeworks.ofMatrixStack_getNativeViewport(self)

    def getFullSurfaceViewport(self):
        return _openframeworks.ofMatrixStack_getFullSurfaceViewport(self)

    def getProjectionMatrix(self):
        return _openframeworks.ofMatrixStack_getProjectionMatrix(self)

    def getViewInverse(self):
        return _openframeworks.ofMatrixStack_getViewInverse(self)

    def getViewMatrix(self):
        return _openframeworks.ofMatrixStack_getViewMatrix(self)

    def getModelMatrix(self):
        return _openframeworks.ofMatrixStack_getModelMatrix(self)

    def getModelViewMatrix(self):
        return _openframeworks.ofMatrixStack_getModelViewMatrix(self)

    def getModelViewProjectionMatrix(self):
        return _openframeworks.ofMatrixStack_getModelViewProjectionMatrix(self)

    def getTextureMatrix(self):
        return _openframeworks.ofMatrixStack_getTextureMatrix(self)

    def getCurrentMatrix(self):
        return _openframeworks.ofMatrixStack_getCurrentMatrix(self)

    def getProjectionMatrixNoOrientation(self):
        return _openframeworks.ofMatrixStack_getProjectionMatrixNoOrientation(self)

    def getOrientationMatrix(self):
        return _openframeworks.ofMatrixStack_getOrientationMatrix(self)

    def getOrientationMatrixInverse(self):
        return _openframeworks.ofMatrixStack_getOrientationMatrixInverse(self)

    def getCurrentMatrixMode(self):
        return _openframeworks.ofMatrixStack_getCurrentMatrixMode(self)

    def getHandedness(self):
        return _openframeworks.ofMatrixStack_getHandedness(self)

    def isVFlipped(self):
        return _openframeworks.ofMatrixStack_isVFlipped(self)

    def customMatrixNeedsFlip(self):
        return _openframeworks.ofMatrixStack_customMatrixNeedsFlip(self)

    def pushView(self):
        return _openframeworks.ofMatrixStack_pushView(self)

    def popView(self):
        return _openframeworks.ofMatrixStack_popView(self)

    def pushMatrix(self):
        return _openframeworks.ofMatrixStack_pushMatrix(self)

    def popMatrix(self):
        return _openframeworks.ofMatrixStack_popMatrix(self)

    def translate(self, x, y, z=0):
        return _openframeworks.ofMatrixStack_translate(self, x, y, z)

    def scale(self, xAmnt, yAmnt, zAmnt=1):
        return _openframeworks.ofMatrixStack_scale(self, xAmnt, yAmnt, zAmnt)

    def rotateRad(self, radians, vecX, vecY, vecZ):
        return _openframeworks.ofMatrixStack_rotateRad(self, radians, vecX, vecY, vecZ)

    def matrixMode(self, mode):
        return _openframeworks.ofMatrixStack_matrixMode(self, mode)

    def loadIdentityMatrix(self):
        return _openframeworks.ofMatrixStack_loadIdentityMatrix(self)

    def loadMatrix(self, m):
        return _openframeworks.ofMatrixStack_loadMatrix(self, m)

    def multMatrix(self, m):
        return _openframeworks.ofMatrixStack_multMatrix(self, m)

    def loadViewMatrix(self, matrix):
        return _openframeworks.ofMatrixStack_loadViewMatrix(self, matrix)

    def multViewMatrix(self, matrix):
        return _openframeworks.ofMatrixStack_multViewMatrix(self, matrix)

    def clearStacks(self):
        return _openframeworks.ofMatrixStack_clearStacks(self)

    def doesHardwareOrientation(self):
        return _openframeworks.ofMatrixStack_doesHardwareOrientation(self)
    __swig_destroy__ = _openframeworks.delete_ofMatrixStack
    __del__ = lambda self: None
ofMatrixStack_swigregister = _openframeworks.ofMatrixStack_swigregister
ofMatrixStack_swigregister(ofMatrixStack)

class ofBuffer(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openframeworks.new_ofBuffer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set(self, *args):
        return _openframeworks.ofBuffer_set(self, *args)

    def setall(self, mem):
        return _openframeworks.ofBuffer_setall(self, mem)

    def append(self, buffer):
        return _openframeworks.ofBuffer_append(self, buffer)

    def reserve(self, size):
        return _openframeworks.ofBuffer_reserve(self, size)

    def clear(self):
        return _openframeworks.ofBuffer_clear(self)

    def allocate(self, size):
        return _openframeworks.ofBuffer_allocate(self, size)

    def resize(self, size):
        return _openframeworks.ofBuffer_resize(self, size)

    def getData(self):
        return _openframeworks.ofBuffer_getData(self)

    def getText(self):
        return _openframeworks.ofBuffer_getText(self)

    def size(self):
        return _openframeworks.ofBuffer_size(self)
    __swig_destroy__ = _openframeworks.delete_ofBuffer
    __del__ = lambda self: None
ofBuffer_swigregister = _openframeworks.ofBuffer_swigregister
ofBuffer_swigregister(ofBuffer)


def ofBufferFromFile(path, binary=True):
    return _openframeworks.ofBufferFromFile(path, binary)
ofBufferFromFile = _openframeworks.ofBufferFromFile

def ofBufferToFile(path, buffer, binary=True):
    return _openframeworks.ofBufferToFile(path, buffer, binary)
ofBufferToFile = _openframeworks.ofBufferToFile
class ofFilePath(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getFileExt = staticmethod(_openframeworks.ofFilePath_getFileExt)
    removeExt = staticmethod(_openframeworks.ofFilePath_removeExt)
    addLeadingSlash = staticmethod(_openframeworks.ofFilePath_addLeadingSlash)
    addTrailingSlash = staticmethod(_openframeworks.ofFilePath_addTrailingSlash)
    removeTrailingSlash = staticmethod(_openframeworks.ofFilePath_removeTrailingSlash)
    getPathForDirectory = staticmethod(_openframeworks.ofFilePath_getPathForDirectory)
    getAbsolutePath = staticmethod(_openframeworks.ofFilePath_getAbsolutePath)
    isAbsolute = staticmethod(_openframeworks.ofFilePath_isAbsolute)
    getFileName = staticmethod(_openframeworks.ofFilePath_getFileName)
    getBaseName = staticmethod(_openframeworks.ofFilePath_getBaseName)
    getEnclosingDirectory = staticmethod(_openframeworks.ofFilePath_getEnclosingDirectory)
    createEnclosingDirectory = staticmethod(_openframeworks.ofFilePath_createEnclosingDirectory)
    getCurrentWorkingDirectory = staticmethod(_openframeworks.ofFilePath_getCurrentWorkingDirectory)
    join = staticmethod(_openframeworks.ofFilePath_join)
    getCurrentExePath = staticmethod(_openframeworks.ofFilePath_getCurrentExePath)
    getCurrentExeDir = staticmethod(_openframeworks.ofFilePath_getCurrentExeDir)
    getUserHomeDir = staticmethod(_openframeworks.ofFilePath_getUserHomeDir)
    makeRelative = staticmethod(_openframeworks.ofFilePath_makeRelative)

    def __init__(self):
        this = _openframeworks.new_ofFilePath()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _openframeworks.delete_ofFilePath
    __del__ = lambda self: None
ofFilePath_swigregister = _openframeworks.ofFilePath_swigregister
ofFilePath_swigregister(ofFilePath)

def ofFilePath_getFileExt(filename):
    return _openframeworks.ofFilePath_getFileExt(filename)
ofFilePath_getFileExt = _openframeworks.ofFilePath_getFileExt

def ofFilePath_removeExt(filename):
    return _openframeworks.ofFilePath_removeExt(filename)
ofFilePath_removeExt = _openframeworks.ofFilePath_removeExt

def ofFilePath_addLeadingSlash(path):
    return _openframeworks.ofFilePath_addLeadingSlash(path)
ofFilePath_addLeadingSlash = _openframeworks.ofFilePath_addLeadingSlash

def ofFilePath_addTrailingSlash(path):
    return _openframeworks.ofFilePath_addTrailingSlash(path)
ofFilePath_addTrailingSlash = _openframeworks.ofFilePath_addTrailingSlash

def ofFilePath_removeTrailingSlash(path):
    return _openframeworks.ofFilePath_removeTrailingSlash(path)
ofFilePath_removeTrailingSlash = _openframeworks.ofFilePath_removeTrailingSlash

def ofFilePath_getPathForDirectory(path):
    return _openframeworks.ofFilePath_getPathForDirectory(path)
ofFilePath_getPathForDirectory = _openframeworks.ofFilePath_getPathForDirectory

def ofFilePath_getAbsolutePath(path, bRelativeToData=True):
    return _openframeworks.ofFilePath_getAbsolutePath(path, bRelativeToData)
ofFilePath_getAbsolutePath = _openframeworks.ofFilePath_getAbsolutePath

def ofFilePath_isAbsolute(path):
    return _openframeworks.ofFilePath_isAbsolute(path)
ofFilePath_isAbsolute = _openframeworks.ofFilePath_isAbsolute

def ofFilePath_getFileName(filePath, bRelativeToData=True):
    return _openframeworks.ofFilePath_getFileName(filePath, bRelativeToData)
ofFilePath_getFileName = _openframeworks.ofFilePath_getFileName

def ofFilePath_getBaseName(filePath):
    return _openframeworks.ofFilePath_getBaseName(filePath)
ofFilePath_getBaseName = _openframeworks.ofFilePath_getBaseName

def ofFilePath_getEnclosingDirectory(filePath, bRelativeToData=True):
    return _openframeworks.ofFilePath_getEnclosingDirectory(filePath, bRelativeToData)
ofFilePath_getEnclosingDirectory = _openframeworks.ofFilePath_getEnclosingDirectory

def ofFilePath_createEnclosingDirectory(filePath, bRelativeToData=True, bRecursive=True):
    return _openframeworks.ofFilePath_createEnclosingDirectory(filePath, bRelativeToData, bRecursive)
ofFilePath_createEnclosingDirectory = _openframeworks.ofFilePath_createEnclosingDirectory

def ofFilePath_getCurrentWorkingDirectory():
    return _openframeworks.ofFilePath_getCurrentWorkingDirectory()
ofFilePath_getCurrentWorkingDirectory = _openframeworks.ofFilePath_getCurrentWorkingDirectory

def ofFilePath_join(path1, path2):
    return _openframeworks.ofFilePath_join(path1, path2)
ofFilePath_join = _openframeworks.ofFilePath_join

def ofFilePath_getCurrentExePath():
    return _openframeworks.ofFilePath_getCurrentExePath()
ofFilePath_getCurrentExePath = _openframeworks.ofFilePath_getCurrentExePath

def ofFilePath_getCurrentExeDir():
    return _openframeworks.ofFilePath_getCurrentExeDir()
ofFilePath_getCurrentExeDir = _openframeworks.ofFilePath_getCurrentExeDir

def ofFilePath_getUserHomeDir():
    return _openframeworks.ofFilePath_getUserHomeDir()
ofFilePath_getUserHomeDir = _openframeworks.ofFilePath_getUserHomeDir

def ofFilePath_makeRelative(arg2, to):
    return _openframeworks.ofFilePath_makeRelative(arg2, to)
ofFilePath_makeRelative = _openframeworks.ofFilePath_makeRelative

class ofFile(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Reference = _openframeworks.ofFile_Reference
    ReadOnly = _openframeworks.ofFile_ReadOnly
    WriteOnly = _openframeworks.ofFile_WriteOnly
    ReadWrite = _openframeworks.ofFile_ReadWrite
    Append = _openframeworks.ofFile_Append

    def __init__(self, *args):
        this = _openframeworks.new_ofFile(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _openframeworks.delete_ofFile
    __del__ = lambda self: None

    def open(self, *args):
        return _openframeworks.ofFile_open(self, *args)

    def openFromCWD(self, *args):
        return _openframeworks.ofFile_openFromCWD(self, *args)

    def changeMode(self, mode, binary=True):
        return _openframeworks.ofFile_changeMode(self, mode, binary)

    def close(self):
        return _openframeworks.ofFile_close(self)

    def create(self, *args):
        return _openframeworks.ofFile_create(self, *args)

    def exists(self):
        return _openframeworks.ofFile_exists(self)

    def path(self):
        return _openframeworks.ofFile_path(self)

    def getExtension(self):
        return _openframeworks.ofFile_getExtension(self)

    def getFileName(self):
        return _openframeworks.ofFile_getFileName(self)

    def getBaseName(self):
        return _openframeworks.ofFile_getBaseName(self)

    def getEnclosingDirectory(self):
        return _openframeworks.ofFile_getEnclosingDirectory(self)

    def getAbsolutePath(self):
        return _openframeworks.ofFile_getAbsolutePath(self)

    def canRead(self):
        return _openframeworks.ofFile_canRead(self)

    def canWrite(self):
        return _openframeworks.ofFile_canWrite(self)

    def canExecute(self):
        return _openframeworks.ofFile_canExecute(self)

    def isFile(self):
        return _openframeworks.ofFile_isFile(self)

    def isLink(self):
        return _openframeworks.ofFile_isLink(self)

    def isDirectory(self):
        return _openframeworks.ofFile_isDirectory(self)

    def isDevice(self):
        return _openframeworks.ofFile_isDevice(self)

    def isHidden(self):
        return _openframeworks.ofFile_isHidden(self)

    def setWriteable(self, writeable=True):
        return _openframeworks.ofFile_setWriteable(self, writeable)

    def setReadable(self, readable=True):
        return _openframeworks.ofFile_setReadable(self, readable)

    def setExecutable(self, executable=True):
        return _openframeworks.ofFile_setExecutable(self, executable)

    def copyTo(self, path, bRelativeToData=True, overwrite=False):
        return _openframeworks.ofFile_copyTo(self, path, bRelativeToData, overwrite)

    def moveTo(self, path, bRelativeToData=True, overwrite=False):
        return _openframeworks.ofFile_moveTo(self, path, bRelativeToData, overwrite)

    def renameTo(self, path, bRelativeToData=True, overwrite=False):
        return _openframeworks.ofFile_renameTo(self, path, bRelativeToData, overwrite)

    def remove(self, recursive=False):
        return _openframeworks.ofFile_remove(self, recursive)

    def getSize(self):
        return _openframeworks.ofFile_getSize(self)

    def __eq__(self, file):
        return _openframeworks.ofFile___eq__(self, file)

    def __ne__(self, file):
        return _openframeworks.ofFile___ne__(self, file)

    def __lt__(self, file):
        return _openframeworks.ofFile___lt__(self, file)

    def __le__(self, file):
        return _openframeworks.ofFile___le__(self, file)

    def __gt__(self, file):
        return _openframeworks.ofFile___gt__(self, file)

    def __ge__(self, file):
        return _openframeworks.ofFile___ge__(self, file)

    def readToBuffer(self):
        return _openframeworks.ofFile_readToBuffer(self)

    def writeFromBuffer(self, buffer):
        return _openframeworks.ofFile_writeFromBuffer(self, buffer)
    copyFromTo = staticmethod(_openframeworks.ofFile_copyFromTo)
    moveFromTo = staticmethod(_openframeworks.ofFile_moveFromTo)
    doesFileExist = staticmethod(_openframeworks.ofFile_doesFileExist)
    removeFile = staticmethod(_openframeworks.ofFile_removeFile)
ofFile_swigregister = _openframeworks.ofFile_swigregister
ofFile_swigregister(ofFile)

def ofFile_copyFromTo(pathSrc, pathDst, bRelativeToData=True, overwrite=False):
    return _openframeworks.ofFile_copyFromTo(pathSrc, pathDst, bRelativeToData, overwrite)
ofFile_copyFromTo = _openframeworks.ofFile_copyFromTo

def ofFile_moveFromTo(pathSrc, pathDst, bRelativeToData=True, overwrite=False):
    return _openframeworks.ofFile_moveFromTo(pathSrc, pathDst, bRelativeToData, overwrite)
ofFile_moveFromTo = _openframeworks.ofFile_moveFromTo

def ofFile_doesFileExist(fPath, bRelativeToData=True):
    return _openframeworks.ofFile_doesFileExist(fPath, bRelativeToData)
ofFile_doesFileExist = _openframeworks.ofFile_doesFileExist

def ofFile_removeFile(path, bRelativeToData=True):
    return _openframeworks.ofFile_removeFile(path, bRelativeToData)
ofFile_removeFile = _openframeworks.ofFile_removeFile

class ofDirectory(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openframeworks.new_ofDirectory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def open(self, path):
        return _openframeworks.ofDirectory_open(self, path)

    def openFromCWD(self, path):
        return _openframeworks.ofDirectory_openFromCWD(self, path)

    def close(self):
        return _openframeworks.ofDirectory_close(self)

    def create(self, recursive=False):
        return _openframeworks.ofDirectory_create(self, recursive)

    def exists(self):
        return _openframeworks.ofDirectory_exists(self)

    def path(self):
        return _openframeworks.ofDirectory_path(self)

    def getAbsolutePath(self):
        return _openframeworks.ofDirectory_getAbsolutePath(self)

    def canRead(self):
        return _openframeworks.ofDirectory_canRead(self)

    def canWrite(self):
        return _openframeworks.ofDirectory_canWrite(self)

    def canExecute(self):
        return _openframeworks.ofDirectory_canExecute(self)

    def isDirectory(self):
        return _openframeworks.ofDirectory_isDirectory(self)

    def isHidden(self):
        return _openframeworks.ofDirectory_isHidden(self)

    def setWriteable(self, writeable=True):
        return _openframeworks.ofDirectory_setWriteable(self, writeable)

    def setReadable(self, readable=True):
        return _openframeworks.ofDirectory_setReadable(self, readable)

    def setExecutable(self, executable=True):
        return _openframeworks.ofDirectory_setExecutable(self, executable)

    def setShowHidden(self, showHidden):
        return _openframeworks.ofDirectory_setShowHidden(self, showHidden)

    def copyTo(self, path, bRelativeToData=True, overwrite=False):
        return _openframeworks.ofDirectory_copyTo(self, path, bRelativeToData, overwrite)

    def moveTo(self, path, bRelativeToData=True, overwrite=False):
        return _openframeworks.ofDirectory_moveTo(self, path, bRelativeToData, overwrite)

    def renameTo(self, path, bRelativeToData=True, overwrite=False):
        return _openframeworks.ofDirectory_renameTo(self, path, bRelativeToData, overwrite)

    def remove(self, recursive):
        return _openframeworks.ofDirectory_remove(self, recursive)

    def allowExt(self, extension):
        return _openframeworks.ofDirectory_allowExt(self, extension)

    def listDir(self, *args):
        return _openframeworks.ofDirectory_listDir(self, *args)

    def getOriginalDirectory(self):
        return _openframeworks.ofDirectory_getOriginalDirectory(self)

    def getName(self, position):
        return _openframeworks.ofDirectory_getName(self, position)

    def getPath(self, position):
        return _openframeworks.ofDirectory_getPath(self, position)

    def getFile(self, *args):
        return _openframeworks.ofDirectory_getFile(self, *args)

    def getFiles(self):
        return _openframeworks.ofDirectory_getFiles(self)

    def __getitem__(self, position):
        return _openframeworks.ofDirectory___getitem__(self, position)

    def getShowHidden(self):
        return _openframeworks.ofDirectory_getShowHidden(self)

    def reset(self):
        return _openframeworks.ofDirectory_reset(self)

    def sort(self):
        return _openframeworks.ofDirectory_sort(self)

    def sortByDate(self):
        return _openframeworks.ofDirectory_sortByDate(self)

    def getSorted(self):
        return _openframeworks.ofDirectory_getSorted(self)

    def size(self):
        return _openframeworks.ofDirectory_size(self)

    def __eq__(self, dir):
        return _openframeworks.ofDirectory___eq__(self, dir)

    def __ne__(self, dir):
        return _openframeworks.ofDirectory___ne__(self, dir)

    def __lt__(self, dir):
        return _openframeworks.ofDirectory___lt__(self, dir)

    def __le__(self, dir):
        return _openframeworks.ofDirectory___le__(self, dir)

    def __gt__(self, dir):
        return _openframeworks.ofDirectory___gt__(self, dir)

    def __ge__(self, dir):
        return _openframeworks.ofDirectory___ge__(self, dir)
    createDirectory = staticmethod(_openframeworks.ofDirectory_createDirectory)
    isDirectoryEmpty = staticmethod(_openframeworks.ofDirectory_isDirectoryEmpty)
    doesDirectoryExist = staticmethod(_openframeworks.ofDirectory_doesDirectoryExist)
    removeDirectory = staticmethod(_openframeworks.ofDirectory_removeDirectory)
    __swig_destroy__ = _openframeworks.delete_ofDirectory
    __del__ = lambda self: None
ofDirectory_swigregister = _openframeworks.ofDirectory_swigregister
ofDirectory_swigregister(ofDirectory)

def ofDirectory_createDirectory(dirPath, bRelativeToData=True, recursive=False):
    return _openframeworks.ofDirectory_createDirectory(dirPath, bRelativeToData, recursive)
ofDirectory_createDirectory = _openframeworks.ofDirectory_createDirectory

def ofDirectory_isDirectoryEmpty(dirPath, bRelativeToData=True):
    return _openframeworks.ofDirectory_isDirectoryEmpty(dirPath, bRelativeToData)
ofDirectory_isDirectoryEmpty = _openframeworks.ofDirectory_isDirectoryEmpty

def ofDirectory_doesDirectoryExist(dirPath, bRelativeToData=True):
    return _openframeworks.ofDirectory_doesDirectoryExist(dirPath, bRelativeToData)
ofDirectory_doesDirectoryExist = _openframeworks.ofDirectory_doesDirectoryExist

def ofDirectory_removeDirectory(path, deleteIfNotEmpty, bRelativeToData=True):
    return _openframeworks.ofDirectory_removeDirectory(path, deleteIfNotEmpty, bRelativeToData)
ofDirectory_removeDirectory = _openframeworks.ofDirectory_removeDirectory


def logPY(level, message):
    return _openframeworks.logPY(level, message)
logPY = _openframeworks.logPY
OF_LOG_VERBOSE = _openframeworks.OF_LOG_VERBOSE
OF_LOG_NOTICE = _openframeworks.OF_LOG_NOTICE
OF_LOG_WARNING = _openframeworks.OF_LOG_WARNING
OF_LOG_ERROR = _openframeworks.OF_LOG_ERROR
OF_LOG_FATAL_ERROR = _openframeworks.OF_LOG_FATAL_ERROR
OF_LOG_SILENT = _openframeworks.OF_LOG_SILENT
OF_CONSOLE_COLOR_RESTORE = _openframeworks.OF_CONSOLE_COLOR_RESTORE
OF_CONSOLE_COLOR_BLACK = _openframeworks.OF_CONSOLE_COLOR_BLACK
OF_CONSOLE_COLOR_RED = _openframeworks.OF_CONSOLE_COLOR_RED
OF_CONSOLE_COLOR_GREEN = _openframeworks.OF_CONSOLE_COLOR_GREEN
OF_CONSOLE_COLOR_YELLOW = _openframeworks.OF_CONSOLE_COLOR_YELLOW
OF_CONSOLE_COLOR_BLUE = _openframeworks.OF_CONSOLE_COLOR_BLUE
OF_CONSOLE_COLOR_PURPLE = _openframeworks.OF_CONSOLE_COLOR_PURPLE
OF_CONSOLE_COLOR_CYAN = _openframeworks.OF_CONSOLE_COLOR_CYAN
OF_CONSOLE_COLOR_WHITE = _openframeworks.OF_CONSOLE_COLOR_WHITE

def ofSetLogLevel(*args):
    return _openframeworks.ofSetLogLevel(*args)
ofSetLogLevel = _openframeworks.ofSetLogLevel

def ofGetLogLevel(*args):
    return _openframeworks.ofGetLogLevel(*args)
ofGetLogLevel = _openframeworks.ofGetLogLevel

def ofGetLogLevelName(level, pad=False):
    return _openframeworks.ofGetLogLevelName(level, pad)
ofGetLogLevelName = _openframeworks.ofGetLogLevelName

def ofLogToFile(path, append=False):
    return _openframeworks.ofLogToFile(path, append)
ofLogToFile = _openframeworks.ofLogToFile

def ofLogToConsole():
    return _openframeworks.ofLogToConsole()
ofLogToConsole = _openframeworks.ofLogToConsole

def ofGetLoggerChannel():
    return _openframeworks.ofGetLoggerChannel()
ofGetLoggerChannel = _openframeworks.ofGetLoggerChannel
class ofFileDialogResult(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        this = _openframeworks.new_ofFileDialogResult()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getName(self):
        return _openframeworks.ofFileDialogResult_getName(self)

    def getPath(self):
        return _openframeworks.ofFileDialogResult_getPath(self)
    filePath = _swig_property(_openframeworks.ofFileDialogResult_filePath_get, _openframeworks.ofFileDialogResult_filePath_set)
    fileName = _swig_property(_openframeworks.ofFileDialogResult_fileName_get, _openframeworks.ofFileDialogResult_fileName_set)
    bSuccess = _swig_property(_openframeworks.ofFileDialogResult_bSuccess_get, _openframeworks.ofFileDialogResult_bSuccess_set)
    __swig_destroy__ = _openframeworks.delete_ofFileDialogResult
    __del__ = lambda self: None
ofFileDialogResult_swigregister = _openframeworks.ofFileDialogResult_swigregister
ofFileDialogResult_swigregister(ofFileDialogResult)


def ofSystemAlertDialog(errorMessage):
    return _openframeworks.ofSystemAlertDialog(errorMessage)
ofSystemAlertDialog = _openframeworks.ofSystemAlertDialog

def ofSystemLoadDialog(*args):
    return _openframeworks.ofSystemLoadDialog(*args)
ofSystemLoadDialog = _openframeworks.ofSystemLoadDialog

def ofSystemSaveDialog(defaultName, messageName):
    return _openframeworks.ofSystemSaveDialog(defaultName, messageName)
ofSystemSaveDialog = _openframeworks.ofSystemSaveDialog

def ofSystemTextBoxDialog(*args):
    return _openframeworks.ofSystemTextBoxDialog(*args)
ofSystemTextBoxDialog = _openframeworks.ofSystemTextBoxDialog
class ofHttpRequest(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openframeworks.new_ofHttpRequest(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    url = _swig_property(_openframeworks.ofHttpRequest_url_get, _openframeworks.ofHttpRequest_url_set)
    name = _swig_property(_openframeworks.ofHttpRequest_name_get, _openframeworks.ofHttpRequest_name_set)
    saveTo = _swig_property(_openframeworks.ofHttpRequest_saveTo_get, _openframeworks.ofHttpRequest_saveTo_set)
    headers = _swig_property(_openframeworks.ofHttpRequest_headers_get, _openframeworks.ofHttpRequest_headers_set)
    body = _swig_property(_openframeworks.ofHttpRequest_body_get, _openframeworks.ofHttpRequest_body_set)
    contentType = _swig_property(_openframeworks.ofHttpRequest_contentType_get, _openframeworks.ofHttpRequest_contentType_set)
    done = _swig_property(_openframeworks.ofHttpRequest_done_get, _openframeworks.ofHttpRequest_done_set)
    timeoutSeconds = _swig_property(_openframeworks.ofHttpRequest_timeoutSeconds_get, _openframeworks.ofHttpRequest_timeoutSeconds_set)

    def getId(self):
        return _openframeworks.ofHttpRequest_getId(self)
    GET = _openframeworks.ofHttpRequest_GET
    POST = _openframeworks.ofHttpRequest_POST
    method = _swig_property(_openframeworks.ofHttpRequest_method_get, _openframeworks.ofHttpRequest_method_set)
    __swig_destroy__ = _openframeworks.delete_ofHttpRequest
    __del__ = lambda self: None
ofHttpRequest_swigregister = _openframeworks.ofHttpRequest_swigregister
ofHttpRequest_swigregister(ofHttpRequest)

class ofHttpResponse(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _openframeworks.new_ofHttpResponse(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    request = _swig_property(_openframeworks.ofHttpResponse_request_get, _openframeworks.ofHttpResponse_request_set)
    data = _swig_property(_openframeworks.ofHttpResponse_data_get, _openframeworks.ofHttpResponse_data_set)
    status = _swig_property(_openframeworks.ofHttpResponse_status_get, _openframeworks.ofHttpResponse_status_set)
    error = _swig_property(_openframeworks.ofHttpResponse_error_get, _openframeworks.ofHttpResponse_error_set)
    __swig_destroy__ = _openframeworks.delete_ofHttpResponse
    __del__ = lambda self: None
ofHttpResponse_swigregister = _openframeworks.ofHttpResponse_swigregister
ofHttpResponse_swigregister(ofHttpResponse)


def ofLoadURL(url):
    return _openframeworks.ofLoadURL(url)
ofLoadURL = _openframeworks.ofLoadURL

def ofLoadURLAsync(*args):
    return _openframeworks.ofLoadURLAsync(*args)
ofLoadURLAsync = _openframeworks.ofLoadURLAsync

def ofSaveURLTo(url, path):
    return _openframeworks.ofSaveURLTo(url, path)
ofSaveURLTo = _openframeworks.ofSaveURLTo

def ofSaveURLAsync(url, path):
    return _openframeworks.ofSaveURLAsync(url, path)
ofSaveURLAsync = _openframeworks.ofSaveURLAsync

def ofRemoveURLRequest(id):
    return _openframeworks.ofRemoveURLRequest(id)
ofRemoveURLRequest = _openframeworks.ofRemoveURLRequest

def ofRemoveAllURLRequests():
    return _openframeworks.ofRemoveAllURLRequests()
ofRemoveAllURLRequests = _openframeworks.ofRemoveAllURLRequests

def ofStopURLLoader():
    return _openframeworks.ofStopURLLoader()
ofStopURLLoader = _openframeworks.ofStopURLLoader
class ofURLFileLoader(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        this = _openframeworks.new_ofURLFileLoader()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self, url):
        return _openframeworks.ofURLFileLoader_get(self, url)

    def getAsync(self, *args):
        return _openframeworks.ofURLFileLoader_getAsync(self, *args)

    def saveTo(self, url, path):
        return _openframeworks.ofURLFileLoader_saveTo(self, url, path)

    def saveAsync(self, url, path):
        return _openframeworks.ofURLFileLoader_saveAsync(self, url, path)

    def remove(self, id):
        return _openframeworks.ofURLFileLoader_remove(self, id)

    def clear(self):
        return _openframeworks.ofURLFileLoader_clear(self)

    def stop(self):
        return _openframeworks.ofURLFileLoader_stop(self)

    def handleRequest(self, request):
        return _openframeworks.ofURLFileLoader_handleRequest(self, request)

    def handleRequestAsync(self, request):
        return _openframeworks.ofURLFileLoader_handleRequestAsync(self, request)
    __swig_destroy__ = _openframeworks.delete_ofURLFileLoader
    __del__ = lambda self: None
ofURLFileLoader_swigregister = _openframeworks.ofURLFileLoader_swigregister
ofURLFileLoader_swigregister(ofURLFileLoader)

class ofVideoGrabber(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        this = _openframeworks.new_ofVideoGrabber()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _openframeworks.delete_ofVideoGrabber
    __del__ = lambda self: None

    def listDevices(self):
        return _openframeworks.ofVideoGrabber_listDevices(self)

    def isFrameNew(self):
        return _openframeworks.ofVideoGrabber_isFrameNew(self)

    def update(self):
        return _openframeworks.ofVideoGrabber_update(self)

    def close(self):
        return _openframeworks.ofVideoGrabber_close(self)

    def setup(self, *args):
        return _openframeworks.ofVideoGrabber_setup(self, *args)

    def setPixelFormat(self, pixelFormat):
        return _openframeworks.ofVideoGrabber_setPixelFormat(self, pixelFormat)

    def getPixelFormat(self):
        return _openframeworks.ofVideoGrabber_getPixelFormat(self)

    def videoSettings(self):
        return _openframeworks.ofVideoGrabber_videoSettings(self)

    def getPixels(self, *args):
        return _openframeworks.ofVideoGrabber_getPixels(self, *args)

    def getTexture(self, *args):
        return _openframeworks.ofVideoGrabber_getTexture(self, *args)

    def getTexturePlanes(self, *args):
        return _openframeworks.ofVideoGrabber_getTexturePlanes(self, *args)

    def setVerbose(self, bTalkToMe):
        return _openframeworks.ofVideoGrabber_setVerbose(self, bTalkToMe)

    def setDeviceID(self, _deviceID):
        return _openframeworks.ofVideoGrabber_setDeviceID(self, _deviceID)

    def setDesiredFrameRate(self, framerate):
        return _openframeworks.ofVideoGrabber_setDesiredFrameRate(self, framerate)

    def setUseTexture(self, bUse):
        return _openframeworks.ofVideoGrabber_setUseTexture(self, bUse)

    def isUsingTexture(self):
        return _openframeworks.ofVideoGrabber_isUsingTexture(self)

    def draw(self, *args):
        return _openframeworks.ofVideoGrabber_draw(self, *args)

    def bind(self):
        return _openframeworks.ofVideoGrabber_bind(self)

    def unbind(self):
        return _openframeworks.ofVideoGrabber_unbind(self)

    def setAnchorPercent(self, xPct, yPct):
        return _openframeworks.ofVideoGrabber_setAnchorPercent(self, xPct, yPct)

    def setAnchorPoint(self, x, y):
        return _openframeworks.ofVideoGrabber_setAnchorPoint(self, x, y)

    def resetAnchor(self):
        return _openframeworks.ofVideoGrabber_resetAnchor(self)

    def getHeight(self):
        return _openframeworks.ofVideoGrabber_getHeight(self)

    def getWidth(self):
        return _openframeworks.ofVideoGrabber_getWidth(self)

    def isInitialized(self):
        return _openframeworks.ofVideoGrabber_isInitialized(self)

    def setGrabber(self, newGrabber):
        return _openframeworks.ofVideoGrabber_setGrabber(self, newGrabber)
ofVideoGrabber_swigregister = _openframeworks.ofVideoGrabber_swigregister
ofVideoGrabber_swigregister(ofVideoGrabber)

class ofVideoPlayer(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        this = _openframeworks.new_ofVideoPlayer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def load(self, name):
        return _openframeworks.ofVideoPlayer_load(self, name)

    def loadAsync(self, name):
        return _openframeworks.ofVideoPlayer_loadAsync(self, name)

    def getMoviePath(self):
        return _openframeworks.ofVideoPlayer_getMoviePath(self)

    def setPixelFormat(self, pixelFormat):
        return _openframeworks.ofVideoPlayer_setPixelFormat(self, pixelFormat)

    def getPixelFormat(self):
        return _openframeworks.ofVideoPlayer_getPixelFormat(self)

    def closeMovie(self):
        return _openframeworks.ofVideoPlayer_closeMovie(self)

    def close(self):
        return _openframeworks.ofVideoPlayer_close(self)

    def update(self):
        return _openframeworks.ofVideoPlayer_update(self)

    def play(self):
        return _openframeworks.ofVideoPlayer_play(self)

    def stop(self):
        return _openframeworks.ofVideoPlayer_stop(self)

    def isFrameNew(self):
        return _openframeworks.ofVideoPlayer_isFrameNew(self)

    def getPixels(self, *args):
        return _openframeworks.ofVideoPlayer_getPixels(self, *args)

    def getPosition(self):
        return _openframeworks.ofVideoPlayer_getPosition(self)

    def getSpeed(self):
        return _openframeworks.ofVideoPlayer_getSpeed(self)

    def getDuration(self):
        return _openframeworks.ofVideoPlayer_getDuration(self)

    def getIsMovieDone(self):
        return _openframeworks.ofVideoPlayer_getIsMovieDone(self)

    def setPosition(self, pct):
        return _openframeworks.ofVideoPlayer_setPosition(self, pct)

    def setVolume(self, volume):
        return _openframeworks.ofVideoPlayer_setVolume(self, volume)

    def setLoopState(self, state):
        return _openframeworks.ofVideoPlayer_setLoopState(self, state)

    def getLoopState(self):
        return _openframeworks.ofVideoPlayer_getLoopState(self)

    def setSpeed(self, speed):
        return _openframeworks.ofVideoPlayer_setSpeed(self, speed)

    def setFrame(self, frame):
        return _openframeworks.ofVideoPlayer_setFrame(self, frame)

    def setUseTexture(self, bUse):
        return _openframeworks.ofVideoPlayer_setUseTexture(self, bUse)

    def isUsingTexture(self):
        return _openframeworks.ofVideoPlayer_isUsingTexture(self)

    def getTexture(self, *args):
        return _openframeworks.ofVideoPlayer_getTexture(self, *args)

    def getTexturePlanes(self, *args):
        return _openframeworks.ofVideoPlayer_getTexturePlanes(self, *args)

    def draw(self, *args):
        return _openframeworks.ofVideoPlayer_draw(self, *args)

    def bind(self):
        return _openframeworks.ofVideoPlayer_bind(self)

    def unbind(self):
        return _openframeworks.ofVideoPlayer_unbind(self)

    def setAnchorPercent(self, xPct, yPct):
        return _openframeworks.ofVideoPlayer_setAnchorPercent(self, xPct, yPct)

    def setAnchorPoint(self, x, y):
        return _openframeworks.ofVideoPlayer_setAnchorPoint(self, x, y)

    def resetAnchor(self):
        return _openframeworks.ofVideoPlayer_resetAnchor(self)

    def setPaused(self, bPause):
        return _openframeworks.ofVideoPlayer_setPaused(self, bPause)

    def getCurrentFrame(self):
        return _openframeworks.ofVideoPlayer_getCurrentFrame(self)

    def getTotalNumFrames(self):
        return _openframeworks.ofVideoPlayer_getTotalNumFrames(self)

    def firstFrame(self):
        return _openframeworks.ofVideoPlayer_firstFrame(self)

    def nextFrame(self):
        return _openframeworks.ofVideoPlayer_nextFrame(self)

    def previousFrame(self):
        return _openframeworks.ofVideoPlayer_previousFrame(self)

    def getHeight(self):
        return _openframeworks.ofVideoPlayer_getHeight(self)

    def getWidth(self):
        return _openframeworks.ofVideoPlayer_getWidth(self)

    def isPaused(self):
        return _openframeworks.ofVideoPlayer_isPaused(self)

    def isLoaded(self):
        return _openframeworks.ofVideoPlayer_isLoaded(self)

    def isPlaying(self):
        return _openframeworks.ofVideoPlayer_isPlaying(self)

    def isInitialized(self):
        return _openframeworks.ofVideoPlayer_isInitialized(self)

    def setPlayer(self, newPlayer):
        return _openframeworks.ofVideoPlayer_setPlayer(self, newPlayer)
    __swig_destroy__ = _openframeworks.delete_ofVideoPlayer
    __del__ = lambda self: None
ofVideoPlayer_swigregister = _openframeworks.ofVideoPlayer_swigregister
ofVideoPlayer_swigregister(ofVideoPlayer)



