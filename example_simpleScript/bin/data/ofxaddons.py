# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ofxaddons')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ofxaddons')
    _ofxaddons = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ofxaddons', [dirname(__file__)])
        except ImportError:
            import _ofxaddons
            return _ofxaddons
        try:
            _mod = imp.load_module('_ofxaddons', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _ofxaddons = swig_import_helper()
    del swig_import_helper
else:
    import _ofxaddons
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ofxaddons.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _ofxaddons.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _ofxaddons.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _ofxaddons.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _ofxaddons.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _ofxaddons.SwigPyIterator_equal(self, x)

    def copy(self):
        return _ofxaddons.SwigPyIterator_copy(self)

    def next(self):
        return _ofxaddons.SwigPyIterator_next(self)

    def __next__(self):
        return _ofxaddons.SwigPyIterator___next__(self)

    def previous(self):
        return _ofxaddons.SwigPyIterator_previous(self)

    def advance(self, n):
        return _ofxaddons.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _ofxaddons.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _ofxaddons.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _ofxaddons.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _ofxaddons.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _ofxaddons.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _ofxaddons.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _ofxaddons.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class ofxAssimpMeshHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        this = _ofxaddons.new_ofxAssimpMeshHelper()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def hasTexture(self):
        return _ofxaddons.ofxAssimpMeshHelper_hasTexture(self)

    def getTextureRef(self):
        return _ofxaddons.ofxAssimpMeshHelper_getTextureRef(self)
    mesh = _swig_property(_ofxaddons.ofxAssimpMeshHelper_mesh_get, _ofxaddons.ofxAssimpMeshHelper_mesh_set)
    vbo = _swig_property(_ofxaddons.ofxAssimpMeshHelper_vbo_get, _ofxaddons.ofxAssimpMeshHelper_vbo_set)
    assimpTexture = _swig_property(_ofxaddons.ofxAssimpMeshHelper_assimpTexture_get, _ofxaddons.ofxAssimpMeshHelper_assimpTexture_set)
    indices = _swig_property(_ofxaddons.ofxAssimpMeshHelper_indices_get, _ofxaddons.ofxAssimpMeshHelper_indices_set)
    material = _swig_property(_ofxaddons.ofxAssimpMeshHelper_material_get, _ofxaddons.ofxAssimpMeshHelper_material_set)
    blendMode = _swig_property(_ofxaddons.ofxAssimpMeshHelper_blendMode_get, _ofxaddons.ofxAssimpMeshHelper_blendMode_set)
    twoSided = _swig_property(_ofxaddons.ofxAssimpMeshHelper_twoSided_get, _ofxaddons.ofxAssimpMeshHelper_twoSided_set)
    hasChanged = _swig_property(_ofxaddons.ofxAssimpMeshHelper_hasChanged_get, _ofxaddons.ofxAssimpMeshHelper_hasChanged_set)
    animatedPos = _swig_property(_ofxaddons.ofxAssimpMeshHelper_animatedPos_get, _ofxaddons.ofxAssimpMeshHelper_animatedPos_set)
    animatedNorm = _swig_property(_ofxaddons.ofxAssimpMeshHelper_animatedNorm_get, _ofxaddons.ofxAssimpMeshHelper_animatedNorm_set)
    cachedMesh = _swig_property(_ofxaddons.ofxAssimpMeshHelper_cachedMesh_get, _ofxaddons.ofxAssimpMeshHelper_cachedMesh_set)
    validCache = _swig_property(_ofxaddons.ofxAssimpMeshHelper_validCache_get, _ofxaddons.ofxAssimpMeshHelper_validCache_set)
    matrix = _swig_property(_ofxaddons.ofxAssimpMeshHelper_matrix_get, _ofxaddons.ofxAssimpMeshHelper_matrix_set)
    __swig_destroy__ = _ofxaddons.delete_ofxAssimpMeshHelper
    __del__ = lambda self: None
ofxAssimpMeshHelper_swigregister = _ofxaddons.ofxAssimpMeshHelper_swigregister
ofxAssimpMeshHelper_swigregister(ofxAssimpMeshHelper)

class ofxAssimpAnimation(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, scene, animation):
        this = _ofxaddons.new_ofxAssimpAnimation(scene, animation)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ofxaddons.delete_ofxAssimpAnimation
    __del__ = lambda self: None

    def getAnimation(self):
        return _ofxaddons.ofxAssimpAnimation_getAnimation(self)

    def update(self):
        return _ofxaddons.ofxAssimpAnimation_update(self)

    def play(self):
        return _ofxaddons.ofxAssimpAnimation_play(self)

    def stop(self):
        return _ofxaddons.ofxAssimpAnimation_stop(self)

    def reset(self):
        return _ofxaddons.ofxAssimpAnimation_reset(self)

    def isFrameNew(self):
        return _ofxaddons.ofxAssimpAnimation_isFrameNew(self)

    def isPaused(self):
        return _ofxaddons.ofxAssimpAnimation_isPaused(self)

    def isPlaying(self):
        return _ofxaddons.ofxAssimpAnimation_isPlaying(self)

    def isFinished(self):
        return _ofxaddons.ofxAssimpAnimation_isFinished(self)

    def getPosition(self):
        return _ofxaddons.ofxAssimpAnimation_getPosition(self)

    def getPositionInSeconds(self):
        return _ofxaddons.ofxAssimpAnimation_getPositionInSeconds(self)

    def getPositionInMilliSeconds(self):
        return _ofxaddons.ofxAssimpAnimation_getPositionInMilliSeconds(self)

    def getSpeed(self):
        return _ofxaddons.ofxAssimpAnimation_getSpeed(self)

    def getDurationInSeconds(self):
        return _ofxaddons.ofxAssimpAnimation_getDurationInSeconds(self)

    def getDurationInMilliSeconds(self):
        return _ofxaddons.ofxAssimpAnimation_getDurationInMilliSeconds(self)

    def setPaused(self, paused):
        return _ofxaddons.ofxAssimpAnimation_setPaused(self, paused)

    def setPosition(self, position):
        return _ofxaddons.ofxAssimpAnimation_setPosition(self, position)

    def setLoopState(self, state):
        return _ofxaddons.ofxAssimpAnimation_setLoopState(self, state)

    def setSpeed(self, speed):
        return _ofxaddons.ofxAssimpAnimation_setSpeed(self, speed)
ofxAssimpAnimation_swigregister = _ofxaddons.ofxAssimpAnimation_swigregister
ofxAssimpAnimation_swigregister(ofxAssimpAnimation)

class ofxAssimpTexture(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _ofxaddons.new_ofxAssimpTexture(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getTextureRef(self):
        return _ofxaddons.ofxAssimpTexture_getTextureRef(self)

    def getTexturePath(self):
        return _ofxaddons.ofxAssimpTexture_getTexturePath(self)

    def hasTexture(self):
        return _ofxaddons.ofxAssimpTexture_hasTexture(self)
    __swig_destroy__ = _ofxaddons.delete_ofxAssimpTexture
    __del__ = lambda self: None
ofxAssimpTexture_swigregister = _ofxaddons.ofxAssimpTexture_swigregister
ofxAssimpTexture_swigregister(ofxAssimpTexture)

class ofxToggle(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _ofxaddons.delete_ofxToggle
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _ofxaddons.new_ofxToggle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setup(self, *args):
        return _ofxaddons.ofxToggle_setup(self, *args)

    def mouseMoved(self, args):
        return _ofxaddons.ofxToggle_mouseMoved(self, args)

    def mousePressed(self, args):
        return _ofxaddons.ofxToggle_mousePressed(self, args)

    def mouseDragged(self, args):
        return _ofxaddons.ofxToggle_mouseDragged(self, args)

    def mouseReleased(self, args):
        return _ofxaddons.ofxToggle_mouseReleased(self, args)

    def mouseScrolled(self, args):
        return _ofxaddons.ofxToggle_mouseScrolled(self, args)

    def getParameter(self):
        return _ofxaddons.ofxToggle_getParameter(self)
ofxToggle_swigregister = _ofxaddons.ofxToggle_swigregister
ofxToggle_swigregister(ofxToggle)

class ofxButton(ofxToggle):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _ofxaddons.new_ofxButton(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ofxaddons.delete_ofxButton
    __del__ = lambda self: None

    def setup(self, *args):
        return _ofxaddons.ofxButton_setup(self, *args)
ofxButton_swigregister = _ofxaddons.ofxButton_swigregister
ofxButton_swigregister(ofxButton)

class ofxLabel(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _ofxaddons.new_ofxLabel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ofxaddons.delete_ofxLabel
    __del__ = lambda self: None

    def setup(self, *args):
        return _ofxaddons.ofxLabel_setup(self, *args)

    def mouseMoved(self, args):
        return _ofxaddons.ofxLabel_mouseMoved(self, args)

    def mousePressed(self, args):
        return _ofxaddons.ofxLabel_mousePressed(self, args)

    def mouseDragged(self, args):
        return _ofxaddons.ofxLabel_mouseDragged(self, args)

    def mouseReleased(self, args):
        return _ofxaddons.ofxLabel_mouseReleased(self, args)

    def mouseScrolled(self, args):
        return _ofxaddons.ofxLabel_mouseScrolled(self, args)

    def getParameter(self):
        return _ofxaddons.ofxLabel_getParameter(self)
ofxLabel_swigregister = _ofxaddons.ofxLabel_swigregister
ofxLabel_swigregister(ofxLabel)

class ofxPanel(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _ofxaddons.new_ofxPanel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ofxaddons.delete_ofxPanel
    __del__ = lambda self: None

    def setup(self, *args):
        return _ofxaddons.ofxPanel_setup(self, *args)

    def mouseReleased(self, args):
        return _ofxaddons.ofxPanel_mouseReleased(self, args)
    loadPressedE = _swig_property(_ofxaddons.ofxPanel_loadPressedE_get, _ofxaddons.ofxPanel_loadPressedE_set)
    savePressedE = _swig_property(_ofxaddons.ofxPanel_savePressedE_get, _ofxaddons.ofxPanel_savePressedE_set)
ofxPanel_swigregister = _ofxaddons.ofxPanel_swigregister
ofxPanel_swigregister(ofxPanel)
cvar = _ofxaddons.cvar
ofxPanelDefaultFilename = cvar.ofxPanelDefaultFilename

TCP_MAX_MSG_SIZE = _ofxaddons.TCP_MAX_MSG_SIZE
class ofxTCPClient(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        this = _ofxaddons.new_ofxTCPClient()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ofxaddons.delete_ofxTCPClient
    __del__ = lambda self: None

    def setVerbose(self, _verbose):
        return _ofxaddons.ofxTCPClient_setVerbose(self, _verbose)

    def setup(self, *args):
        return _ofxaddons.ofxTCPClient_setup(self, *args)

    def setMessageDelimiter(self, delim):
        return _ofxaddons.ofxTCPClient_setMessageDelimiter(self, delim)

    def close(self):
        return _ofxaddons.ofxTCPClient_close(self)

    def send(self, message):
        return _ofxaddons.ofxTCPClient_send(self, message)

    def sendRaw(self, message):
        return _ofxaddons.ofxTCPClient_sendRaw(self, message)

    def sendRawMsg(self, msg, size):
        return _ofxaddons.ofxTCPClient_sendRawMsg(self, msg, size)

    def getNumReceivedBytes(self):
        return _ofxaddons.ofxTCPClient_getNumReceivedBytes(self)

    def sendRawBytes(self, rawBytes, numBytes):
        return _ofxaddons.ofxTCPClient_sendRawBytes(self, rawBytes, numBytes)

    def receive(self):
        return _ofxaddons.ofxTCPClient_receive(self)

    def receiveRaw(self):
        return _ofxaddons.ofxTCPClient_receiveRaw(self)

    def receiveRawBytes(self, receiveBytes, numBytes):
        return _ofxaddons.ofxTCPClient_receiveRawBytes(self, receiveBytes, numBytes)

    def peekReceiveRawBytes(self, receiveBytes, numBytes):
        return _ofxaddons.ofxTCPClient_peekReceiveRawBytes(self, receiveBytes, numBytes)

    def receiveRawMsg(self, receiveBuffer, numBytes):
        return _ofxaddons.ofxTCPClient_receiveRawMsg(self, receiveBuffer, numBytes)

    def isConnected(self):
        return _ofxaddons.ofxTCPClient_isConnected(self)

    def getPort(self):
        return _ofxaddons.ofxTCPClient_getPort(self)

    def getIP(self):
        return _ofxaddons.ofxTCPClient_getIP(self)
ofxTCPClient_swigregister = _ofxaddons.ofxTCPClient_swigregister
ofxTCPClient_swigregister(ofxTCPClient)

INVALID_SOCKET = _ofxaddons.INVALID_SOCKET
SOCKET_ERROR = _ofxaddons.SOCKET_ERROR
SOCKET_TIMEOUT = _ofxaddons.SOCKET_TIMEOUT
NO_TIMEOUT = _ofxaddons.NO_TIMEOUT
OF_TCP_DEFAULT_TIMEOUT = _ofxaddons.OF_TCP_DEFAULT_TIMEOUT
class ofxTCPManager(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        this = _ofxaddons.new_ofxTCPManager()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ofxaddons.delete_ofxTCPManager
    __del__ = lambda self: None

    def Close(self):
        return _ofxaddons.ofxTCPManager_Close(self)

    def Create(self):
        return _ofxaddons.ofxTCPManager_Create(self)

    def Listen(self, iMaxConnections):
        return _ofxaddons.ofxTCPManager_Listen(self, iMaxConnections)

    def Connect(self, pAddrStr, usPort):
        return _ofxaddons.ofxTCPManager_Connect(self, pAddrStr, usPort)

    def Bind(self, usPort):
        return _ofxaddons.ofxTCPManager_Bind(self, usPort)

    def Accept(self, sock):
        return _ofxaddons.ofxTCPManager_Accept(self, sock)

    def Send(self, pBuff, iSize):
        return _ofxaddons.ofxTCPManager_Send(self, pBuff, iSize)

    def SendAll(self, pBuff, iSize):
        return _ofxaddons.ofxTCPManager_SendAll(self, pBuff, iSize)

    def PeekReceive(self, pBuff, iSize):
        return _ofxaddons.ofxTCPManager_PeekReceive(self, pBuff, iSize)

    def Receive(self, pBuff, iSize):
        return _ofxaddons.ofxTCPManager_Receive(self, pBuff, iSize)

    def ReceiveAll(self, pBuff, iSize):
        return _ofxaddons.ofxTCPManager_ReceiveAll(self, pBuff, iSize)

    def Write(self, pBuff, iSize):
        return _ofxaddons.ofxTCPManager_Write(self, pBuff, iSize)

    def GetRemoteAddr(self, pIntAddr):
        return _ofxaddons.ofxTCPManager_GetRemoteAddr(self, pIntAddr)

    def GetInetAddr(self, pInetAddr):
        return _ofxaddons.ofxTCPManager_GetInetAddr(self, pInetAddr)

    def SetTimeoutConnect(self, timeoutInSeconds):
        return _ofxaddons.ofxTCPManager_SetTimeoutConnect(self, timeoutInSeconds)

    def SetTimeoutSend(self, timeoutInSeconds):
        return _ofxaddons.ofxTCPManager_SetTimeoutSend(self, timeoutInSeconds)

    def SetTimeoutReceive(self, timeoutInSeconds):
        return _ofxaddons.ofxTCPManager_SetTimeoutReceive(self, timeoutInSeconds)

    def SetTimeoutAccept(self, timeoutInSeconds):
        return _ofxaddons.ofxTCPManager_SetTimeoutAccept(self, timeoutInSeconds)

    def GetTimeoutConnect(self):
        return _ofxaddons.ofxTCPManager_GetTimeoutConnect(self)

    def GetTimeoutSend(self):
        return _ofxaddons.ofxTCPManager_GetTimeoutSend(self)

    def GetTimeoutReceive(self):
        return _ofxaddons.ofxTCPManager_GetTimeoutReceive(self)

    def GetTimeoutAccept(self):
        return _ofxaddons.ofxTCPManager_GetTimeoutAccept(self)

    def SetReceiveBufferSize(self, sizeInByte):
        return _ofxaddons.ofxTCPManager_SetReceiveBufferSize(self, sizeInByte)

    def SetSendBufferSize(self, sizeInByte):
        return _ofxaddons.ofxTCPManager_SetSendBufferSize(self, sizeInByte)

    def GetReceiveBufferSize(self):
        return _ofxaddons.ofxTCPManager_GetReceiveBufferSize(self)

    def GetSendBufferSize(self):
        return _ofxaddons.ofxTCPManager_GetSendBufferSize(self)

    def GetMaxConnections(self):
        return _ofxaddons.ofxTCPManager_GetMaxConnections(self)

    def SetNonBlocking(self, useNonBlocking):
        return _ofxaddons.ofxTCPManager_SetNonBlocking(self, useNonBlocking)

    def IsNonBlocking(self):
        return _ofxaddons.ofxTCPManager_IsNonBlocking(self)

    def CheckHost(self, pAddrStr):
        return _ofxaddons.ofxTCPManager_CheckHost(self, pAddrStr)

    def CleanUp(self):
        return _ofxaddons.ofxTCPManager_CleanUp(self)

    def CheckIsConnected(self):
        return _ofxaddons.ofxTCPManager_CheckIsConnected(self)
ofxTCPManager_swigregister = _ofxaddons.ofxTCPManager_swigregister
ofxTCPManager_swigregister(ofxTCPManager)

TCP_MAX_CLIENTS = _ofxaddons.TCP_MAX_CLIENTS
class ofxTCPServer(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        this = _ofxaddons.new_ofxTCPServer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ofxaddons.delete_ofxTCPServer
    __del__ = lambda self: None

    def setVerbose(self, _verbose):
        return _ofxaddons.ofxTCPServer_setVerbose(self, _verbose)

    def setup(self, *args):
        return _ofxaddons.ofxTCPServer_setup(self, *args)

    def setMessageDelimiter(self, delim):
        return _ofxaddons.ofxTCPServer_setMessageDelimiter(self, delim)

    def close(self):
        return _ofxaddons.ofxTCPServer_close(self)

    def disconnectClient(self, clientID):
        return _ofxaddons.ofxTCPServer_disconnectClient(self, clientID)

    def disconnectAllClients(self):
        return _ofxaddons.ofxTCPServer_disconnectAllClients(self)

    def getNumClients(self):
        return _ofxaddons.ofxTCPServer_getNumClients(self)

    def getLastID(self):
        return _ofxaddons.ofxTCPServer_getLastID(self)

    def getPort(self):
        return _ofxaddons.ofxTCPServer_getPort(self)

    def isConnected(self):
        return _ofxaddons.ofxTCPServer_isConnected(self)

    def getClientPort(self, clientID):
        return _ofxaddons.ofxTCPServer_getClientPort(self, clientID)

    def getClientIP(self, clientID):
        return _ofxaddons.ofxTCPServer_getClientIP(self, clientID)

    def isClientConnected(self, clientID):
        return _ofxaddons.ofxTCPServer_isClientConnected(self, clientID)

    def send(self, clientID, message):
        return _ofxaddons.ofxTCPServer_send(self, clientID, message)

    def sendToAll(self, message):
        return _ofxaddons.ofxTCPServer_sendToAll(self, message)

    def sendRawMsg(self, clientID, rawMsg, numBytes):
        return _ofxaddons.ofxTCPServer_sendRawMsg(self, clientID, rawMsg, numBytes)

    def sendRawMsgToAll(self, rawMsg, numBytes):
        return _ofxaddons.ofxTCPServer_sendRawMsgToAll(self, rawMsg, numBytes)

    def sendRawBytes(self, clientID, rawBytes, numBytes):
        return _ofxaddons.ofxTCPServer_sendRawBytes(self, clientID, rawBytes, numBytes)

    def sendRawBytesToAll(self, rawBytes, numBytes):
        return _ofxaddons.ofxTCPServer_sendRawBytesToAll(self, rawBytes, numBytes)

    def getNumReceivedBytes(self, clientID):
        return _ofxaddons.ofxTCPServer_getNumReceivedBytes(self, clientID)

    def receive(self, clientID):
        return _ofxaddons.ofxTCPServer_receive(self, clientID)

    def receiveRawMsg(self, clientID, receiveBytes, numBytes):
        return _ofxaddons.ofxTCPServer_receiveRawMsg(self, clientID, receiveBytes, numBytes)

    def receiveRawBytes(self, clientID, receiveBytes, numBytes):
        return _ofxaddons.ofxTCPServer_receiveRawBytes(self, clientID, receiveBytes, numBytes)

    def peekReceiveRawBytes(self, clientID, receiveBytes, numBytes):
        return _ofxaddons.ofxTCPServer_peekReceiveRawBytes(self, clientID, receiveBytes, numBytes)

    def waitConnectedClient(self, *args):
        return _ofxaddons.ofxTCPServer_waitConnectedClient(self, *args)
ofxTCPServer_swigregister = _ofxaddons.ofxTCPServer_swigregister
ofxTCPServer_swigregister(ofxTCPServer)

class ofxUDPManager(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        this = _ofxaddons.new_ofxUDPManager()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ofxaddons.delete_ofxUDPManager
    __del__ = lambda self: None

    def HasSocket(self):
        return _ofxaddons.ofxUDPManager_HasSocket(self)

    def Close(self):
        return _ofxaddons.ofxUDPManager_Close(self)

    def Setup(self, settings):
        return _ofxaddons.ofxUDPManager_Setup(self, settings)

    def Create(self):
        return _ofxaddons.ofxUDPManager_Create(self)

    def Connect(self, pHost, usPort):
        return _ofxaddons.ofxUDPManager_Connect(self, pHost, usPort)

    def ConnectMcast(self, pMcast, usPort):
        return _ofxaddons.ofxUDPManager_ConnectMcast(self, pMcast, usPort)

    def Bind(self, usPort):
        return _ofxaddons.ofxUDPManager_Bind(self, usPort)

    def BindMcast(self, pMcast, usPort):
        return _ofxaddons.ofxUDPManager_BindMcast(self, pMcast, usPort)

    def Send(self, pBuff, iSize):
        return _ofxaddons.ofxUDPManager_Send(self, pBuff, iSize)

    def SendAll(self, pBuff, iSize):
        return _ofxaddons.ofxUDPManager_SendAll(self, pBuff, iSize)

    def PeekReceive(self):
        return _ofxaddons.ofxUDPManager_PeekReceive(self)

    def Receive(self, pBuff, iSize):
        return _ofxaddons.ofxUDPManager_Receive(self, pBuff, iSize)

    def SetTimeoutSend(self, timeoutInSeconds):
        return _ofxaddons.ofxUDPManager_SetTimeoutSend(self, timeoutInSeconds)

    def SetTimeoutReceive(self, timeoutInSeconds):
        return _ofxaddons.ofxUDPManager_SetTimeoutReceive(self, timeoutInSeconds)

    def GetTimeoutSend(self):
        return _ofxaddons.ofxUDPManager_GetTimeoutSend(self)

    def GetTimeoutReceive(self):
        return _ofxaddons.ofxUDPManager_GetTimeoutReceive(self)

    def GetRemoteAddr(self, address, port):
        return _ofxaddons.ofxUDPManager_GetRemoteAddr(self, address, port)

    def GetListenAddr(self, address, port):
        return _ofxaddons.ofxUDPManager_GetListenAddr(self, address, port)

    def SetReceiveBufferSize(self, sizeInByte):
        return _ofxaddons.ofxUDPManager_SetReceiveBufferSize(self, sizeInByte)

    def SetSendBufferSize(self, sizeInByte):
        return _ofxaddons.ofxUDPManager_SetSendBufferSize(self, sizeInByte)

    def GetReceiveBufferSize(self):
        return _ofxaddons.ofxUDPManager_GetReceiveBufferSize(self)

    def GetSendBufferSize(self):
        return _ofxaddons.ofxUDPManager_GetSendBufferSize(self)

    def SetReuseAddress(self, allowReuse):
        return _ofxaddons.ofxUDPManager_SetReuseAddress(self, allowReuse)

    def SetEnableBroadcast(self, enableBroadcast):
        return _ofxaddons.ofxUDPManager_SetEnableBroadcast(self, enableBroadcast)

    def SetNonBlocking(self, useNonBlocking):
        return _ofxaddons.ofxUDPManager_SetNonBlocking(self, useNonBlocking)

    def GetMaxMsgSize(self):
        return _ofxaddons.ofxUDPManager_GetMaxMsgSize(self)

    def GetTTL(self):
        return _ofxaddons.ofxUDPManager_GetTTL(self)

    def SetTTL(self, nTTL):
        return _ofxaddons.ofxUDPManager_SetTTL(self, nTTL)
ofxUDPManager_swigregister = _ofxaddons.ofxUDPManager_swigregister
ofxUDPManager_swigregister(ofxUDPManager)

class ofxCvImage(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    width = _swig_property(_ofxaddons.ofxCvImage_width_get, _ofxaddons.ofxCvImage_width_set)
    height = _swig_property(_ofxaddons.ofxCvImage_height_get, _ofxaddons.ofxCvImage_height_set)
    bAllocated = _swig_property(_ofxaddons.ofxCvImage_bAllocated_get, _ofxaddons.ofxCvImage_bAllocated_set)
    __swig_destroy__ = _ofxaddons.delete_ofxCvImage
    __del__ = lambda self: None

    def allocate(self, w, h):
        return _ofxaddons.ofxCvImage_allocate(self, w, h)

    def clear(self):
        return _ofxaddons.ofxCvImage_clear(self)

    def getWidth(self):
        return _ofxaddons.ofxCvImage_getWidth(self)

    def getHeight(self):
        return _ofxaddons.ofxCvImage_getHeight(self)

    def setUseTexture(self, bUse):
        return _ofxaddons.ofxCvImage_setUseTexture(self, bUse)

    def isUsingTexture(self):
        return _ofxaddons.ofxCvImage_isUsingTexture(self)

    def getTexture(self, *args):
        return _ofxaddons.ofxCvImage_getTexture(self, *args)

    def flagImageChanged(self):
        return _ofxaddons.ofxCvImage_flagImageChanged(self)

    def setROI(self, *args):
        return _ofxaddons.ofxCvImage_setROI(self, *args)

    def getROI(self):
        return _ofxaddons.ofxCvImage_getROI(self)

    def resetROI(self):
        return _ofxaddons.ofxCvImage_resetROI(self)

    def getIntersectionROI(self, rec1, rec2):
        return _ofxaddons.ofxCvImage_getIntersectionROI(self, rec1, rec2)

    def set(self, value):
        return _ofxaddons.ofxCvImage_set(self, value)

    def setFromPixels(self, *args):
        return _ofxaddons.ofxCvImage_setFromPixels(self, *args)

    def setRoiFromPixels(self, *args):
        return _ofxaddons.ofxCvImage_setRoiFromPixels(self, *args)

    def __isub__(self, *args):
        return _ofxaddons.ofxCvImage___isub__(self, *args)

    def __iadd__(self, *args):
        return _ofxaddons.ofxCvImage___iadd__(self, *args)

    def __imul__(self, mom):
        return _ofxaddons.ofxCvImage___imul__(self, mom)

    def drawBlobIntoMe(self, blob, color):
        return _ofxaddons.ofxCvImage_drawBlobIntoMe(self, blob, color)

    def getPixels(self, *args):
        return _ofxaddons.ofxCvImage_getPixels(self, *args)

    def getRoiPixels(self, *args):
        return _ofxaddons.ofxCvImage_getRoiPixels(self, *args)

    def getCvImage(self, *args):
        return _ofxaddons.ofxCvImage_getCvImage(self, *args)

    def updateTexture(self):
        return _ofxaddons.ofxCvImage_updateTexture(self)

    def draw(self, *args):
        return _ofxaddons.ofxCvImage_draw(self, *args)

    def drawROI(self, *args):
        return _ofxaddons.ofxCvImage_drawROI(self, *args)

    def setAnchorPercent(self, xPct, yPct):
        return _ofxaddons.ofxCvImage_setAnchorPercent(self, xPct, yPct)

    def setAnchorPoint(self, x, y):
        return _ofxaddons.ofxCvImage_setAnchorPoint(self, x, y)

    def resetAnchor(self):
        return _ofxaddons.ofxCvImage_resetAnchor(self)

    def erode(self):
        return _ofxaddons.ofxCvImage_erode(self)

    def dilate(self):
        return _ofxaddons.ofxCvImage_dilate(self)

    def blur(self, value=3):
        return _ofxaddons.ofxCvImage_blur(self, value)

    def blurGaussian(self, value=3):
        return _ofxaddons.ofxCvImage_blurGaussian(self, value)

    def invert(self):
        return _ofxaddons.ofxCvImage_invert(self)

    def contrastStretch(self):
        return _ofxaddons.ofxCvImage_contrastStretch(self)

    def convertToRange(self, min, max):
        return _ofxaddons.ofxCvImage_convertToRange(self, min, max)

    def resize(self, w, h):
        return _ofxaddons.ofxCvImage_resize(self, w, h)

    def scaleIntoMe(self, *args):
        return _ofxaddons.ofxCvImage_scaleIntoMe(self, *args)

    def mirror(self, bFlipVertically, bFlipHorizontally):
        return _ofxaddons.ofxCvImage_mirror(self, bFlipVertically, bFlipHorizontally)

    def translate(self, x, y):
        return _ofxaddons.ofxCvImage_translate(self, x, y)

    def rotate(self, angle, centerX, centerY):
        return _ofxaddons.ofxCvImage_rotate(self, angle, centerX, centerY)

    def scale(self, scaleX, sclaeY):
        return _ofxaddons.ofxCvImage_scale(self, scaleX, sclaeY)

    def transform(self, angle, centerX, centerY, scaleX, scaleY, moveX, moveY):
        return _ofxaddons.ofxCvImage_transform(self, angle, centerX, centerY, scaleX, scaleY, moveX, moveY)

    def undistort(self, radialDistX, radialDistY, tangentDistX, tangentDistY, focalX, focalY, centerX, centerY):
        return _ofxaddons.ofxCvImage_undistort(self, radialDistX, radialDistY, tangentDistX, tangentDistY, focalX, focalY, centerX, centerY)

    def remap(self, mapX, mapY):
        return _ofxaddons.ofxCvImage_remap(self, mapX, mapY)

    def warpPerspective(self, A, B, C, D):
        return _ofxaddons.ofxCvImage_warpPerspective(self, A, B, C, D)

    def warpIntoMe(self, mom, src, dst):
        return _ofxaddons.ofxCvImage_warpIntoMe(self, mom, src, dst)

    def countNonZeroInRegion(self, x, y, w, h):
        return _ofxaddons.ofxCvImage_countNonZeroInRegion(self, x, y, w, h)
ofxCvImage_swigregister = _ofxaddons.ofxCvImage_swigregister
ofxCvImage_swigregister(ofxCvImage)

class ofxCvBlob(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    area = _swig_property(_ofxaddons.ofxCvBlob_area_get, _ofxaddons.ofxCvBlob_area_set)
    length = _swig_property(_ofxaddons.ofxCvBlob_length_get, _ofxaddons.ofxCvBlob_length_set)
    boundingRect = _swig_property(_ofxaddons.ofxCvBlob_boundingRect_get, _ofxaddons.ofxCvBlob_boundingRect_set)
    centroid = _swig_property(_ofxaddons.ofxCvBlob_centroid_get, _ofxaddons.ofxCvBlob_centroid_set)
    hole = _swig_property(_ofxaddons.ofxCvBlob_hole_get, _ofxaddons.ofxCvBlob_hole_set)
    pts = _swig_property(_ofxaddons.ofxCvBlob_pts_get, _ofxaddons.ofxCvBlob_pts_set)
    nPts = _swig_property(_ofxaddons.ofxCvBlob_nPts_get, _ofxaddons.ofxCvBlob_nPts_set)

    def __init__(self):
        this = _ofxaddons.new_ofxCvBlob()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def draw(self, x=0, y=0):
        return _ofxaddons.ofxCvBlob_draw(self, x, y)
    __swig_destroy__ = _ofxaddons.delete_ofxCvBlob
    __del__ = lambda self: None
ofxCvBlob_swigregister = _ofxaddons.ofxCvBlob_swigregister
ofxCvBlob_swigregister(ofxCvBlob)

class ofxCvGrayscaleImage(ofxCvImage):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ofxaddons.delete_ofxCvGrayscaleImage
    __del__ = lambda self: None

    def setFromPixels(self, *args):
        return _ofxaddons.ofxCvGrayscaleImage_setFromPixels(self, *args)

    def absDiff(self, *args):
        return _ofxaddons.ofxCvGrayscaleImage_absDiff(self, *args)

    def threshold(self, value, invert=False):
        return _ofxaddons.ofxCvGrayscaleImage_threshold(self, value, invert)

    def adaptiveThreshold(self, blockSize, offset=0, invert=False, gauss=False):
        return _ofxaddons.ofxCvGrayscaleImage_adaptiveThreshold(self, blockSize, offset, invert, gauss)

    def brightnessContrast(self, brightness, contrast):
        return _ofxaddons.ofxCvGrayscaleImage_brightnessContrast(self, brightness, contrast)

    def scaleIntoMe(self, *args):
        return _ofxaddons.ofxCvGrayscaleImage_scaleIntoMe(self, *args)

    def blurHeavily(self):
        return _ofxaddons.ofxCvGrayscaleImage_blurHeavily(self)

    def erode_3x3(self):
        return _ofxaddons.ofxCvGrayscaleImage_erode_3x3(self)

    def dilate_3x3(self):
        return _ofxaddons.ofxCvGrayscaleImage_dilate_3x3(self)

    def setFromColorImage(self, mom):
        return _ofxaddons.ofxCvGrayscaleImage_setFromColorImage(self, mom)

    def setFromFloatImage(self, mom):
        return _ofxaddons.ofxCvGrayscaleImage_setFromFloatImage(self, mom)
ofxCvGrayscaleImage_swigregister = _ofxaddons.ofxCvGrayscaleImage_swigregister
ofxCvGrayscaleImage_swigregister(ofxCvGrayscaleImage)

class ofxCvColorImage(ofxCvImage):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def set(self, *args):
        return _ofxaddons.ofxCvColorImage_set(self, *args)

    def setFromPixels(self, *args):
        return _ofxaddons.ofxCvColorImage_setFromPixels(self, *args)

    def setFromGrayscalePlanarImages(self, red, green, blue):
        return _ofxaddons.ofxCvColorImage_setFromGrayscalePlanarImages(self, red, green, blue)

    def __iadd__(self, *args):
        return _ofxaddons.ofxCvColorImage___iadd__(self, *args)

    def __isub__(self, *args):
        return _ofxaddons.ofxCvColorImage___isub__(self, *args)

    def convertToGrayscalePlanarImages(self, red, green, blue):
        return _ofxaddons.ofxCvColorImage_convertToGrayscalePlanarImages(self, red, green, blue)

    def convertToGrayscalePlanarImage(self, grayImage, whichPlane):
        return _ofxaddons.ofxCvColorImage_convertToGrayscalePlanarImage(self, grayImage, whichPlane)

    def scaleIntoMe(self, *args):
        return _ofxaddons.ofxCvColorImage_scaleIntoMe(self, *args)

    def convertRgbToHsv(self):
        return _ofxaddons.ofxCvColorImage_convertRgbToHsv(self)

    def convertHsvToRgb(self):
        return _ofxaddons.ofxCvColorImage_convertHsvToRgb(self)
    __swig_destroy__ = _ofxaddons.delete_ofxCvColorImage
    __del__ = lambda self: None
ofxCvColorImage_swigregister = _ofxaddons.ofxCvColorImage_swigregister
ofxCvColorImage_swigregister(ofxCvColorImage)

class ofxCvFloatImage(ofxCvImage):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def setNativeScale(self, _scaleMin, _scaleMax):
        return _ofxaddons.ofxCvFloatImage_setNativeScale(self, _scaleMin, _scaleMax)

    def getNativeScaleMin(self):
        return _ofxaddons.ofxCvFloatImage_getNativeScaleMin(self)

    def getNativeScaleMax(self):
        return _ofxaddons.ofxCvFloatImage_getNativeScaleMax(self)

    def __itruediv__(self, *args):
        return _ofxaddons.ofxCvFloatImage___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def setFromPixels(self, *args):
        return _ofxaddons.ofxCvFloatImage_setFromPixels(self, *args)

    def setRoiFromPixels(self, *args):
        return _ofxaddons.ofxCvFloatImage_setRoiFromPixels(self, *args)

    def __imul__(self, *args):
        return _ofxaddons.ofxCvFloatImage___imul__(self, *args)

    def addWeighted(self, mom, f):
        return _ofxaddons.ofxCvFloatImage_addWeighted(self, mom, f)

    def getPixelsAsFloats(self):
        return _ofxaddons.ofxCvFloatImage_getPixelsAsFloats(self)

    def getFloatPixelsRef(self):
        return _ofxaddons.ofxCvFloatImage_getFloatPixelsRef(self)

    def getRoiPixelsAsFloats(self):
        return _ofxaddons.ofxCvFloatImage_getRoiPixelsAsFloats(self)

    def getRoiFloatPixelsRef(self):
        return _ofxaddons.ofxCvFloatImage_getRoiFloatPixelsRef(self)

    def scaleIntoMe(self, *args):
        return _ofxaddons.ofxCvFloatImage_scaleIntoMe(self, *args)
    __swig_destroy__ = _ofxaddons.delete_ofxCvFloatImage
    __del__ = lambda self: None
ofxCvFloatImage_swigregister = _ofxaddons.ofxCvFloatImage_swigregister
ofxCvFloatImage_swigregister(ofxCvFloatImage)

class ofxCvShortImage(ofxCvImage):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _ofxaddons.new_ofxCvShortImage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def addWeighted(self, mom, f):
        return _ofxaddons.ofxCvShortImage_addWeighted(self, mom, f)

    def scaleIntoMe(self, *args):
        return _ofxaddons.ofxCvShortImage_scaleIntoMe(self, *args)

    def getShortPixelsRef(self):
        return _ofxaddons.ofxCvShortImage_getShortPixelsRef(self)

    def getRoiShortPixelsRef(self):
        return _ofxaddons.ofxCvShortImage_getRoiShortPixelsRef(self)
    __swig_destroy__ = _ofxaddons.delete_ofxCvShortImage
    __del__ = lambda self: None
ofxCvShortImage_swigregister = _ofxaddons.ofxCvShortImage_swigregister
ofxCvShortImage_swigregister(ofxCvShortImage)

class ofxCvContourFinder(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    blobs = _swig_property(_ofxaddons.ofxCvContourFinder_blobs_get, _ofxaddons.ofxCvContourFinder_blobs_set)
    nBlobs = _swig_property(_ofxaddons.ofxCvContourFinder_nBlobs_get, _ofxaddons.ofxCvContourFinder_nBlobs_set)

    def __init__(self):
        this = _ofxaddons.new_ofxCvContourFinder()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ofxaddons.delete_ofxCvContourFinder
    __del__ = lambda self: None

    def getWidth(self):
        return _ofxaddons.ofxCvContourFinder_getWidth(self)

    def getHeight(self):
        return _ofxaddons.ofxCvContourFinder_getHeight(self)

    def findContours(self, input, minArea, maxArea, nConsidered, bFindHoles, bUseApproximation=True):
        return _ofxaddons.ofxCvContourFinder_findContours(self, input, minArea, maxArea, nConsidered, bFindHoles, bUseApproximation)

    def draw(self, *args):
        return _ofxaddons.ofxCvContourFinder_draw(self, *args)

    def setAnchorPercent(self, xPct, yPct):
        return _ofxaddons.ofxCvContourFinder_setAnchorPercent(self, xPct, yPct)

    def setAnchorPoint(self, x, y):
        return _ofxaddons.ofxCvContourFinder_setAnchorPoint(self, x, y)

    def resetAnchor(self):
        return _ofxaddons.ofxCvContourFinder_resetAnchor(self)
ofxCvContourFinder_swigregister = _ofxaddons.ofxCvContourFinder_swigregister
ofxCvContourFinder_swigregister(ofxCvContourFinder)

class ofxCvHaarFinder(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    blobs = _swig_property(_ofxaddons.ofxCvHaarFinder_blobs_get, _ofxaddons.ofxCvHaarFinder_blobs_set)

    def __init__(self, *args):
        this = _ofxaddons.new_ofxCvHaarFinder(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ofxaddons.delete_ofxCvHaarFinder
    __del__ = lambda self: None

    def setup(self, haarFile):
        return _ofxaddons.ofxCvHaarFinder_setup(self, haarFile)

    def setScaleHaar(self, scaleHaar):
        return _ofxaddons.ofxCvHaarFinder_setScaleHaar(self, scaleHaar)

    def setNeighbors(self, neighbors):
        return _ofxaddons.ofxCvHaarFinder_setNeighbors(self, neighbors)

    def findHaarObjects(self, *args):
        return _ofxaddons.ofxCvHaarFinder_findHaarObjects(self, *args)

    def getWidth(self):
        return _ofxaddons.ofxCvHaarFinder_getWidth(self)

    def getHeight(self):
        return _ofxaddons.ofxCvHaarFinder_getHeight(self)

    def draw(self, x, y):
        return _ofxaddons.ofxCvHaarFinder_draw(self, x, y)
ofxCvHaarFinder_swigregister = _ofxaddons.ofxCvHaarFinder_swigregister
ofxCvHaarFinder_swigregister(ofxCvHaarFinder)

OFXOSC_TYPE_INT32 = _ofxaddons.OFXOSC_TYPE_INT32
OFXOSC_TYPE_INT64 = _ofxaddons.OFXOSC_TYPE_INT64
OFXOSC_TYPE_FLOAT = _ofxaddons.OFXOSC_TYPE_FLOAT
OFXOSC_TYPE_DOUBLE = _ofxaddons.OFXOSC_TYPE_DOUBLE
OFXOSC_TYPE_STRING = _ofxaddons.OFXOSC_TYPE_STRING
OFXOSC_TYPE_SYMBOL = _ofxaddons.OFXOSC_TYPE_SYMBOL
OFXOSC_TYPE_CHAR = _ofxaddons.OFXOSC_TYPE_CHAR
OFXOSC_TYPE_MIDI_MESSAGE = _ofxaddons.OFXOSC_TYPE_MIDI_MESSAGE
OFXOSC_TYPE_TRUE = _ofxaddons.OFXOSC_TYPE_TRUE
OFXOSC_TYPE_FALSE = _ofxaddons.OFXOSC_TYPE_FALSE
OFXOSC_TYPE_NONE = _ofxaddons.OFXOSC_TYPE_NONE
OFXOSC_TYPE_TRIGGER = _ofxaddons.OFXOSC_TYPE_TRIGGER
OFXOSC_TYPE_TIMETAG = _ofxaddons.OFXOSC_TYPE_TIMETAG
OFXOSC_TYPE_BLOB = _ofxaddons.OFXOSC_TYPE_BLOB
OFXOSC_TYPE_RGBA_COLOR = _ofxaddons.OFXOSC_TYPE_RGBA_COLOR
OFXOSC_TYPE_INDEXOUTOFBOUNDS = _ofxaddons.OFXOSC_TYPE_INDEXOUTOFBOUNDS
class ofxOscBundle(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _ofxaddons.new_ofxOscBundle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def copy(self, other):
        return _ofxaddons.ofxOscBundle_copy(self, other)

    def clear(self):
        return _ofxaddons.ofxOscBundle_clear(self)

    def addBundle(self, element):
        return _ofxaddons.ofxOscBundle_addBundle(self, element)

    def addMessage(self, message):
        return _ofxaddons.ofxOscBundle_addMessage(self, message)

    def getBundleCount(self):
        return _ofxaddons.ofxOscBundle_getBundleCount(self)

    def getMessageCount(self):
        return _ofxaddons.ofxOscBundle_getMessageCount(self)

    def getBundleAt(self, *args):
        return _ofxaddons.ofxOscBundle_getBundleAt(self, *args)

    def getMessageAt(self, *args):
        return _ofxaddons.ofxOscBundle_getMessageAt(self, *args)
    __swig_destroy__ = _ofxaddons.delete_ofxOscBundle
    __del__ = lambda self: None
ofxOscBundle_swigregister = _ofxaddons.ofxOscBundle_swigregister
ofxOscBundle_swigregister(ofxOscBundle)

class ofxOscMessage(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _ofxaddons.delete_ofxOscMessage
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _ofxaddons.new_ofxOscMessage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def copy(self, other):
        return _ofxaddons.ofxOscMessage_copy(self, other)

    def clear(self):
        return _ofxaddons.ofxOscMessage_clear(self)

    def setAddress(self, address):
        return _ofxaddons.ofxOscMessage_setAddress(self, address)

    def getAddress(self):
        return _ofxaddons.ofxOscMessage_getAddress(self)

    def getRemoteHost(self):
        return _ofxaddons.ofxOscMessage_getRemoteHost(self)

    def getRemotePort(self):
        return _ofxaddons.ofxOscMessage_getRemotePort(self)

    def getNumArgs(self):
        return _ofxaddons.ofxOscMessage_getNumArgs(self)

    def getArgType(self, index):
        return _ofxaddons.ofxOscMessage_getArgType(self, index)

    def getArgTypeName(self, index):
        return _ofxaddons.ofxOscMessage_getArgTypeName(self, index)

    def getTypeString(self):
        return _ofxaddons.ofxOscMessage_getTypeString(self)

    def getArgAsInt(self, index):
        return _ofxaddons.ofxOscMessage_getArgAsInt(self, index)

    def getArgAsInt32(self, index):
        return _ofxaddons.ofxOscMessage_getArgAsInt32(self, index)

    def getArgAsInt64(self, index):
        return _ofxaddons.ofxOscMessage_getArgAsInt64(self, index)

    def getArgAsFloat(self, index):
        return _ofxaddons.ofxOscMessage_getArgAsFloat(self, index)

    def getArgAsDouble(self, index):
        return _ofxaddons.ofxOscMessage_getArgAsDouble(self, index)

    def getArgAsString(self, index):
        return _ofxaddons.ofxOscMessage_getArgAsString(self, index)

    def getArgAsSymbol(self, index):
        return _ofxaddons.ofxOscMessage_getArgAsSymbol(self, index)

    def getArgAsChar(self, index):
        return _ofxaddons.ofxOscMessage_getArgAsChar(self, index)

    def getArgAsMidiMessage(self, index):
        return _ofxaddons.ofxOscMessage_getArgAsMidiMessage(self, index)

    def getArgAsBool(self, index):
        return _ofxaddons.ofxOscMessage_getArgAsBool(self, index)

    def getArgAsNone(self, index):
        return _ofxaddons.ofxOscMessage_getArgAsNone(self, index)

    def getArgAsTrigger(self, index):
        return _ofxaddons.ofxOscMessage_getArgAsTrigger(self, index)

    def getArgAsImpulse(self, index):
        return _ofxaddons.ofxOscMessage_getArgAsImpulse(self, index)

    def getArgAsInfinitum(self, index):
        return _ofxaddons.ofxOscMessage_getArgAsInfinitum(self, index)

    def getArgAsTimetag(self, index):
        return _ofxaddons.ofxOscMessage_getArgAsTimetag(self, index)

    def getArgAsBlob(self, index):
        return _ofxaddons.ofxOscMessage_getArgAsBlob(self, index)

    def getArgAsRgbaColor(self, index):
        return _ofxaddons.ofxOscMessage_getArgAsRgbaColor(self, index)

    def addIntArg(self, argument):
        return _ofxaddons.ofxOscMessage_addIntArg(self, argument)

    def addInt32Arg(self, argument):
        return _ofxaddons.ofxOscMessage_addInt32Arg(self, argument)

    def addInt64Arg(self, argument):
        return _ofxaddons.ofxOscMessage_addInt64Arg(self, argument)

    def addFloatArg(self, argument):
        return _ofxaddons.ofxOscMessage_addFloatArg(self, argument)

    def addDoubleArg(self, argument):
        return _ofxaddons.ofxOscMessage_addDoubleArg(self, argument)

    def addStringArg(self, argument):
        return _ofxaddons.ofxOscMessage_addStringArg(self, argument)

    def addSymbolArg(self, argument):
        return _ofxaddons.ofxOscMessage_addSymbolArg(self, argument)

    def addCharArg(self, argument):
        return _ofxaddons.ofxOscMessage_addCharArg(self, argument)

    def addMidiMessageArg(self, argument):
        return _ofxaddons.ofxOscMessage_addMidiMessageArg(self, argument)

    def addBoolArg(self, argument):
        return _ofxaddons.ofxOscMessage_addBoolArg(self, argument)

    def addNoneArg(self):
        return _ofxaddons.ofxOscMessage_addNoneArg(self)

    def addTriggerArg(self):
        return _ofxaddons.ofxOscMessage_addTriggerArg(self)

    def addImpulseArg(self):
        return _ofxaddons.ofxOscMessage_addImpulseArg(self)

    def addInfinitumArg(self):
        return _ofxaddons.ofxOscMessage_addInfinitumArg(self)

    def addTimetagArg(self, argument):
        return _ofxaddons.ofxOscMessage_addTimetagArg(self, argument)

    def addBlobArg(self, argument):
        return _ofxaddons.ofxOscMessage_addBlobArg(self, argument)

    def addRgbaColorArg(self, argument):
        return _ofxaddons.ofxOscMessage_addRgbaColorArg(self, argument)

    def setRemoteEndpoint(self, host, port):
        return _ofxaddons.ofxOscMessage_setRemoteEndpoint(self, host, port)

    def __str__(self):
        return _ofxaddons.ofxOscMessage___str__(self)
ofxOscMessage_swigregister = _ofxaddons.ofxOscMessage_swigregister
ofxOscMessage_swigregister(ofxOscMessage)

class ofxOscParameterSync(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        this = _ofxaddons.new_ofxOscParameterSync()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ofxaddons.delete_ofxOscParameterSync
    __del__ = lambda self: None

    def setup(self, group, localPort, remoteHost, remotePort):
        return _ofxaddons.ofxOscParameterSync_setup(self, group, localPort, remoteHost, remotePort)

    def update(self):
        return _ofxaddons.ofxOscParameterSync_update(self)
ofxOscParameterSync_swigregister = _ofxaddons.ofxOscParameterSync_swigregister
ofxOscParameterSync_swigregister(ofxOscParameterSync)

class ofxOscReceiverSettings(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    port = _swig_property(_ofxaddons.ofxOscReceiverSettings_port_get, _ofxaddons.ofxOscReceiverSettings_port_set)
    reuse = _swig_property(_ofxaddons.ofxOscReceiverSettings_reuse_get, _ofxaddons.ofxOscReceiverSettings_reuse_set)
    start = _swig_property(_ofxaddons.ofxOscReceiverSettings_start_get, _ofxaddons.ofxOscReceiverSettings_start_set)

    def __init__(self):
        this = _ofxaddons.new_ofxOscReceiverSettings()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ofxaddons.delete_ofxOscReceiverSettings
    __del__ = lambda self: None
ofxOscReceiverSettings_swigregister = _ofxaddons.ofxOscReceiverSettings_swigregister
ofxOscReceiverSettings_swigregister(ofxOscReceiverSettings)

class ofxOscReceiver(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _ofxaddons.delete_ofxOscReceiver
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _ofxaddons.new_ofxOscReceiver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def copy(self, other):
        return _ofxaddons.ofxOscReceiver_copy(self, other)

    def setup(self, *args):
        return _ofxaddons.ofxOscReceiver_setup(self, *args)

    def start(self):
        return _ofxaddons.ofxOscReceiver_start(self)

    def stop(self):
        return _ofxaddons.ofxOscReceiver_stop(self)

    def isListening(self):
        return _ofxaddons.ofxOscReceiver_isListening(self)

    def hasWaitingMessages(self):
        return _ofxaddons.ofxOscReceiver_hasWaitingMessages(self)

    def getNextMessage(self, msg):
        return _ofxaddons.ofxOscReceiver_getNextMessage(self, msg)

    def getParameter(self, parameter):
        return _ofxaddons.ofxOscReceiver_getParameter(self, parameter)

    def getPort(self):
        return _ofxaddons.ofxOscReceiver_getPort(self)

    def getSettings(self):
        return _ofxaddons.ofxOscReceiver_getSettings(self)
ofxOscReceiver_swigregister = _ofxaddons.ofxOscReceiver_swigregister
ofxOscReceiver_swigregister(ofxOscReceiver)

class ofxOscSenderSettings(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    host = _swig_property(_ofxaddons.ofxOscSenderSettings_host_get, _ofxaddons.ofxOscSenderSettings_host_set)
    port = _swig_property(_ofxaddons.ofxOscSenderSettings_port_get, _ofxaddons.ofxOscSenderSettings_port_set)
    broadcast = _swig_property(_ofxaddons.ofxOscSenderSettings_broadcast_get, _ofxaddons.ofxOscSenderSettings_broadcast_set)

    def __init__(self):
        this = _ofxaddons.new_ofxOscSenderSettings()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ofxaddons.delete_ofxOscSenderSettings
    __del__ = lambda self: None
ofxOscSenderSettings_swigregister = _ofxaddons.ofxOscSenderSettings_swigregister
ofxOscSenderSettings_swigregister(ofxOscSenderSettings)

class ofxOscSender(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _ofxaddons.delete_ofxOscSender
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _ofxaddons.new_ofxOscSender(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def copy(self, other):
        return _ofxaddons.ofxOscSender_copy(self, other)

    def setup(self, *args):
        return _ofxaddons.ofxOscSender_setup(self, *args)

    def clear(self):
        return _ofxaddons.ofxOscSender_clear(self)

    def sendMessage(self, message, wrapInBundle=True):
        return _ofxaddons.ofxOscSender_sendMessage(self, message, wrapInBundle)

    def sendBundle(self, bundle):
        return _ofxaddons.ofxOscSender_sendBundle(self, bundle)

    def sendParameter(self, parameter):
        return _ofxaddons.ofxOscSender_sendParameter(self, parameter)

    def getHost(self):
        return _ofxaddons.ofxOscSender_getHost(self)

    def getPort(self):
        return _ofxaddons.ofxOscSender_getPort(self)

    def getSettings(self):
        return _ofxaddons.ofxOscSender_getSettings(self)
ofxOscSender_swigregister = _ofxaddons.ofxOscSender_swigregister
ofxOscSender_swigregister(ofxOscSender)

class ofxSVG(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _ofxaddons.delete_ofxSVG
    __del__ = lambda self: None

    def getWidth(self):
        return _ofxaddons.ofxSVG_getWidth(self)

    def getHeight(self):
        return _ofxaddons.ofxSVG_getHeight(self)

    def load(self, path):
        return _ofxaddons.ofxSVG_load(self, path)

    def draw(self):
        return _ofxaddons.ofxSVG_draw(self)

    def getNumPath(self):
        return _ofxaddons.ofxSVG_getNumPath(self)

    def getPathAt(self, n):
        return _ofxaddons.ofxSVG_getPathAt(self, n)

    def getPaths(self):
        return _ofxaddons.ofxSVG_getPaths(self)

    def __init__(self):
        this = _ofxaddons.new_ofxSVG()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
ofxSVG_swigregister = _ofxaddons.ofxSVG_swigregister
ofxSVG_swigregister(ofxSVG)

class ofxVectorGraphics(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        this = _ofxaddons.new_ofxVectorGraphics()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def beginEPS(self, *args):
        return _ofxaddons.ofxVectorGraphics_beginEPS(self, *args)

    def endEPS(self):
        return _ofxaddons.ofxVectorGraphics_endEPS(self)

    def enableDraw(self):
        return _ofxaddons.ofxVectorGraphics_enableDraw(self)

    def disableDraw(self):
        return _ofxaddons.ofxVectorGraphics_disableDraw(self)

    def enableCenterRect(self):
        return _ofxaddons.ofxVectorGraphics_enableCenterRect(self)

    def disableCenterRect(self):
        return _ofxaddons.ofxVectorGraphics_disableCenterRect(self)

    def fill(self):
        return _ofxaddons.ofxVectorGraphics_fill(self)

    def noFill(self):
        return _ofxaddons.ofxVectorGraphics_noFill(self)

    def setLineWidth(self, lineWidth):
        return _ofxaddons.ofxVectorGraphics_setLineWidth(self, lineWidth)

    def setColor(self, *args):
        return _ofxaddons.ofxVectorGraphics_setColor(self, *args)

    def changeColor(self, r, g, b):
        return _ofxaddons.ofxVectorGraphics_changeColor(self, r, g, b)

    def rect(self, x1, y1, w, h):
        return _ofxaddons.ofxVectorGraphics_rect(self, x1, y1, w, h)

    def triangle(self, x1, y1, x2, y2, x3, y3):
        return _ofxaddons.ofxVectorGraphics_triangle(self, x1, y1, x2, y2, x3, y3)

    def circle(self, x1, y1, radius):
        return _ofxaddons.ofxVectorGraphics_circle(self, x1, y1, radius)

    def ellipse(self, x1, y1, w, h):
        return _ofxaddons.ofxVectorGraphics_ellipse(self, x1, y1, w, h)

    def line(self, x1, y1, x2, y2):
        return _ofxaddons.ofxVectorGraphics_line(self, x1, y1, x2, y2)

    def arc(self, x, y, radius, offsetAngleDegrees, internalAngleDegrees):
        return _ofxaddons.ofxVectorGraphics_arc(self, x, y, radius, offsetAngleDegrees, internalAngleDegrees)

    def bezier(self, x1, y1, x2, y2, x3, y3, x4, y4):
        return _ofxaddons.ofxVectorGraphics_bezier(self, x1, y1, x2, y2, x3, y3, x4, y4)

    def curve(self, x1, y1, x2, y2, x3, y3, x4, y4):
        return _ofxaddons.ofxVectorGraphics_curve(self, x1, y1, x2, y2, x3, y3, x4, y4)

    def beginShape(self):
        return _ofxaddons.ofxVectorGraphics_beginShape(self)

    def polyVertex(self, x, y):
        return _ofxaddons.ofxVectorGraphics_polyVertex(self, x, y)

    def bezierVertex(self, x1, y1, x2, y2, x3, y3):
        return _ofxaddons.ofxVectorGraphics_bezierVertex(self, x1, y1, x2, y2, x3, y3)

    def curveVertex(self, x, y):
        return _ofxaddons.ofxVectorGraphics_curveVertex(self, x, y)

    def endShape(self, bClose=False):
        return _ofxaddons.ofxVectorGraphics_endShape(self, bClose)
    creeps = _swig_property(_ofxaddons.ofxVectorGraphics_creeps_get, _ofxaddons.ofxVectorGraphics_creeps_set)
    __swig_destroy__ = _ofxaddons.delete_ofxVectorGraphics
    __del__ = lambda self: None
ofxVectorGraphics_swigregister = _ofxaddons.ofxVectorGraphics_swigregister
ofxVectorGraphics_swigregister(ofxVectorGraphics)

MAX_TAG_VALUE_LENGTH_IN_CHARS = _ofxaddons.MAX_TAG_VALUE_LENGTH_IN_CHARS
class ofxXmlSettings(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _ofxaddons.new_ofxXmlSettings(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ofxaddons.delete_ofxXmlSettings
    __del__ = lambda self: None

    def setVerbose(self, _verbose):
        return _ofxaddons.ofxXmlSettings_setVerbose(self, _verbose)

    def loadFile(self, xmlFile):
        return _ofxaddons.ofxXmlSettings_loadFile(self, xmlFile)

    def saveFile(self, *args):
        return _ofxaddons.ofxXmlSettings_saveFile(self, *args)

    def load(self, path):
        return _ofxaddons.ofxXmlSettings_load(self, path)

    def save(self, path):
        return _ofxaddons.ofxXmlSettings_save(self, path)

    def clearTagContents(self, tag, which=0):
        return _ofxaddons.ofxXmlSettings_clearTagContents(self, tag, which)

    def removeTag(self, tag, which=0):
        return _ofxaddons.ofxXmlSettings_removeTag(self, tag, which)

    def tagExists(self, tag, which=0):
        return _ofxaddons.ofxXmlSettings_tagExists(self, tag, which)

    def clear(self):
        return _ofxaddons.ofxXmlSettings_clear(self)

    def getValue(self, tag, defaultValue, which=0):
        return _ofxaddons.ofxXmlSettings_getValue(self, tag, defaultValue, which)

    def setValue(self, tag, value, which=0):
        return _ofxaddons.ofxXmlSettings_setValue(self, tag, value, which)

    def pushTag(self, tag, which=0):
        return _ofxaddons.ofxXmlSettings_pushTag(self, tag, which)

    def popTag(self):
        return _ofxaddons.ofxXmlSettings_popTag(self)

    def getPushLevel(self):
        return _ofxaddons.ofxXmlSettings_getPushLevel(self)

    def getNumTags(self, tag):
        return _ofxaddons.ofxXmlSettings_getNumTags(self, tag)

    def addValue(self, tag, value):
        return _ofxaddons.ofxXmlSettings_addValue(self, tag, value)

    def addTag(self, tag):
        return _ofxaddons.ofxXmlSettings_addTag(self, tag)

    def addAttribute(self, tag, attribute, value, which=0):
        return _ofxaddons.ofxXmlSettings_addAttribute(self, tag, attribute, value, which)

    def removeAttribute(self, tag, attribute, which=0):
        return _ofxaddons.ofxXmlSettings_removeAttribute(self, tag, attribute, which)

    def clearTagAttributes(self, tag, which=0):
        return _ofxaddons.ofxXmlSettings_clearTagAttributes(self, tag, which)

    def getNumAttributes(self, tag, which=0):
        return _ofxaddons.ofxXmlSettings_getNumAttributes(self, tag, which)

    def attributeExists(self, tag, attribute, which=0):
        return _ofxaddons.ofxXmlSettings_attributeExists(self, tag, attribute, which)

    def getAttributeNames(self, tag, outNames, which=0):
        return _ofxaddons.ofxXmlSettings_getAttributeNames(self, tag, outNames, which)

    def getAttribute(self, tag, attribute, defaultValue, which=0):
        return _ofxaddons.ofxXmlSettings_getAttribute(self, tag, attribute, defaultValue, which)

    def setAttribute(self, tag, attribute, value, which=0):
        return _ofxaddons.ofxXmlSettings_setAttribute(self, tag, attribute, value, which)

    def loadFromBuffer(self, buffer):
        return _ofxaddons.ofxXmlSettings_loadFromBuffer(self, buffer)

    def copyXmlToString(self, str):
        return _ofxaddons.ofxXmlSettings_copyXmlToString(self, str)
    doc = _swig_property(_ofxaddons.ofxXmlSettings_doc_get, _ofxaddons.ofxXmlSettings_doc_set)
    bDocLoaded = _swig_property(_ofxaddons.ofxXmlSettings_bDocLoaded_get, _ofxaddons.ofxXmlSettings_bDocLoaded_set)
ofxXmlSettings_swigregister = _ofxaddons.ofxXmlSettings_swigregister
ofxXmlSettings_swigregister(ofxXmlSettings)


def ofSerialize(settings, parameter):
    return _ofxaddons.ofSerialize(settings, parameter)
ofSerialize = _ofxaddons.ofSerialize

def ofDeserialize(settings, parameter):
    return _ofxaddons.ofDeserialize(settings, parameter)
ofDeserialize = _ofxaddons.ofDeserialize


